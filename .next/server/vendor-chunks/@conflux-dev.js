"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@conflux-dev";
exports.ids = ["vendor-chunks/@conflux-dev"];
exports.modules = {

/***/ "(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/address-utils.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@conflux-dev/conflux-address-js/lib/address-utils.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar CONST = __webpack_require__(/*! ./const */ \"(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/const.js\");\n\nvar _require = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/utils.js\"),\n    isHexString = _require.isHexString,\n    isString = _require.isString;\n/**\n * Check conflux address's prefix\n *\n * @param address {string}\n * @return {boolean}\n *\n * @example\n */\n\n\nfunction hasNetworkPrefix(address) {\n  if (!isString(address)) {\n    return false;\n  }\n\n  var parts = address.toLowerCase().split(':');\n\n  if (parts.length !== 2 && parts.length !== 3) {\n    return false;\n  }\n\n  var prefix = parts[0];\n\n  if (prefix === CONST.PREFIX_CFX || prefix === CONST.PREFIX_CFXTEST) {\n    return true;\n  }\n\n  return prefix.startsWith(CONST.PREFIX_NET) && /^([1-9]\\d*)$/.test(prefix.slice(3));\n}\n/**\n * simplify a verbose address(return a non-verbose address)\n *\n * @param address {string}\n * @return {string}\n *\n */\n\n\nfunction simplifyCfxAddress(address) {\n  if (!hasNetworkPrefix(address)) {\n    throw new Error('invalid base32 address');\n  }\n\n  var parts = address.toLocaleLowerCase().split(':');\n\n  if (parts.length !== 3) {\n    return address;\n  }\n\n  return \"\".concat(parts[0], \":\").concat(parts[2]);\n}\n\nfunction shortenCfxAddress(address) {\n  var compress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  address = simplifyCfxAddress(address);\n\n  var _address$split = address.split(':'),\n      _address$split2 = _slicedToArray(_address$split, 2),\n      netPre = _address$split2[0],\n      body = _address$split2[1];\n\n  var tailLen = netPre === 'cfx' && !compress ? 8 : 4;\n  var pre = body.slice(0, 3);\n  var tail = body.slice(body.length - tailLen);\n  return \"\".concat(netPre, \":\").concat(pre, \"...\").concat(tail);\n}\n\nfunction isZeroAddress(address) {\n  if (!isHexString(address)) throw new Error('Only hex is allowed');\n  return address === CONST.ZERO_ADDRESS_HEX;\n}\n\nfunction isInternalContractAddress(address) {\n  if (!isHexString(address)) throw new Error('Only hex is allowed');\n  return address === CONST.ADMIN_CONTROL || address === CONST.SPONSOR_CONTROL || address === CONST.STAKING || address === CONST.CONFLUX_CONTEXT || address === CONST.POS_REGISTER || address === CONST.CROSS_SPACE_CALL || address === CONST.PARAMS_CONTROL;\n}\n\nfunction isValidHexAddress(address) {\n  return isHexString(address) && address.length === 42;\n} // TOOD check address's checksum\n\n\nfunction isValidCfxHexAddress(address) {\n  if (address.length !== 42) return false;\n  if (isZeroAddress(address) || isInternalContractAddress(address)) return true;\n  return address.startsWith('0x1') || address.startsWith('0x8');\n}\n\nmodule.exports = {\n  hasNetworkPrefix: hasNetworkPrefix,\n  simplifyCfxAddress: simplifyCfxAddress,\n  shortenCfxAddress: shortenCfxAddress,\n  isZeroAddress: isZeroAddress,\n  isInternalContractAddress: isInternalContractAddress,\n  isValidHexAddress: isValidHexAddress,\n  isValidCfxHexAddress: isValidCfxHexAddress\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvbmZsdXgtZGV2L2NvbmZsdXgtYWRkcmVzcy1qcy9saWIvYWRkcmVzcy11dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixrQ0FBa0M7O0FBRWxDLDhCQUE4Qjs7QUFFOUIsa0RBQWtELGdCQUFnQixnRUFBZ0Usd0RBQXdELDZEQUE2RCxzREFBc0Q7O0FBRTdTLHVDQUF1Qyx1REFBdUQsdUNBQXVDLFNBQVMsT0FBTyxvQkFBb0I7O0FBRXpLLHlDQUF5Qyw4RkFBOEYsd0JBQXdCLGVBQWUsZUFBZSxnQkFBZ0IsWUFBWSxNQUFNLHdCQUF3QiwrQkFBK0IsYUFBYSxxQkFBcUIsdUNBQXVDLGNBQWMsV0FBVyxZQUFZLFVBQVUsTUFBTSxtREFBbUQsVUFBVSxzQkFBc0I7O0FBRXZlLGdDQUFnQzs7QUFFaEMsWUFBWSxtQkFBTyxDQUFDLGtGQUFTOztBQUU3QixlQUFlLG1CQUFPLENBQUMsa0ZBQVM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixZQUFZO0FBQ1o7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOzs7QUFHRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3Zpa2FzaHlhZGF2L0RldmVsb3Blci9BbGxnaXRGaWxlcy9Db25mbHV4LVR4bi12aXN1YWxpemVyL25vZGVfbW9kdWxlcy9AY29uZmx1eC1kZXYvY29uZmx1eC1hZGRyZXNzLWpzL2xpYi9hZGRyZXNzLXV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2kgPSBhcnIgJiYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXSk7IGlmIChfaSA9PSBudWxsKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX3MsIF9lOyB0cnkgeyBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbnZhciBDT05TVCA9IHJlcXVpcmUoJy4vY29uc3QnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi91dGlscycpLFxuICAgIGlzSGV4U3RyaW5nID0gX3JlcXVpcmUuaXNIZXhTdHJpbmcsXG4gICAgaXNTdHJpbmcgPSBfcmVxdWlyZS5pc1N0cmluZztcbi8qKlxuICogQ2hlY2sgY29uZmx1eCBhZGRyZXNzJ3MgcHJlZml4XG4gKlxuICogQHBhcmFtIGFkZHJlc3Mge3N0cmluZ31cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKlxuICogQGV4YW1wbGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGhhc05ldHdvcmtQcmVmaXgoYWRkcmVzcykge1xuICBpZiAoIWlzU3RyaW5nKGFkZHJlc3MpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHBhcnRzID0gYWRkcmVzcy50b0xvd2VyQ2FzZSgpLnNwbGl0KCc6Jyk7XG5cbiAgaWYgKHBhcnRzLmxlbmd0aCAhPT0gMiAmJiBwYXJ0cy5sZW5ndGggIT09IDMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcHJlZml4ID0gcGFydHNbMF07XG5cbiAgaWYgKHByZWZpeCA9PT0gQ09OU1QuUFJFRklYX0NGWCB8fCBwcmVmaXggPT09IENPTlNULlBSRUZJWF9DRlhURVNUKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gcHJlZml4LnN0YXJ0c1dpdGgoQ09OU1QuUFJFRklYX05FVCkgJiYgL14oWzEtOV1cXGQqKSQvLnRlc3QocHJlZml4LnNsaWNlKDMpKTtcbn1cbi8qKlxuICogc2ltcGxpZnkgYSB2ZXJib3NlIGFkZHJlc3MocmV0dXJuIGEgbm9uLXZlcmJvc2UgYWRkcmVzcylcbiAqXG4gKiBAcGFyYW0gYWRkcmVzcyB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICpcbiAqL1xuXG5cbmZ1bmN0aW9uIHNpbXBsaWZ5Q2Z4QWRkcmVzcyhhZGRyZXNzKSB7XG4gIGlmICghaGFzTmV0d29ya1ByZWZpeChhZGRyZXNzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBiYXNlMzIgYWRkcmVzcycpO1xuICB9XG5cbiAgdmFyIHBhcnRzID0gYWRkcmVzcy50b0xvY2FsZUxvd2VyQ2FzZSgpLnNwbGl0KCc6Jyk7XG5cbiAgaWYgKHBhcnRzLmxlbmd0aCAhPT0gMykge1xuICAgIHJldHVybiBhZGRyZXNzO1xuICB9XG5cbiAgcmV0dXJuIFwiXCIuY29uY2F0KHBhcnRzWzBdLCBcIjpcIikuY29uY2F0KHBhcnRzWzJdKTtcbn1cblxuZnVuY3Rpb24gc2hvcnRlbkNmeEFkZHJlc3MoYWRkcmVzcykge1xuICB2YXIgY29tcHJlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuICBhZGRyZXNzID0gc2ltcGxpZnlDZnhBZGRyZXNzKGFkZHJlc3MpO1xuXG4gIHZhciBfYWRkcmVzcyRzcGxpdCA9IGFkZHJlc3Muc3BsaXQoJzonKSxcbiAgICAgIF9hZGRyZXNzJHNwbGl0MiA9IF9zbGljZWRUb0FycmF5KF9hZGRyZXNzJHNwbGl0LCAyKSxcbiAgICAgIG5ldFByZSA9IF9hZGRyZXNzJHNwbGl0MlswXSxcbiAgICAgIGJvZHkgPSBfYWRkcmVzcyRzcGxpdDJbMV07XG5cbiAgdmFyIHRhaWxMZW4gPSBuZXRQcmUgPT09ICdjZngnICYmICFjb21wcmVzcyA/IDggOiA0O1xuICB2YXIgcHJlID0gYm9keS5zbGljZSgwLCAzKTtcbiAgdmFyIHRhaWwgPSBib2R5LnNsaWNlKGJvZHkubGVuZ3RoIC0gdGFpbExlbik7XG4gIHJldHVybiBcIlwiLmNvbmNhdChuZXRQcmUsIFwiOlwiKS5jb25jYXQocHJlLCBcIi4uLlwiKS5jb25jYXQodGFpbCk7XG59XG5cbmZ1bmN0aW9uIGlzWmVyb0FkZHJlc3MoYWRkcmVzcykge1xuICBpZiAoIWlzSGV4U3RyaW5nKGFkZHJlc3MpKSB0aHJvdyBuZXcgRXJyb3IoJ09ubHkgaGV4IGlzIGFsbG93ZWQnKTtcbiAgcmV0dXJuIGFkZHJlc3MgPT09IENPTlNULlpFUk9fQUREUkVTU19IRVg7XG59XG5cbmZ1bmN0aW9uIGlzSW50ZXJuYWxDb250cmFjdEFkZHJlc3MoYWRkcmVzcykge1xuICBpZiAoIWlzSGV4U3RyaW5nKGFkZHJlc3MpKSB0aHJvdyBuZXcgRXJyb3IoJ09ubHkgaGV4IGlzIGFsbG93ZWQnKTtcbiAgcmV0dXJuIGFkZHJlc3MgPT09IENPTlNULkFETUlOX0NPTlRST0wgfHwgYWRkcmVzcyA9PT0gQ09OU1QuU1BPTlNPUl9DT05UUk9MIHx8IGFkZHJlc3MgPT09IENPTlNULlNUQUtJTkcgfHwgYWRkcmVzcyA9PT0gQ09OU1QuQ09ORkxVWF9DT05URVhUIHx8IGFkZHJlc3MgPT09IENPTlNULlBPU19SRUdJU1RFUiB8fCBhZGRyZXNzID09PSBDT05TVC5DUk9TU19TUEFDRV9DQUxMIHx8IGFkZHJlc3MgPT09IENPTlNULlBBUkFNU19DT05UUk9MO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkSGV4QWRkcmVzcyhhZGRyZXNzKSB7XG4gIHJldHVybiBpc0hleFN0cmluZyhhZGRyZXNzKSAmJiBhZGRyZXNzLmxlbmd0aCA9PT0gNDI7XG59IC8vIFRPT0QgY2hlY2sgYWRkcmVzcydzIGNoZWNrc3VtXG5cblxuZnVuY3Rpb24gaXNWYWxpZENmeEhleEFkZHJlc3MoYWRkcmVzcykge1xuICBpZiAoYWRkcmVzcy5sZW5ndGggIT09IDQyKSByZXR1cm4gZmFsc2U7XG4gIGlmIChpc1plcm9BZGRyZXNzKGFkZHJlc3MpIHx8IGlzSW50ZXJuYWxDb250cmFjdEFkZHJlc3MoYWRkcmVzcykpIHJldHVybiB0cnVlO1xuICByZXR1cm4gYWRkcmVzcy5zdGFydHNXaXRoKCcweDEnKSB8fCBhZGRyZXNzLnN0YXJ0c1dpdGgoJzB4OCcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaGFzTmV0d29ya1ByZWZpeDogaGFzTmV0d29ya1ByZWZpeCxcbiAgc2ltcGxpZnlDZnhBZGRyZXNzOiBzaW1wbGlmeUNmeEFkZHJlc3MsXG4gIHNob3J0ZW5DZnhBZGRyZXNzOiBzaG9ydGVuQ2Z4QWRkcmVzcyxcbiAgaXNaZXJvQWRkcmVzczogaXNaZXJvQWRkcmVzcyxcbiAgaXNJbnRlcm5hbENvbnRyYWN0QWRkcmVzczogaXNJbnRlcm5hbENvbnRyYWN0QWRkcmVzcyxcbiAgaXNWYWxpZEhleEFkZHJlc3M6IGlzVmFsaWRIZXhBZGRyZXNzLFxuICBpc1ZhbGlkQ2Z4SGV4QWRkcmVzczogaXNWYWxpZENmeEhleEFkZHJlc3Ncbn07Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/address-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/cip37/base32.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@conflux-dev/conflux-address-js/lib/cip37/base32.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar JSBI = __webpack_require__(/*! jsbi */ \"(ssr)/./node_modules/jsbi/dist/jsbi.mjs\");\n\nvar ALPHABET = 'ABCDEFGHJKMNPRSTUVWXYZ0123456789';\nvar ALPHABET_MAP = {};\n\nfor (var z = 0; z < ALPHABET.length; z++) {\n  var x = ALPHABET.charAt(z);\n\n  if (ALPHABET_MAP[x] !== undefined) {\n    throw new TypeError(x + ' is ambiguous');\n  }\n\n  ALPHABET_MAP[x] = z;\n} // pre defined BigInt could faster about 40 percent\n\n\nvar BIGINT_0 = JSBI.BigInt(0);\nvar BIGINT_1 = JSBI.BigInt(1);\nvar BIGINT_5 = JSBI.BigInt(5);\nvar BIGINT_35 = JSBI.BigInt(35);\nvar BIGINT_0B00001 = JSBI.BigInt(1);\nvar BIGINT_0B00010 = JSBI.BigInt(2);\nvar BIGINT_0B00100 = JSBI.BigInt(4);\nvar BIGINT_0B01000 = JSBI.BigInt(8);\nvar BIGINT_0B10000 = JSBI.BigInt(16);\nvar BIGINT_0X07FFFFFFFF = JSBI.BigInt(0x07ffffffff);\nvar BIGINT_0X98F2BC8E61 = JSBI.BigInt(0x98f2bc8e61);\nvar BIGINT_0X79B76D99E2 = JSBI.BigInt(0x79b76d99e2);\nvar BIGINT_0XF33E5FB3C4 = JSBI.BigInt(0xf33e5fb3c4);\nvar BIGINT_0XAE2EABE2A8 = JSBI.BigInt(0xae2eabe2a8);\nvar BIGINT_0X1E4F43E470 = JSBI.BigInt(0x1e4f43e470);\n\nfunction convertBit(buffer, inBits, outBits, pad) {\n  var mask = (1 << outBits) - 1;\n  var array = [];\n  var bits = 0;\n  var value = 0;\n\n  var _iterator = _createForOfIteratorHelper(buffer),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _byte = _step.value;\n      bits += inBits;\n      value = value << inBits | _byte;\n\n      while (bits >= outBits) {\n        bits -= outBits;\n        array.push(value >>> bits & mask);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  value = value << outBits - bits & mask;\n\n  if (bits && pad) {\n    array.push(value);\n  } else if (value && !pad) {\n    throw new Error('Excess padding');\n  } else if (bits >= inBits && !pad) {\n    throw new Error('Non-zero padding');\n  }\n\n  return array;\n}\n\nfunction polyMod(buffer) {\n  var checksumBigInt = BIGINT_1;\n\n  var _iterator2 = _createForOfIteratorHelper(buffer),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _byte2 = _step2.value;\n      // c0 = c >> 35;\n      var high = JSBI.signedRightShift(checksumBigInt, BIGINT_35); // XXX: checksumBigInt must be positive, signedRightShift is ok\n      // c = ((c & 0x07ffffffff) << 5) ^ d;\n\n      checksumBigInt = JSBI.bitwiseAnd(checksumBigInt, BIGINT_0X07FFFFFFFF);\n      checksumBigInt = JSBI.leftShift(checksumBigInt, BIGINT_5);\n      checksumBigInt = _byte2 ? JSBI.bitwiseXor(checksumBigInt, JSBI.BigInt(_byte2)) : checksumBigInt; // bit ^ 0 = bit\n\n      if (JSBI.notEqual(JSBI.bitwiseAnd(high, BIGINT_0B00001), BIGINT_0)) {\n        checksumBigInt = JSBI.bitwiseXor(checksumBigInt, BIGINT_0X98F2BC8E61);\n      }\n\n      if (JSBI.notEqual(JSBI.bitwiseAnd(high, BIGINT_0B00010), BIGINT_0)) {\n        checksumBigInt = JSBI.bitwiseXor(checksumBigInt, BIGINT_0X79B76D99E2);\n      }\n\n      if (JSBI.notEqual(JSBI.bitwiseAnd(high, BIGINT_0B00100), BIGINT_0)) {\n        checksumBigInt = JSBI.bitwiseXor(checksumBigInt, BIGINT_0XF33E5FB3C4);\n      }\n\n      if (JSBI.notEqual(JSBI.bitwiseAnd(high, BIGINT_0B01000), BIGINT_0)) {\n        checksumBigInt = JSBI.bitwiseXor(checksumBigInt, BIGINT_0XAE2EABE2A8);\n      }\n\n      if (JSBI.notEqual(JSBI.bitwiseAnd(high, BIGINT_0B10000), BIGINT_0)) {\n        checksumBigInt = JSBI.bitwiseXor(checksumBigInt, BIGINT_0X1E4F43E470);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return JSBI.bitwiseXor(checksumBigInt, BIGINT_1);\n}\n\nmodule.exports = {\n  convertBit: convertBit,\n  polyMod: polyMod,\n  ALPHABET: ALPHABET,\n  ALPHABET_MAP: ALPHABET_MAP\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/cip37/base32.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/cip37/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@conflux-dev/conflux-address-js/lib/cip37/index.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\ntry {\n  var _require = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@conflux-dev/conflux-address-rust'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())),\n      _encode = _require.encode,\n      decode = _require.decode;\n\n  module.exports = {\n    encode: function encode(hexAddress, netId) {\n      var verbose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (Buffer.isBuffer(hexAddress)) {\n        hexAddress = hexAddress.toString('hex');\n      }\n\n      return _encode(hexAddress, netId, verbose);\n    },\n    decode: decode\n  };\n} catch (e) {\n  // console.log('To gain a address conversion performance boost, install @conflux-dev/conflux-address-rust')\n  module.exports = __webpack_require__(/*! ./pure-js-cip37.js */ \"(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/cip37/pure-js-cip37.js\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvbmZsdXgtZGV2L2NvbmZsdXgtYWRkcmVzcy1qcy9saWIvY2lwMzcvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQSxpQkFBaUIsbUJBQU8sQ0FBQyxnS0FBbUM7QUFDNUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQSxFQUFFLGlKQUE4QztBQUNoRCIsInNvdXJjZXMiOlsiL1VzZXJzL3Zpa2FzaHlhZGF2L0RldmVsb3Blci9BbGxnaXRGaWxlcy9Db25mbHV4LVR4bi12aXN1YWxpemVyL25vZGVfbW9kdWxlcy9AY29uZmx1eC1kZXYvY29uZmx1eC1hZGRyZXNzLWpzL2xpYi9jaXAzNy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudHJ5IHtcbiAgdmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnQGNvbmZsdXgtZGV2L2NvbmZsdXgtYWRkcmVzcy1ydXN0JyksXG4gICAgICBfZW5jb2RlID0gX3JlcXVpcmUuZW5jb2RlLFxuICAgICAgZGVjb2RlID0gX3JlcXVpcmUuZGVjb2RlO1xuXG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGVuY29kZTogZnVuY3Rpb24gZW5jb2RlKGhleEFkZHJlc3MsIG5ldElkKSB7XG4gICAgICB2YXIgdmVyYm9zZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoaGV4QWRkcmVzcykpIHtcbiAgICAgICAgaGV4QWRkcmVzcyA9IGhleEFkZHJlc3MudG9TdHJpbmcoJ2hleCcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX2VuY29kZShoZXhBZGRyZXNzLCBuZXRJZCwgdmVyYm9zZSk7XG4gICAgfSxcbiAgICBkZWNvZGU6IGRlY29kZVxuICB9O1xufSBjYXRjaCAoZSkge1xuICAvLyBjb25zb2xlLmxvZygnVG8gZ2FpbiBhIGFkZHJlc3MgY29udmVyc2lvbiBwZXJmb3JtYW5jZSBib29zdCwgaW5zdGFsbCBAY29uZmx1eC1kZXYvY29uZmx1eC1hZGRyZXNzLXJ1c3QnKVxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vcHVyZS1qcy1jaXAzNy5qcycpO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/cip37/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/cip37/pure-js-cip37.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@conflux-dev/conflux-address-js/lib/cip37/pure-js-cip37.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _require = __webpack_require__(/*! ./base32 */ \"(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/cip37/base32.js\"),\n    ALPHABET = _require.ALPHABET,\n    ALPHABET_MAP = _require.ALPHABET_MAP,\n    polyMod = _require.polyMod,\n    convertBit = _require.convertBit;\n\nvar CONST = __webpack_require__(/*! ../const */ \"(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/const.js\");\n\nvar _require2 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/utils.js\"),\n    isHexString = _require2.isHexString;\n\nvar VERSION_BYTE = 0;\nvar NET_ID_LIMIT = 0xFFFFFFFF;\n\nfunction encodeNetId(netId) {\n  if (!Number.isInteger(netId)) {\n    throw new Error('netId should be passed as an integer');\n  }\n\n  if (netId < 0 || netId > NET_ID_LIMIT) {\n    throw new Error('netId should be passed as in range [0, 0xFFFFFFFF]');\n  }\n\n  switch (netId) {\n    case CONST.NETID_TEST:\n      return CONST.PREFIX_CFXTEST;\n\n    case CONST.NETID_MAIN:\n      return CONST.PREFIX_CFX;\n\n    default:\n      return \"\".concat(CONST.PREFIX_NET).concat(netId);\n  }\n}\n\nfunction isValidNetId(netId) {\n  return /^([1-9]\\d*)$/.test(netId) && Number(netId) <= NET_ID_LIMIT;\n}\n\nfunction decodeNetId(payload) {\n  switch (payload) {\n    case CONST.PREFIX_CFXTEST:\n      return CONST.NETID_TEST;\n\n    case CONST.PREFIX_CFX:\n      return CONST.NETID_MAIN;\n\n    default:\n      {\n        var prefix = payload.slice(0, 3);\n        var netId = payload.slice(3);\n\n        if (prefix !== CONST.PREFIX_NET || !isValidNetId(netId)) {\n          throw new Error(\"netId prefix should be passed by 'cfx', 'cfxtest' or 'net[n]' \");\n        }\n\n        if (Number(netId) === CONST.NETID_TEST || Number(netId) === CONST.NETID_MAIN) {\n          throw new Error('net1 or net1029 are invalid');\n        }\n\n        return Number(netId);\n      }\n  }\n}\n\nfunction getAddressType(hexAddress) {\n  if (hexAddress.length < 1) {\n    throw new Error('Empty payload in address');\n  }\n\n  switch (hexAddress[0] & 0xf0) {\n    case 0x10:\n      return CONST.TYPE_USER;\n\n    case 0x80:\n      return CONST.TYPE_CONTRACT;\n\n    case 0x00:\n      var _iterator = _createForOfIteratorHelper(hexAddress),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var x = _step.value;\n\n          if (x !== 0x00) {\n            return CONST.TYPE_BUILTIN;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return CONST.TYPE_NULL;\n\n    default:\n      return CONST.TYPE_UNKNOWN;\n    // throw new Error('hexAddress should start with 0x0, 0x1 or 0x8')\n  }\n}\n\nfunction encode(hexAddress, netId) {\n  var verbose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (isHexString(hexAddress)) {\n    hexAddress = Buffer.from(hexAddress.slice(2), 'hex');\n  }\n\n  if (!(hexAddress instanceof Buffer)) {\n    throw new Error('hexAddress should be passed as a Buffer');\n  }\n\n  if (hexAddress.length < 20) {\n    throw new Error('hexAddress should be at least 20 bytes');\n  }\n\n  var addressType = getAddressType(hexAddress).toUpperCase();\n  var netName = encodeNetId(netId).toUpperCase();\n  var netName5Bits = Buffer.from(netName).map(function (_byte) {\n    return _byte & 31;\n  });\n  var payload5Bits = convertBit([VERSION_BYTE].concat(_toConsumableArray(hexAddress)), 8, 5, true);\n  var checksumBigInt = polyMod([].concat(_toConsumableArray(netName5Bits), [0], _toConsumableArray(payload5Bits), [0, 0, 0, 0, 0, 0, 0, 0]));\n  var checksumBytes = Buffer.from(checksumBigInt.toString(16).padStart(10, '0'), 'hex');\n  var checksum5Bits = convertBit(checksumBytes, 8, 5, true);\n  var payload = payload5Bits.map(function (_byte2) {\n    return ALPHABET[_byte2];\n  }).join('');\n  var checksum = checksum5Bits.map(function (_byte3) {\n    return ALPHABET[_byte3];\n  }).join('');\n  return verbose ? \"\".concat(netName, \":TYPE.\").concat(addressType, \":\").concat(payload).concat(checksum) : \"\".concat(netName, \":\").concat(payload).concat(checksum).toLowerCase();\n}\n\nfunction decode(address) {\n  // don't allow mixed case\n  var lowered = address.toLowerCase();\n  var uppered = address.toUpperCase();\n\n  if (address !== lowered && address !== uppered) {\n    throw new Error('Mixed-case address ' + address);\n  }\n\n  var _address$toUpperCase$ = address.toUpperCase().match(/^([^:]+):(.+:)?(.{34})(.{8})$/),\n      _address$toUpperCase$2 = _slicedToArray(_address$toUpperCase$, 5),\n      netName = _address$toUpperCase$2[1],\n      shouldHaveType = _address$toUpperCase$2[2],\n      payload = _address$toUpperCase$2[3],\n      checksum = _address$toUpperCase$2[4];\n\n  var prefix5Bits = Buffer.from(netName).map(function (_byte4) {\n    return _byte4 & 31;\n  });\n  var payload5Bits = [];\n\n  var _iterator2 = _createForOfIteratorHelper(payload),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _char = _step2.value;\n      payload5Bits.push(ALPHABET_MAP[_char]);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var checksum5Bits = [];\n\n  var _iterator3 = _createForOfIteratorHelper(checksum),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _char2 = _step3.value;\n      checksum5Bits.push(ALPHABET_MAP[_char2]);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  var _convertBit = convertBit(payload5Bits, 5, 8),\n      _convertBit2 = _toArray(_convertBit),\n      version = _convertBit2[0],\n      addressBytes = _convertBit2.slice(1);\n\n  if (version !== VERSION_BYTE) {\n    throw new Error('Can not recognize version byte');\n  }\n\n  var hexAddress = Buffer.from(addressBytes);\n  var netId = decodeNetId(netName.toLowerCase());\n  var type = getAddressType(hexAddress);\n\n  if (shouldHaveType && \"type.\".concat(type, \":\") !== shouldHaveType.toLowerCase()) {\n    throw new Error('Type of address doesn\\'t match');\n  }\n\n  var bigInt = polyMod([].concat(_toConsumableArray(prefix5Bits), [0], payload5Bits, checksum5Bits));\n\n  if (Number(bigInt)) {\n    throw new Error(\"Invalid checksum for \".concat(address));\n  }\n\n  return {\n    hexAddress: hexAddress,\n    netId: netId,\n    type: type\n  };\n}\n\nmodule.exports = {\n  encode: encode,\n  decode: decode\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/cip37/pure-js-cip37.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/const.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@conflux-dev/conflux-address-js/lib/const.js ***!
  \*******************************************************************/
/***/ ((module) => {

eval("\n\nvar TYPE_USER = 'user';\nvar TYPE_CONTRACT = 'contract';\nvar TYPE_BUILTIN = 'builtin';\nvar TYPE_NULL = 'null';\nvar TYPE_UNKNOWN = 'unknown';\nvar PREFIX_CFX = 'cfx';\nvar PREFIX_CFXTEST = 'cfxtest';\nvar PREFIX_NET = 'net';\nvar NETID_MAIN = 1029;\nvar NETID_TEST = 1;\nvar ZERO_ADDRESS_HEX = '0x0000000000000000000000000000000000000000';\nvar ADMIN_CONTROL = '0x0888000000000000000000000000000000000000';\nvar SPONSOR_CONTROL = '0x0888000000000000000000000000000000000001';\nvar STAKING = '0x0888000000000000000000000000000000000002';\nvar CONFLUX_CONTEXT = '0x0888000000000000000000000000000000000004';\nvar POS_REGISTER = '0x0888000000000000000000000000000000000005';\nvar CROSS_SPACE_CALL = '0x0888000000000000000000000000000000000006';\nvar PARAMS_CONTROL = '0x0888000000000000000000000000000000000007';\nmodule.exports = {\n  TYPE_USER: TYPE_USER,\n  TYPE_CONTRACT: TYPE_CONTRACT,\n  TYPE_BUILTIN: TYPE_BUILTIN,\n  TYPE_NULL: TYPE_NULL,\n  TYPE_UNKNOWN: TYPE_UNKNOWN,\n  PREFIX_CFX: PREFIX_CFX,\n  PREFIX_CFXTEST: PREFIX_CFXTEST,\n  PREFIX_NET: PREFIX_NET,\n  NETID_MAIN: NETID_MAIN,\n  NETID_TEST: NETID_TEST,\n  ZERO_ADDRESS_HEX: ZERO_ADDRESS_HEX,\n  ADMIN_CONTROL: ADMIN_CONTROL,\n  SPONSOR_CONTROL: SPONSOR_CONTROL,\n  STAKING: STAKING,\n  CONFLUX_CONTEXT: CONFLUX_CONTEXT,\n  POS_REGISTER: POS_REGISTER,\n  CROSS_SPACE_CALL: CROSS_SPACE_CALL,\n  PARAMS_CONTROL: PARAMS_CONTROL\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvbmZsdXgtZGV2L2NvbmZsdXgtYWRkcmVzcy1qcy9saWIvY29uc3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3Zpa2FzaHlhZGF2L0RldmVsb3Blci9BbGxnaXRGaWxlcy9Db25mbHV4LVR4bi12aXN1YWxpemVyL25vZGVfbW9kdWxlcy9AY29uZmx1eC1kZXYvY29uZmx1eC1hZGRyZXNzLWpzL2xpYi9jb25zdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIFRZUEVfVVNFUiA9ICd1c2VyJztcbnZhciBUWVBFX0NPTlRSQUNUID0gJ2NvbnRyYWN0JztcbnZhciBUWVBFX0JVSUxUSU4gPSAnYnVpbHRpbic7XG52YXIgVFlQRV9OVUxMID0gJ251bGwnO1xudmFyIFRZUEVfVU5LTk9XTiA9ICd1bmtub3duJztcbnZhciBQUkVGSVhfQ0ZYID0gJ2NmeCc7XG52YXIgUFJFRklYX0NGWFRFU1QgPSAnY2Z4dGVzdCc7XG52YXIgUFJFRklYX05FVCA9ICduZXQnO1xudmFyIE5FVElEX01BSU4gPSAxMDI5O1xudmFyIE5FVElEX1RFU1QgPSAxO1xudmFyIFpFUk9fQUREUkVTU19IRVggPSAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJztcbnZhciBBRE1JTl9DT05UUk9MID0gJzB4MDg4ODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCc7XG52YXIgU1BPTlNPUl9DT05UUk9MID0gJzB4MDg4ODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMSc7XG52YXIgU1RBS0lORyA9ICcweDA4ODgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDInO1xudmFyIENPTkZMVVhfQ09OVEVYVCA9ICcweDA4ODgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQnO1xudmFyIFBPU19SRUdJU1RFUiA9ICcweDA4ODgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDUnO1xudmFyIENST1NTX1NQQUNFX0NBTEwgPSAnMHgwODg4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA2JztcbnZhciBQQVJBTVNfQ09OVFJPTCA9ICcweDA4ODgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDcnO1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFRZUEVfVVNFUjogVFlQRV9VU0VSLFxuICBUWVBFX0NPTlRSQUNUOiBUWVBFX0NPTlRSQUNULFxuICBUWVBFX0JVSUxUSU46IFRZUEVfQlVJTFRJTixcbiAgVFlQRV9OVUxMOiBUWVBFX05VTEwsXG4gIFRZUEVfVU5LTk9XTjogVFlQRV9VTktOT1dOLFxuICBQUkVGSVhfQ0ZYOiBQUkVGSVhfQ0ZYLFxuICBQUkVGSVhfQ0ZYVEVTVDogUFJFRklYX0NGWFRFU1QsXG4gIFBSRUZJWF9ORVQ6IFBSRUZJWF9ORVQsXG4gIE5FVElEX01BSU46IE5FVElEX01BSU4sXG4gIE5FVElEX1RFU1Q6IE5FVElEX1RFU1QsXG4gIFpFUk9fQUREUkVTU19IRVg6IFpFUk9fQUREUkVTU19IRVgsXG4gIEFETUlOX0NPTlRST0w6IEFETUlOX0NPTlRST0wsXG4gIFNQT05TT1JfQ09OVFJPTDogU1BPTlNPUl9DT05UUk9MLFxuICBTVEFLSU5HOiBTVEFLSU5HLFxuICBDT05GTFVYX0NPTlRFWFQ6IENPTkZMVVhfQ09OVEVYVCxcbiAgUE9TX1JFR0lTVEVSOiBQT1NfUkVHSVNURVIsXG4gIENST1NTX1NQQUNFX0NBTEw6IENST1NTX1NQQUNFX0NBTEwsXG4gIFBBUkFNU19DT05UUk9MOiBQQVJBTVNfQ09OVFJPTFxufTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/const.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@conflux-dev/conflux-address-js/lib/index.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar _require = __webpack_require__(/*! ./cip37 */ \"(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/cip37/index.js\"),\n    encode = _require.encode,\n    decode = _require.decode;\n\nvar _require2 = __webpack_require__(/*! ./address-utils */ \"(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/address-utils.js\"),\n    rest = _extends({}, _require2);\n\nvar _require3 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/utils.js\"),\n    isString = _require3.isString;\n/**\n * Check whether a given address is valid, will return a boolean value\n *\n * @param address {string}\n * @return {boolean}\n *\n */\n\n\nfunction isValidCfxAddress(address) {\n  if (!isString(address)) {\n    return false;\n  }\n\n  try {\n    decode(address);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Check whether a given address is valid, if not valid will throw an error\n *\n * @param address {string}\n *\n */\n\n\nfunction verifyCfxAddress(address) {\n  decode(address);\n  return true;\n}\n\nmodule.exports = _objectSpread({\n  encode: encode,\n  decode: decode,\n  isValidCfxAddress: isValidCfxAddress,\n  verifyCfxAddress: verifyCfxAddress\n}, rest);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvbmZsdXgtZGV2L2NvbmZsdXgtYWRkcmVzcy1qcy9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsMkNBQTJDLGdDQUFnQyxvQ0FBb0Msb0RBQW9ELHNCQUFzQiwwQ0FBMEMsaUVBQWlFLEtBQUssa0NBQWtDOztBQUUzVSxpQ0FBaUMsZ0JBQWdCLHNCQUFzQixPQUFPLHVEQUF1RCxhQUFhLHVEQUF1RCw0Q0FBNEMsS0FBSyw2Q0FBNkMsNkVBQTZFLE9BQU8saURBQWlELG1GQUFtRixPQUFPOztBQUV0Z0IsNENBQTRDLGtCQUFrQixrQ0FBa0Msb0VBQW9FLEtBQUssT0FBTyxvQkFBb0I7O0FBRXBNLHNCQUFzQixnREFBZ0QsZ0JBQWdCLHNCQUFzQixPQUFPLDJCQUEyQiwwQkFBMEIseURBQXlELGlDQUFpQyxrQkFBa0I7O0FBRXBSLGVBQWUsbUJBQU8sQ0FBQyx3RkFBUztBQUNoQztBQUNBOztBQUVBLGdCQUFnQixtQkFBTyxDQUFDLGtHQUFpQjtBQUN6QyxzQkFBc0I7O0FBRXRCLGdCQUFnQixtQkFBTyxDQUFDLGtGQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CLFlBQVk7QUFDWjtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwic291cmNlcyI6WyIvVXNlcnMvdmlrYXNoeWFkYXYvRGV2ZWxvcGVyL0FsbGdpdEZpbGVzL0NvbmZsdXgtVHhuLXZpc3VhbGl6ZXIvbm9kZV9tb2R1bGVzL0Bjb25mbHV4LWRldi9jb25mbHV4LWFkZHJlc3MtanMvbGliL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSB7IHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsgfSBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vY2lwMzcnKSxcbiAgICBlbmNvZGUgPSBfcmVxdWlyZS5lbmNvZGUsXG4gICAgZGVjb2RlID0gX3JlcXVpcmUuZGVjb2RlO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi9hZGRyZXNzLXV0aWxzJyksXG4gICAgcmVzdCA9IF9leHRlbmRzKHt9LCBfcmVxdWlyZTIpO1xuXG52YXIgX3JlcXVpcmUzID0gcmVxdWlyZSgnLi91dGlscycpLFxuICAgIGlzU3RyaW5nID0gX3JlcXVpcmUzLmlzU3RyaW5nO1xuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGEgZ2l2ZW4gYWRkcmVzcyBpcyB2YWxpZCwgd2lsbCByZXR1cm4gYSBib29sZWFuIHZhbHVlXG4gKlxuICogQHBhcmFtIGFkZHJlc3Mge3N0cmluZ31cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKlxuICovXG5cblxuZnVuY3Rpb24gaXNWYWxpZENmeEFkZHJlc3MoYWRkcmVzcykge1xuICBpZiAoIWlzU3RyaW5nKGFkZHJlc3MpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBkZWNvZGUoYWRkcmVzcyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhIGdpdmVuIGFkZHJlc3MgaXMgdmFsaWQsIGlmIG5vdCB2YWxpZCB3aWxsIHRocm93IGFuIGVycm9yXG4gKlxuICogQHBhcmFtIGFkZHJlc3Mge3N0cmluZ31cbiAqXG4gKi9cblxuXG5mdW5jdGlvbiB2ZXJpZnlDZnhBZGRyZXNzKGFkZHJlc3MpIHtcbiAgZGVjb2RlKGFkZHJlc3MpO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0U3ByZWFkKHtcbiAgZW5jb2RlOiBlbmNvZGUsXG4gIGRlY29kZTogZGVjb2RlLFxuICBpc1ZhbGlkQ2Z4QWRkcmVzczogaXNWYWxpZENmeEFkZHJlc3MsXG4gIHZlcmlmeUNmeEFkZHJlc3M6IHZlcmlmeUNmeEFkZHJlc3Ncbn0sIHJlc3QpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/utils.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@conflux-dev/conflux-address-js/lib/utils.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nexports.isHexString = function (v) {\n  return typeof v === 'string' && v.match(/^0x[0-9A-Fa-f]*$/);\n};\n\nexports.isString = function (data) {\n  return typeof data === 'string';\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvbmZsdXgtZGV2L2NvbmZsdXgtYWRkcmVzcy1qcy9saWIvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsbUJBQW1CO0FBQ25CO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWthc2h5YWRhdi9EZXZlbG9wZXIvQWxsZ2l0RmlsZXMvQ29uZmx1eC1UeG4tdmlzdWFsaXplci9ub2RlX21vZHVsZXMvQGNvbmZsdXgtZGV2L2NvbmZsdXgtYWRkcmVzcy1qcy9saWIvdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuaXNIZXhTdHJpbmcgPSBmdW5jdGlvbiAodikge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdzdHJpbmcnICYmIHYubWF0Y2goL14weFswLTlBLUZhLWZdKiQvKTtcbn07XG5cbmV4cG9ydHMuaXNTdHJpbmcgPSBmdW5jdGlvbiAoZGF0YSkge1xuICByZXR1cm4gdHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnO1xufTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/utils.js\n");

/***/ })

};
;