/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/js-conflux-sdk";
exports.ids = ["vendor-chunks/js-conflux-sdk"];
exports.modules = {

/***/ "(ssr)/./node_modules/js-conflux-sdk/package.json":
/*!**************************************************!*\
  !*** ./node_modules/js-conflux-sdk/package.json ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"js-conflux-sdk","description":"JavaScript Conflux Software Development Kit","version":"2.5.0","license":"LGPL-3.0","author":"pan.wang@confluxnetwork.org","repository":"https://github.com/Conflux-Chain/js-conflux-sdk.git","keywords":["conflux","sdk"],"main":"src/index.js","bin":{"cfxjs":"bin/cfxjs.js","sponsor":"bin/sponsor.js","rpc":"bin/rpc.js"},"types":"./dist/types/index.d.ts","browser":"dist/js-conflux-sdk.umd.min.js","browserify-browser":{"secp256k1":"secp256k1/elliptic","./src/util/jsbi":"jsbi"},"files":["dist","mock","src"],"scripts":{"eslint":"npx eslint ./src ./test ./mock","build":"node scripts/build-frontend.js && npm run gendts","gendts":"npx tsc && node scripts/deal-dts.js","document":"node scripts/document.js","jsdocToMd":"node scripts/jsdoc-to-md.js","jsdoc":"jsdoc -c jsdoc.json","prepublishOnly":"npm run build","test":"jest --coverage","react":"npm run build & cd react & yarn build & yarn start"},"browserslit":"cover 99.5%","dependencies":{"@conflux-dev/conflux-address-js":"1.3.16","abi-util-lite":"^0.1.0","big.js":"^5.2.2","commander":"^8.0.0","keccak":"^2.0.0","lodash":"^4.17.21","rlp":"^2.2.7","scrypt-js":"^3.0.1","secp256k1":"^3.8.1","superagent":"^6.1.0","websocket":"^1.0.35"},"devDependencies":{"@babel/core":"^7.8.4","@babel/plugin-transform-runtime":"^7.8.3","@babel/preset-env":"^7.8.4","@babel/runtime":"^7.8.4","@conflux-dev/jsdoc-tsimport-plugin":"^1.0.5","@conflux-dev/jsonrpc-spec":"^0.2.1","@geekberry/jsdoc-to-md":"0.0.8","@types/node":"^14.0.23","babel-plugin-lodash":"^3.3.4","babelify":"^10.0.0","browserify":"^16.5.1","concurrently":"^5.1.0","eslint":"^7.12.0","eslint-config-airbnb-base":"^14.0.0","eslint-plugin-import":"^2.18.2","exorcist":"^1.0.1","fs-extra":"^8.1.0","jest":"26.6.0","jsbi":"^3.1.4","jsdoc-to-markdown":"^7.1.0","jsdoc-tsimport-plugin":"^1.0.5","minify-stream":"^2.0.1","mold-source-map":"^0.4.0","solc":"^0.6.10","tidy-jsdoc":"^1.4.1","typescript":"^4.6.4"},"resolutions":{"tinyify/acorn-node/acorn":"7.1.1","eslint/espree/acorn":"7.1.1","tinyify/unassertify/unassert/acorn":"7.1.1","**/minimist":"^1.2.3","**/kind-of":"^6.0.3","**/elliptic":"^6.5.3","**/lodash":"^4.17.20","**/babel-jest":"^26.6.0","jest/jest-cli/jest-config/jest-environment-jsdom/jsdom/acorn-globals/acorn":"6.4.1"}}');

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/CONST.js":
/*!**************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/CONST.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const JSBI = __webpack_require__(/*! ./util/jsbi */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/jsbi.js\");\n\n/**\n * @see https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt\n */\nJSBI.prototype.toJSON = function () {\n  return this.toString();\n};\n\n/** @constant {number} */\nconst WORD_BYTES = 32; // byte number pre abi word\n\n/** @constant {number} */\nconst WORD_CHARS = WORD_BYTES * 2;\n\n/** @constant {BigInt} */\nconst UINT_BOUND = JSBI.leftShift(JSBI.BigInt(1), JSBI.BigInt(WORD_BYTES * 8)); // 2**256\n\n/** @constant {BigInt} */\nconst MAX_UINT = JSBI.subtract(UINT_BOUND, JSBI.BigInt(1)); // 2**256-1\n\n/**\n * Enum for epochNumber tag\n * @readonly\n * @enum {string}\n *\n * - `LATEST_MINED` 'latest_mined': latest epoch.\n * - `LATEST_STATE` 'latest_state': latest state, about 5 epoch less then `LATEST_MINED`\n * - `LATEST_FINALIZED` 'latest_finalized': latest epoch which finalized by PoS chain.\n * - `LATEST_CONFIRMED` 'latest_confirmed': latest epoch which confirmation risk less 1e-8.\n * - `LATEST_CHECKPOINT` 'latest_checkpoint': latest check point epoch.\n * - `EARLIEST` 'earliest': earliest epoch number, same as 0.\n */\nconst EPOCH_NUMBER = {\n  LATEST_MINED: 'latest_mined',\n  LATEST_STATE: 'latest_state',\n  LATEST_FINALIZED: 'latest_finalized',\n  LATEST_CONFIRMED: 'latest_confirmed',\n  LATEST_CHECKPOINT: 'latest_checkpoint',\n  EARLIEST: 'earliest',\n};\n\n/**\n * Min gas price for transaction\n * @constant {number}\n * @example\n * > CONST.MIN_GAS_PRICE\n 1000000000\n */\nconst MIN_GAS_PRICE = 1000000000; // 1Gdrip\n\n/**\n * Gas use for pure transfer transaction\n * @constant {number}\n * @example\n * > CONST.TRANSACTION_GAS\n 21000\n */\nconst TRANSACTION_GAS = 21000;\n\n/**\n * Storage limit for pure transfer transaction\n * @constant {number}\n * @example\n * > CONST.TRANSACTION_STORAGE_LIMIT\n 0\n */\nconst TRANSACTION_STORAGE_LIMIT = 0;\n\n/**\n * Mainnet chainId\n * @constant {number}\n * @example\n * > CONST.MAINNET_ID\n 1029\n */\nconst MAINNET_ID = 1029;\n\n/**\n * Testnet chainId\n * @constant {number}\n * @example\n * > CONST.TESTNET_ID\n 1\n */\nconst TESTNET_ID = 1;\n\n/**\n * Zero address\n * @constant {string}\n * @example\n * > ZERO_ADDRESS\n 0x0000000000000000000000000000000000000000\n */\nconst ZERO_ADDRESS_HEX = '0x0000000000000000000000000000000000000000';\n\n/** @constant {string} */\nconst ZERO_HASH = '0x0000000000000000000000000000000000000000000000000000000000000000';\n\n/**\n * Pending transaction status\n * @readonly\n * @enum {string}\n *\n * - `FUTURE_NONCE` 'futureNonce': pending because future nonce\n * - `NOT_ENOUGH_CASH` 'notEnoughCash': pending because insufficient balance\n */\nconst PENDING_TX_STATUS = {\n  FUTURE_NONCE: 'futureNonce',\n  NOT_ENOUGH_CASH: 'notEnoughCash',\n};\n\n/**\n * Enum for trace action types\n * @readonly\n * @enum {string}\n */\nconst ACTION_TYPES = {\n  CALL: 'call',\n  CREATE: 'create',\n  CALL_RESULT: 'call_result',\n  CREATE_RESULT: 'create_result',\n  INTERNAL_TRANSFER_ACTION: 'internal_transfer_action',\n};\n\n/**\n * Enum for trace pocket types\n * @readonly\n * @enum {string}\n */\nconst POCKET_ENUM = {\n  BALANCE: 'balance',\n  STAKING_BALANCE: 'staking_balance',\n  STORAGE_COLLATERAL: 'storage_collateral',\n  SPONSOR_BALANCE_FOR_GAS: 'sponsor_balance_for_gas',\n  SPONSOR_BALANCE_FOR_COLLATERAL: 'sponsor_balance_for_collateral',\n  MINT_BURN: 'mint_burn',\n  GAS_PAYMENT: 'gas_payment',\n};\n\n/**\n * Enum for trace call types\n * @readonly\n * @enum {string}\n */\nconst CALL_TYPES = {\n  NONE: 'none',\n  CALL: 'call',\n  CALL_CODE: 'callcode',\n  DELEGATE_CALL: 'delegatecall',\n  STATIC_CALL: 'staticcall',\n};\n\n/**\n * Enum for trace create types\n * @readonly\n * @enum {string}\n */\nconst CREATE_TYPES = {\n  NONE: 'none',\n  CREATE: 'create',\n  CREATE2: 'create2',\n};\n\n/**\n * Enum for space type\n * @readonly\n * @enum {string}\n */\nconst SPACE_ENUM = {\n  NONE: 'none',\n  NATIVE: 'native',\n  EVM: 'evm',\n};\n\n/**\n * Enum for trace call status\n * @readonly\n * @enum {string}\n */\nconst CALL_STATUS = {\n  SUCCESS: 'success',\n  REVERTED: 'reverted',\n  FAIL: 'fail',\n};\n\n/**\n * Enum for transaction.status and receipt.outcomeStatus\n * @readonly\n * @enum {number}\n */\nconst TX_STATUS = {\n  UNEXECUTE: null, // If tx is not packed or in the defer state or executed in other block\n  SUCCESS: 0,\n  FAIL: 1,\n  SKIP: 2,\n};\n\n/**\n * Enum for address types\n * @readonly\n * @enum {string}\n */\nconst ADDRESS_TYPES = {\n  USER: 'user',\n  CONTRACT: 'contract',\n  BUILTIN: 'builtin',\n  NULL: 'null',\n};\n\n/**\n * KECCAK (i.e. Keccak) hash of the empty bytes string.\n * @constant {string}\n * */\nconst KECCAK_EMPTY = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nconst TRANSACTION_TYPE_LEGACY = 0;\nconst TRANSACTION_TYPE_EIP2930 = 1;\nconst TRANSACTION_TYPE_EIP1559 = 2;\nconst TXRLP_TYPE_PREFIX = Buffer.from('cfx');\nconst TXRLP_TYPE_PREFIX_2930 = Buffer.concat([TXRLP_TYPE_PREFIX, Buffer.from([1])]);\nconst TXRLP_TYPE_PREFIX_1559 = Buffer.concat([TXRLP_TYPE_PREFIX, Buffer.from([2])]);\n\nmodule.exports = {\n  WORD_BYTES,\n  WORD_CHARS,\n  UINT_BOUND,\n  MAX_UINT,\n  EPOCH_NUMBER,\n  MIN_GAS_PRICE,\n  TRANSACTION_GAS,\n  TRANSACTION_STORAGE_LIMIT,\n  TESTNET_ID,\n  MAINNET_ID,\n  ZERO_ADDRESS_HEX,\n  PENDING_TX_STATUS,\n  ACTION_TYPES,\n  CALL_TYPES,\n  CALL_STATUS,\n  POCKET_ENUM,\n  TX_STATUS,\n  CREATE_TYPES,\n  SPACE_ENUM,\n  KECCAK_EMPTY,\n  ZERO_HASH,\n  ADDRESS_TYPES,\n  TRANSACTION_TYPE_LEGACY,\n  TRANSACTION_TYPE_EIP2930,\n  TRANSACTION_TYPE_EIP1559,\n  TXRLP_TYPE_PREFIX,\n  TXRLP_TYPE_PREFIX_2930,\n  TXRLP_TYPE_PREFIX_1559,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/CONST.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/Conflux.js":
/*!****************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/Conflux.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const CONST = __webpack_require__(/*! ./CONST */ \"(ssr)/./node_modules/js-conflux-sdk/src/CONST.js\");\nconst { assert } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\nconst format = __webpack_require__(/*! ./util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\nconst cfxFormat = __webpack_require__(/*! ./rpc/types/formatter */ \"(ssr)/./node_modules/js-conflux-sdk/src/rpc/types/formatter.js\");\nconst providerFactory = __webpack_require__(/*! ./provider */ \"(ssr)/./node_modules/js-conflux-sdk/src/provider/index.js\");\nconst Wallet = __webpack_require__(/*! ./wallet */ \"(ssr)/./node_modules/js-conflux-sdk/src/wallet/index.js\");\nconst Contract = __webpack_require__(/*! ./contract */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/index.js\");\nconst INTERNAL_CONTRACTS = __webpack_require__(/*! ./contract/internal */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/internal/index.js\");\nconst { CRC20_ABI } = __webpack_require__(/*! ./contract/standard */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/standard/index.js\");\nconst PendingTransaction = __webpack_require__(/*! ./subscribe/PendingTransaction */ \"(ssr)/./node_modules/js-conflux-sdk/src/subscribe/PendingTransaction.js\");\nconst Subscription = __webpack_require__(/*! ./subscribe/Subscription */ \"(ssr)/./node_modules/js-conflux-sdk/src/subscribe/Subscription.js\");\nconst pkg = __webpack_require__(/*! ../package.json */ \"(ssr)/./node_modules/js-conflux-sdk/package.json\");\nconst PoS = __webpack_require__(/*! ./rpc/pos */ \"(ssr)/./node_modules/js-conflux-sdk/src/rpc/pos.js\");\nconst CFX = __webpack_require__(/*! ./rpc/cfx */ \"(ssr)/./node_modules/js-conflux-sdk/src/rpc/cfx.js\");\nconst Trace = __webpack_require__(/*! ./rpc/trace */ \"(ssr)/./node_modules/js-conflux-sdk/src/rpc/trace.js\");\nconst TxPool = __webpack_require__(/*! ./rpc/txpool */ \"(ssr)/./node_modules/js-conflux-sdk/src/rpc/txpool.js\");\nconst BatchRequester = __webpack_require__(/*! ./rpc/BatchRequester */ \"(ssr)/./node_modules/js-conflux-sdk/src/rpc/BatchRequester.js\");\nconst AdvancedRPCUtilities = __webpack_require__(/*! ./rpc/Advanced */ \"(ssr)/./node_modules/js-conflux-sdk/src/rpc/Advanced.js\");\n\n/**\n * @typedef {Object} ConfluxOption\n * @property {string|number} [options.defaultGasPrice] - The default gas price in drip to use for transactions.\n * @property {string} [options.url] - Url of Conflux node to connect.\n * @property {number} [options.retry] - Retry times if request error occurs.\n * @property {number} [options.timeout] - Request time out in ms\n * @property {Object} [options.logger] - Logger object with 'info' and 'error' method.\n * @property {number} [options.networkId] - Connected RPC's networkId\n * @property {boolean} [options.useWechatProvider] - Use wechat provider\n * @property {boolean} [options.useHexAddressInParameter] - Use hex address in parameter\n * @property {boolean} [options.useVerboseAddress] - Use verbose address\n */\n\n/**\n * The Client class that provides an interface to the Conflux network.\n */\nclass Conflux {\n  /**\n   * Create a Conflux instance with networdId set up\n   * @param {ConfluxOption} options\n   * @return {Conflux}\n   */\n  static async create(options) {\n    const cfx = new Conflux(options);\n    if (options.networkId) return cfx;\n    await cfx.updateNetworkId();\n    return cfx;\n  }\n\n  /**\n   * @param {ConfluxOption} [options] - Conflux and Provider constructor options.\n   * @return {Conflux}\n   * @example\n   * > const { Conflux } = require('js-conflux-sdk');\n   * > const conflux = new Conflux({url:'https://test.confluxrpc.com', networkId: 1});\n   *\n   * @example\n   * > const conflux = new Conflux({\n     url: 'http://localhost:8000',\n     defaultGasPrice: 100,\n     logger: console,\n   });\n   */\n  constructor({\n    defaultGasPrice,\n    networkId,\n    useHexAddressInParameter = false,\n    useVerboseAddress = false,\n    ...rest\n  } = {}) {\n    /** @type {string} */\n    this.version = pkg.version;\n\n    /**\n     * Provider for rpc call\n     *\n     * @type {import('./provider/BaseProvider').BaseProvider|import('./provider/WechatProvider').WechatProvider|import('./provider/HttpProvider').HttpProvider|import('./provider/WebsocketProvider').WebsocketProvider}\n     */\n    this.provider = providerFactory(rest);\n\n    /**\n     * Wallet for `sendTransaction` to get `Account` by `from` field\n     *\n     * @type {import(\"./wallet/Wallet\").Wallet}\n     */\n    this.wallet = new Wallet();\n\n    /**\n     * Default gas price for following methods:\n     * - `Conflux.sendTransaction`\n     *\n     * @deprecated\n     * @type {number|string}\n     */\n    this.defaultGasPrice = defaultGasPrice;\n\n    this.sendRawTransaction = this._decoratePendingTransaction(this.sendRawTransaction);\n    this.sendTransaction = this._decoratePendingTransaction(this.sendTransaction);\n\n    if (networkId) {\n      this.networkId = networkId;\n      this.wallet.setNetworkId(networkId);\n    }\n\n    this.useHexAddressInParameter = useHexAddressInParameter;\n    this.useVerboseAddress = useVerboseAddress;\n\n    /**\n     * pos RPC methods\n     * @type {import('./rpc/pos').PoS}\n     */\n    this.pos = new PoS(this);\n    /**\n     * trace RPC methods\n     * @type {import('./rpc/trace').Trace}\n     */\n    this.trace = new Trace(this);\n    /**\n     * txpool RPC methods\n     * @type {import('./rpc/txpool').TxPool}\n     */\n    this.txpool = new TxPool(this);\n    /**\n     * cfx RPC methods\n     * @type {import('./rpc/cfx').CFX}\n     */\n    this.cfx = new CFX(this);\n    /**\n     * Advanced RPC compose methods\n     * @type {import('./rpc/Advanced').AdvancedRPCUtilities}\n     */\n    this.advanced = new AdvancedRPCUtilities(this);\n  }\n\n  /**\n   * Different kind provider API wrapper\n   */\n  request(req) {\n    if (this.provider.request) {\n      return this.provider.request(req);\n    }\n    if (this.provider.call) {\n      return this.provider.call(req.method, ...req.params);\n    }\n    if (this.provider.send) {\n      return this.provider.send(req.method, req.params);\n    }\n    throw new Error('Provider does not support request');\n  }\n\n  /**\n   * @private\n   */\n  _decoratePendingTransaction(func) {\n    const conflux = this;\n    return function (...args) {\n      return new PendingTransaction(conflux, func.bind(this), args);\n    };\n  }\n\n  /**\n   * @private\n   */\n  _formatAddress(address) {\n    if (!this.networkId) {\n      console.warn('Conflux address: networkId is not set properly, please set it');\n    }\n    return this.useHexAddressInParameter ? format.hexAddress(address) : format.address(address, this.networkId, this.useVerboseAddress);\n  }\n\n  /**\n   * @private\n   */\n  _formatCallTx(options) {\n    return cfxFormat.callTxAdvance(this.networkId, this.useHexAddressInParameter, this.useVerboseAddress)(options);\n  }\n\n  /**\n   * @private\n   */\n  _formatGetLogs(options) {\n    return cfxFormat.getLogsAdvance(this.networkId, this.useHexAddressInParameter, this.useVerboseAddress)(options);\n  }\n\n  /**\n   * A shout cut for `new Contract(options, conflux);`\n   *\n   * @param {object} options - See [Contract.constructor](Contract.md#Contract.js/constructor)\n   * @return {import('./contract/index').Contract}\n   */\n  Contract(options) {\n    return new Contract(options, this);\n  }\n\n  /**\n   * Create internal contract by default abi and address\n   *\n   * - [AdminControl](https://github.com/Conflux-Chain/conflux-rust/blob/master/internal_contract/contracts/AdminControl.sol)\n   * - [SponsorWhitelistControl](https://github.com/Conflux-Chain/conflux-rust/blob/master/internal_contract/contracts/SponsorWhitelistControl.sol)\n   * - [Staking](https://github.com/Conflux-Chain/conflux-rust/blob/master/internal_contract/contracts/Staking.sol)\n   *\n   * @param {\"AdminControl\"|\"SponsorWhitelistControl\"|\"Staking\"|\"PoSRegister\"|\"CrossSpaceCall\"} name - Internal contract name\n   * @return {import('./contract/index').Contract}\n   *\n   * @example\n   * > conflux.InternalContract('AdminControl')\n   {\n    constructor: [Function: bound call],\n    abi: ContractABI { * },\n    address: '0x0888000000000000000000000000000000000000',\n    destroy: [Function: bound call],\n    getAdmin: [Function: bound call],\n    setAdmin: [Function: bound call],\n    'destroy(address)': [Function: bound call],\n    '0x00f55d9d': [Function: bound call],\n    'getAdmin(address)': [Function: bound call],\n    '0x64efb22b': [Function: bound call],\n    'setAdmin(address,address)': [Function: bound call],\n    '0xc55b6bb7': [Function: bound call]\n  }\n   */\n  InternalContract(name) {\n    const options = INTERNAL_CONTRACTS[name];\n    assert(options, `can not find internal contract named \"${name}\"`);\n    return this.Contract(options);\n  }\n\n  /**\n   * Create an token CRC20 contract with standard CRC20 abi\n   *\n   * @param {string} address\n   * @returns  {import('./contract/index').Contract} A token contract instance\n   */\n  CRC20(address) {\n    return this.Contract({ address, abi: CRC20_ABI });\n  }\n\n  /**\n   * Return a BatchRequester instance which can used to build batch request and decode response data\n   * @returns {import('./rpc/BatchRequester').BatchRequester} - A BatchRequester instance\n   */\n  BatchRequest() {\n    return new BatchRequester(this);\n  }\n\n  /**\n   * close connection.\n   *\n   * @example\n   * > conflux.close();\n   */\n  close() {\n    this.provider.close();\n  }\n\n  // --------------------------------------------------------------------------\n  /**\n   * Update conflux networkId from RPC\n   */\n  async updateNetworkId() {\n    const { networkId } = await this.getStatus();\n    this.networkId = networkId;\n    this.wallet.setNetworkId(this.networkId);\n  }\n\n  /**\n   * Get node client version\n   * @return {Promise<string>}\n   */\n  async getClientVersion() {\n    return this.cfx.clientVersion();\n  }\n\n  /**\n   * Get supply info\n   *\n   * @param {string|number} [epochNumber='latest_state'] - See [format.epochNumber](utils.md#util/format.js/format/(static)epochNumber)\n   * @return {Promise<import('./rpc/types/formatter').SupplyInfo>} Return supply info\n   * - totalIssued `BigInt`: Total issued balance in `Drip`\n   * - totalStaking `BigInt`: Total staking balance in `Drip`\n   * - totalCollateral `BigInt`: Total collateral balance in `Drip`\n   *\n   * @example\n   * > await conflux.getSupplyInfo()\n   {\n     totalCirculating: 28953062500000000000000n,\n     totalCollateral: 28953062500000000000000n,\n     totalIssued: 5033319899279074765657343554n,\n     totalStaking: 25026010834970490328077641n\n   }\n   */\n  async getSupplyInfo(epochNumber) {\n    return this.cfx.getSupplyInfo(epochNumber);\n  }\n\n  /**\n   * Get status\n   * @return {Promise<import('./rpc/types/formatter').ChainStatus>} Status information object\n   * - chainId `number`: Chain id\n   * - epochNumber `number`: Epoch number\n   * - blockNumber `number`: Block number\n   * - pendingTxNumber `number`: Pending transaction number\n   * - bestHash `string`: The block hash of best pivot block\n   *\n   * @example\n   * > await conflux.getStatus()\n   {\n      chainId: 1029,\n      networkId: 1029,\n      epochNumber: 1117476,\n      blockNumber: 2230973,\n      pendingTxNumber: 4531,\n      bestHash: '0x8d581f13fa0548f2751450a7dabd871777875c9ccdf0d8bd629e07a7a5a7917a'\n   }\n   */\n  async getStatus() {\n    return this.cfx.getStatus();\n  }\n\n  /**\n   * Returns the current price per gas in Drip.\n   *\n   * @return {Promise<BigInt>} Gas price in drip.\n   *\n   * @example\n   * > await conflux.getGasPrice();\n   1n\n   */\n  async getGasPrice() {\n    return this.cfx.gasPrice();\n  }\n\n  /**\n   * Returns the interest rate of given parameter.\n   *\n   * @param {string|number} [epochNumber='latest_state'] - See [format.epochNumber](utils.md#util/format.js/format/(static)epochNumber)\n   * @return {Promise<BigInt>} The interest rate of given parameter.\n   *\n   * @example\n   * > await conflux.getInterestRate();\n   2522880000000n\n   */\n  async getInterestRate(epochNumber) {\n    return this.cfx.getInterestRate(epochNumber);\n  }\n\n  /**\n   * Returns the accumulate interest rate of given parameter.\n   *\n   * @param {string|number} [epochNumber='latest_state'] - See [format.epochNumber](utils.md#util/format.js/format/(static)epochNumber)\n   * @return {Promise<BigInt>} The accumulate interest rate of given parameter.\n   *\n   * @example\n   * > await conflux.getAccumulateInterestRate()\n   76357297457647044505744908994993n\n   */\n  async getAccumulateInterestRate(epochNumber) {\n    return this.cfx.getAccumulateInterestRate(epochNumber);\n  }\n\n  // ------------------------------- address ----------------------------------\n  /**\n   * Return account related states of the given account\n   *\n   * @param {string} address - address to get account.\n   * @param {string|number} [epochNumber='latest_state'] - See [format.epochNumber](utils.md#util/format.js/format/(static)epochNumber)\n   * @return {Promise<import('./rpc/types/Account').Account>} Return the states of the given account:\n   * - balance `BigInt`: the balance of the account.\n   * - nonce `BigInt`: the nonce of the account's next transaction.\n   * - codeHash `string`: the code hash of the account.\n   * - stakingBalance `BigInt`: the staking balance of the account.\n   * - collateralForStorage `BigInt`: the collateral storage of the account.\n   * - accumulatedInterestReturn `BigInt`: accumulated unterest return of the account.\n   * - admin `string`: admin of the account.\n   *\n   * @example\n   > await conflux.getAccount('cfxtest:aasb661u2r60uzn5h0c4h63hj76wtgf552r9ghu7a4');\n   {\n      accumulatedInterestReturn: 0n,\n      balance: 824812401057514588670n,\n      collateralForStorage: 174187500000000000000n,\n      nonce: 1449n,\n      stakingBalance: 0n,\n      admin: 'CFXTEST:TYPE.NULL:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6F0VRCSW',\n      codeHash: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n   }\n   */\n  async getAccount(address, epochNumber) {\n    return this.cfx.getAccount(address, epochNumber);\n  }\n\n  /**\n   * Returns the balance of the account of given address.\n   *\n   * @param {string} address - The address to get the balance of.\n   * @param {string|number} [epochNumber='latest_state'] - See [format.epochNumber](utils.md#util/format.js/format/(static)epochNumber)\n   * @return {Promise<BigInt>} The balance in Drip.\n   *\n   * @example\n   * > await conflux.getBalance(\"cfxtest:aasb661u2r60uzn5h0c4h63hj76wtgf552r9ghu7a4\");\n   824812401057514588670n\n   */\n  async getBalance(address, epochNumber) {\n    return this.cfx.getBalance(address, epochNumber);\n  }\n\n  /**\n   * Returns the balance of the staking account of given address.\n   *\n   * @param {string} address - Address to check for staking balance.\n   * @param {string|number} [epochNumber='latest_state'] - See [format.epochNumber](utils.md#util/format.js/format/(static)epochNumber)\n   * @return {Promise<BigInt>} The staking balance in Drip.\n   *\n   * @example\n   * > await conflux.getStakingBalance('cfxtest:aasb661u2r60uzn5h0c4h63hj76wtgf552r9ghu7a4', 'latest_state');\n   0n\n   */\n  async getStakingBalance(address, epochNumber) {\n    return this.cfx.getStakingBalance(address, epochNumber);\n  }\n\n  /**\n   * Returns the next nonce should be used by given address.\n   *\n   * @param {string} address - The address to get the numbers of transactions from.\n   * @param {string|number} [epochNumber] - See [format.epochNumber](utils.md#util/format.js/format/(static)epochNumber)\n   * @return {Promise<BigInt>} The next nonce should be used by given address.\n   *\n   * @example\n   * > await conflux.getNextNonce(\"cfxtest:aasb661u2r60uzn5h0c4h63hj76wtgf552r9ghu7a4\");\n   1449n\n   */\n  async getNextNonce(address, epochNumber) {\n    return this.cfx.getNextNonce(address, epochNumber);\n  }\n\n  /**\n   * Returns the admin of given contract.\n   *\n   * @param {string} address - Address to contract.\n   * @param {string|number} [epochNumber='latest_state'] - See [format.epochNumber](utils.md#util/format.js/format/(static)epochNumber)\n   * @return {Promise<string>} Address to admin, or `null` if the contract does not exist.\n   *\n   * @example\n   * > conflux.getAdmin('cfxtest:achc8nxj7r451c223m18w2dwjnmhkd6rxa2gc31euw')\n   \"CFXTEST:TYPE.USER:AASB661U2R60UZN5H0C4H63HJ76WTGF552R9GHU7A4\"\n   */\n  async getAdmin(address, epochNumber) {\n    return this.cfx.getAdmin(address, epochNumber);\n  }\n\n  /**\n   * Returns vote list of the given account.\n   *\n   * @param {string} address - Address to contract.\n   * @param {string|number} [epochNumber='latest_state'] - See [format.epochNumber](utils.md#util/format.js/format/(static)epochNumber)\n   * @return {Promise<import('./rpc/types/formatter').Vote[]>} Vote list\n   * - `array`:\n   *   - amount `BigInt`: This is the number of tokens should be locked before\n   *   - unlockBlockNumber `number`: This is the timestamp when the vote right will be invalid, measured in, the number of past blocks.\n   */\n  async getVoteList(address, epochNumber) {\n    return this.cfx.getVoteList(address, epochNumber);\n  }\n\n  /**\n   * Returns deposit list of the given account.\n   * @param {string} address - Address to contract.\n   * @param {string|number} [epochNumber='latest_state'] - See [format.epochNumber](utils.md#util/format.js/format/(static)epochNumber)\n   * @return {Promise<import('./rpc/types/formatter').Deposit[]>} Deposit list\n   * - `array`:\n   *   - amount `BigInt`: the number of tokens deposited\n   *   - accumulatedInterestRate: `BigInt`: the accumulated interest rate at the time of the deposit\n   *   - depositTime `number`: the time of the deposit\n   */\n  async getDepositList(address, epochNumber) {\n    return this.cfx.getDepositList(address, epochNumber);\n  }\n\n  // -------------------------------- epoch -----------------------------------\n  /**\n   * Returns the epoch number of given parameter.\n   *\n   * @param {string|number} [epochNumber='latest_state'] - See [format.epochNumber](utils.md#util/format.js/format/(static)epochNumber)\n   * @return {Promise<number>} integer of the current epoch number of given parameter.\n   *\n   * @example\n   * > await conflux.getEpochNumber();\n   443\n   */\n  async getEpochNumber(epochNumber) {\n    return this.cfx.epochNumber(epochNumber);\n  }\n\n  /**\n   * Returns information about a block by epoch number.\n   *\n   * @param {string|number} epochNumber - See [format.epochNumber](utils.md#util/format.js/format/(static)epochNumber)\n   * @param {boolean} [detail=false] - If `true` it returns the full transaction objects, if `false` only the hashes of the transactions.\n   * @return {Promise<import('./rpc/types/formatter').Block|null>} See `getBlockByHash`\n   *\n   * @example\n   * > await conflux.getBlockByEpochNumber('latest_mined', true);\n   {...}\n   */\n  async getBlockByEpochNumber(epochNumber, detail = false) {\n    return this.cfx.getBlockByEpochNumber(epochNumber, detail);\n  }\n\n  /**\n   * Returns information about a block by block number.\n   *\n   * @param {string|number} blockNumber\n   * @param {boolean} [detail=false] - If `true` it returns the full transaction objects, if `false` only the hashes of the transactions.\n   * @return {Promise<import('./rpc/types/formatter').Block|null>} See `getBlockByHash`\n   *\n   * @example\n   * > await conflux.getBlockByBlockNumber('0x123', true);\n   {...}\n   */\n  async getBlockByBlockNumber(blockNumber, detail = false) {\n    return this.cfx.getBlockByBlockNumber(blockNumber, detail);\n  }\n\n  /**\n   * Returns hashes of blocks located in some epoch.\n   *\n   * @param {string|number} epochNumber - See [format.epochNumber](utils.md#util/format.js/format/(static)epochNumber)\n   * @return {Promise<string[]>} Array of block hashes, sorted by execution(topological) order.\n   *\n   * @example\n   * > await conflux.getBlocksByEpochNumber(0);\n   ['0xe677ae5206a5d67d9efa183d867b4b986ed82a3e62174a1488cf8364d58534ec']\n   */\n  async getBlocksByEpochNumber(epochNumber) {\n    return this.cfx.getBlocksByEpoch(epochNumber);\n  }\n\n  /**\n   * Get epoch blocks reward info\n   *\n   * @param {string|number} epochNumber - See [format.epochNumber](utils.md#util/format.js/format/(static)epochNumber)\n   * @return {Promise<import('./rpc/types/formatter').RewardInfo[]>} List of block reward info\n   * - blockHash `string`: Hash of the block.\n   * - author `string`: The address of the beneficiary to whom the mining rewards were given.\n   * - baseReward `BigInt`: Block base reward in `Drip`\n   * - totalReward `BigInt`: Block total reward in `Drip`\n   * - txFee `BigInt`: Total gas fee of block transaction\n   *\n   * @example\n   * > await conflux.getBlockRewardInfo(6);\n   [\n   {\n      baseReward: 6993700000000000000n,\n      totalReward: 6993700031741486703n,\n      txFee: 0n,\n      author: 'CFXTEST:TYPE.USER:AATXETSP0KDARPDB5STDYEX11DR3X6SB0J2XZETSG6',\n      blockHash: '0x73cd891aea310e2c0b8644de91746c7353cebfffb780126bc06101b20689c893'\n    },\n   {\n      baseReward: 6997200000000000000n,\n      totalReward: 6997200031760371742n,\n      txFee: 3000000n,\n      author: 'CFXTEST:TYPE.USER:AATXETSP0KDARPDB5STDYEX11DR3X6SB0J2XZETSG6',\n      blockHash: '0xaf4136d04e9e2cc470703251ec46f5913ab7955d526feed43771705e89c77390'\n    }\n   ]\n   */\n  async getBlockRewardInfo(epochNumber) {\n    return this.cfx.getBlockRewardInfo(epochNumber);\n  }\n\n  // -------------------------------- block -----------------------------------\n  /**\n   * Returns the hash of best block.\n   *\n   * @return {Promise<string>} hash of the best block.\n   *\n   * @example\n   * > await conflux.getBestBlockHash();\n   \"0xb8bb355bfeaf055a032d5b7df719917c090ee4fb6fee42383004dfe8911d7daf\"\n   */\n  async getBestBlockHash() {\n    return this.cfx.getBestBlockHash();\n  }\n\n  /**\n   * Returns information about a block by hash.\n   *\n   * @param {string} blockHash - hash of a block.\n   * @param {boolean} [detail=false] - If `true` it returns the full transaction objects, if `false` only the hashes of the transactions.\n   * @return {Promise<import('./rpc/types/formatter').Block|null>} A block object, or null when no block was found:\n   * - adaptive `boolean`: If `true` the weight of the block is adaptive under GHAST rule, if `false` otherwise.\n   * - blame `number`: If 0, then no blocks are blamed on its parent path, If greater than 0, then the nearest blamed block on the parent path is blame steps away.\n   * - deferredLogsBloomHash `string`: The bloom hash of deferred logs.\n   * - deferredReceiptsRoot `string`: The hash of the receipts of the block after deferred execution.\n   * - deferredStateRoot `string`: The root of the final state trie of the block after deferred execution.\n   * - difficulty `string`: Integer string of the difficulty for this block.\n   * - epochNumber `number|null`: The current block epoch number in the client's view. null when it's not in best block's past set and the epoch number is not determined.\n   * - gasLimit `BigInt`: The maximum gas allowed in this block.\n   * - hash `string|null`: Hash of the block. `null` when its pending block.\n   * - height `number`: The block heights. `null` when its pending block.\n   * - miner `string`: The address of the beneficiary to whom the mining rewards were given.\n   * - nonce `string`: Hash of the generated proof-of-work. `null` when its pending block.\n   * - parentHash `string`: Hash of the parent block.\n   * - powQuality `string`:Hash of the generated proof-of-work. `null` when its pending block.\n   * - refereeHashes `string[]`: Array of referee hashes.\n   * - size `number`: Integer the size of this block in bytes.\n   * - timestamp `number`: The unix timestamp for when the block was collated.\n   * - transactions `string[]|object[]`: Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter.\n   * - transactionsRoot `string`: The hash of the transactions of the block.\n   *\n   * @example\n   * > await conflux.getBlockByHash('0xaf4136d04e9e2cc470703251ec46f5913ab7955d526feed43771705e89c77390');\n   {\n      epochNumber: 6,\n      blame: 0,\n      height: 6,\n      size: 352,\n      timestamp: 1603901780,\n      gasLimit: 30000000n,\n      gasUsed: 61118n,\n      difficulty: 20000000000n,\n      transactions: [\n        '0xaad69c8c814aec3e418b68f60917c607920a531e7082dd2c642323b43ecadb94',\n        '0xbf7110474779ba2404433ef39a24cb5b277186ef1e6cb199b0b60907b029a1ce'\n      ],\n      adaptive: false,\n      deferredLogsBloomHash: '0xd397b3b043d87fcd6fad1291ff0bfd16401c274896d8c63a923727f077b8e0b5',\n      deferredReceiptsRoot: '0x09f8709ea9f344a810811a373b30861568f5686e649d6177fd92ea2db7477508',\n      deferredStateRoot: '0x50c0fcbc5bafa7d1dba7b19c87629830106a6be8d0adf505cdc656bb43535d69',\n      hash: '0xaf4136d04e9e2cc470703251ec46f5913ab7955d526feed43771705e89c77390',\n      miner: 'CFXTEST:TYPE.USER:AATXETSP0KDARPDB5STDYEX11DR3X6SB0J2XZETSG6',\n      nonce: '0x17d86f2f6',\n      parentHash: '0xc8a412b4b77b48d61f694975f032d109f26bb0f9fc02e4b221d67a382fab386b',\n      powQuality: '0x5a0f86a6f4',\n      refereeHashes: [\n        '0x73cd891aea310e2c0b8644de91746c7353cebfffb780126bc06101b20689c893'\n      ],\n      transactionsRoot: '0xd2f08676484ba2a3738194f44542eb29fb290b8ed74bf007f132fe51d89b2e7c'\n    }\n   */\n  async getBlockByHash(blockHash, detail = false) {\n    return this.cfx.getBlockByHash(blockHash, detail);\n  }\n\n  /**\n   * Get block by `blockHash` if pivot block of `epochNumber` is `pivotBlockHash`.\n   *\n   * @param {string} blockHash - Block hash which epochNumber expect to be `epochNumber`.\n   * @param {string} pivotBlockHash - Block hash which expect to be the pivot block of `epochNumber`.\n   * @param {number} epochNumber - Epoch number\n   * @return {Promise<import('./rpc/types/formatter').Block|null>} See `getBlockByHash`\n   */\n  async getBlockByHashWithPivotAssumption(blockHash, pivotBlockHash, epochNumber) {\n    return this.cfx.getBlockByHashWithPivotAssumption(blockHash, pivotBlockHash, epochNumber);\n  }\n\n  /**\n   * Get the risk of the block could be reverted.\n   * All block in one same epoch returned same risk number\n   *\n   * @param {string} blockHash - Hash of a block\n   * @return {Promise<number|null>} Number >0 and <1\n   *\n   * @example\n   * > await conflux.getConfirmationRiskByHash('0xaf4136d04e9e2cc470703251ec46f5913ab7955d526feed43771705e89c77390')\n   1e-8\n   */\n  async getConfirmationRiskByHash(blockHash) {\n    return this.cfx.getConfirmationRiskByHash(blockHash);\n  }\n\n  // ----------------------------- transaction --------------------------------\n  /**\n   * Returns the information about a transaction requested by transaction hash.\n   *\n   * @param {string} transactionHash - hash of a transaction\n   * @return {Promise<import('./rpc/types/formatter').Transaction|null>} transaction object, or `null` when no transaction was found:\n   * - blockHash `string`: hash of the block where this transaction was in and got executed. `null` when its pending.\n   * - contractCreated `string|null`: address of created contract. `null` when it's not a contract creating transaction\n   * - data `string`: the data send along with the transaction.\n   * - epochHeight `number`: epoch height\n   * - from `string`: address of the sender.\n   * - gas `BigInt`: gas provided by the sender.\n   * - gasPrice `number`: gas price provided by the sender in Drip.\n   * - hash `string`: hash of the transaction.\n   * - nonce `BigInt`: the number of transactions made by the sender prior to this one.\n   * - r `string`: ECDSA signature r\n   * - s `string`: ECDSA signature s\n   * - status `number`: 0 for success, 1 for error occured, `null` when the transaction is skipped or not packed.\n   * - storageLimit `BigInt`: storage limit in bytes\n   * - chainId `number`: chain id\n   * - to `string`: address of the receiver. null when its a contract creation transaction.\n   * - transactionIndex `number`: integer of the transactions's index position in the block. `null` when its pending.\n   * - v `string`: ECDSA recovery id\n   * - value `BigInt`: value transferred in Drip.\n   *\n   * @example\n   * > await conflux.getTransactionByHash('0xbf7110474779ba2404433ef39a24cb5b277186ef1e6cb199b0b60907b029a1ce');\n   {\n      nonce: 0n,\n      gasPrice: 10n,\n      gas: 200000n,\n      value: 0n,\n      storageLimit: 1024n,\n      epochHeight: 0,\n      chainId: 1029,\n      v: 1,\n      status: 0,\n      transactionIndex: 1,\n      blockHash: '0xaf4136d04e9e2cc470703251ec46f5913ab7955d526feed43771705e89c77390',\n      contractCreated: null,\n      data: '0xfebe49090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000162788589c8e386863f217faef78840919fb2854',\n      from: 'CFXTEST:TYPE.USER:AATXETSP0KDARPDB5STDYEX11DR3X6SB0J2XZETSG6',\n      hash: '0xbf7110474779ba2404433ef39a24cb5b277186ef1e6cb199b0b60907b029a1ce',\n      r: '0x495da01ae9f445847022a8bc7df0198577ba75f88b26699f61afb435bb9c50bc',\n      s: '0x2291051b1c53db1d6bfe2fb29be1bf512d063e726dc6b98aaf0f2259b7456be0',\n      to: 'CFXTEST:TYPE.USER:AATXETSP0KDARPDB5STDYEX11DR3X6SB0J2XZETSG6'\n    }\n   */\n  async getTransactionByHash(transactionHash) {\n    return this.cfx.getTransactionByHash(transactionHash);\n  }\n\n  /**\n   * Returns the information about a transaction receipt requested by transaction hash.\n   *\n   * @param {string} transactionHash - Hash of a transaction\n   * @return {Promise<import('./rpc/types/formatter').TransactionReceipt|null>} A transaction receipt object, or null when no transaction was found or the transaction was not executed yet:\n   * - transactionHash `string`: Hash of the given transaction.\n   * - index `number`: Transaction index within the block.\n   * - blockHash `string`: Hash of the block where this transaction was in and got executed.\n   * - epochNumber `number`: Epoch number of the block where this transaction was in and got executed.\n   * - from `string`: Address of the sender.\n   * - to `string`: Address of the receiver. `null` when its a contract creation transaction.\n   * - gasUsed `number`: Gas used the transaction.\n   * - contractCreated `string|null`: Address of created contract. `null` when it's not a contract creating transaction.\n   * - stateRoot `string`: Hash of the state root.\n   * - outcomeStatus `number`:  the outcome status code, 0 was successful, 1 for an error occurred in the execution.\n   * - logsBloom `string`: Bloom filter for light clients to quickly retrieve related logs.\n   * - logs `object[]`: Array of log objects, which this transaction generated.\n   * - gasCoveredBySponsor `boolean`: `true` if this transaction's gas fee was covered by the sponsor.\n   * - storageCoveredBySponsor `boolean`: `true` if this transaction's storage collateral was covered by the sponsor.\n   * - storageCollateralized `BigInt`: the amount of storage collateral this transaction required.\n   * - storageReleased `array`: array of storage change objects, each specifying an address and the corresponding amount of storage collateral released\n   *   - address `string`: address released\n   *   - collaterals `BigInt`: corresponding amount of storage collateral released\n   *\n   * @example\n   * > await conflux.getTransactionReceipt('0xbf7110474779ba2404433ef39a24cb5b277186ef1e6cb199b0b60907b029a1ce');\n   {\n      index: 1,\n      epochNumber: 6,\n      outcomeStatus: 0,\n      gasUsed: 30559n,\n      gasFee: 1500000n,\n      blockHash: '0xaf4136d04e9e2cc470703251ec46f5913ab7955d526feed43771705e89c77390',\n      contractCreated: null,\n      from: 'CFXTEST:TYPE.USER:AAJJ1C2XGRKDY8RPG2828UPAN4A5BBSZNYB28K0PHS',\n      logs: [],\n      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n      stateRoot: '0xd6a7c2c14cb0d1233010acca98e114db5a10e0b94803d23b01a6777b7fd3b2fd',\n      to: 'CFXTEST:TYPE.CONTRACT:ACB59FK6VRYH8DJ5VYVEHJ9APZHPD72RDP2FVP77R9',\n      transactionHash: '0xbf7110474779ba2404433ef39a24cb5b277186ef1e6cb199b0b60907b029a1ce',\n      txExecErrorMsg: null,\n      gasCoveredBySponsor: false,\n      storageCoveredBySponsor: false,\n      storageCollateralized: 0n,\n      storageReleased: [\n        address: '0x0000000000000000000000000000000000000001',\n        collaterals: 640n,\n      ],\n    }\n   */\n  async getTransactionReceipt(transactionHash) {\n    return this.cfx.getTransactionReceipt(transactionHash);\n  }\n\n  /**\n   * Creates new message call transaction or a contract creation for signed transactions.\n   *\n   * @param {string|Buffer} hex - The signed transaction data.\n   * @return {Promise<import('./subscribe/PendingTransaction').PendingTransaction>} The transaction hash, or the zero hash if the transaction is not yet available.\n   *\n   * @example\n   * > await conflux.sendRawTransaction('0xf85f800382520894bbd9e9b...');\n   \"0xbe007c3eca92d01f3917f33ae983f40681182cf618defe75f490a65aac016914\"\n   */\n  async sendRawTransaction(hex) {\n    return this.request({\n      method: 'cfx_sendRawTransaction',\n      params: [format.hex(hex)],\n    });\n  }\n\n  /**\n  * @typedef { import('../Transaction').TransactionMeta } TransactionMeta\n  */\n\n  /**\n   * Sign and send transaction\n   * if `from` field in `conflux.wallet`, sign by local account and send raw transaction,\n   * else call `cfx_sendTransaction` and sign by remote wallet\n   *\n   * @param {TransactionMeta} options - See [Transaction](Transaction.md#Transaction.js/Transaction/**constructor**)\n   * @param {string} [password] - Password for remote node.\n   * @return {Promise<import('./subscribe/PendingTransaction').PendingTransaction>} The PendingTransaction object.\n   *\n   * @example\n   * > txHash = await conflux.sendTransaction({from:account, to:address, value:0}); // send and get transaction hash\n   \"0xb2ba6cca35f0af99a9601d09ee19c1949d8130312550e3f5413c520c6d828f88\"\n\n   * @example\n   * > packedTx = await conflux.sendTransaction({from:account, to:address, value:0}).get(); // await till transaction packed\n   {\n    \"nonce\": 8n,\n    \"value\": 0n,\n    \"gasPrice\": 1000000000n,\n    \"gas\": 21000n,\n    \"v\": 0,\n    \"transactionIndex\": null,\n    \"status\": null,\n    \"storageLimit\": 0n,\n    \"chainId\": 1,\n    \"epochHeight\": 791394,\n    \"blockHash\": null,\n    \"contractCreated\": null,\n    \"data\": \"0x\",\n    \"from\": \"CFXTEST:TYPE.USER:AAR7X4R8MKRNW39GGS8RZ40J1ZNWH5MRRPUFPR2U76\",\n    \"hash\": \"0xb2ba6cca35f0af99a9601d09ee19c1949d8130312550e3f5413c520c6d828f88\",\n    \"r\": \"0x245a1a86ae405eb72c1eaf98f5e22baa326fcf8262abad2c4a3e5bdcf2e912b5\",\n    \"s\": \"0x4df8058887a4dd8aaf60208accb3e57292a50ff06a117df6e54f7f56176248c0\",\n    \"to\": \"CFXTEST:TYPE.USER:AAR7X4R8MKRNW39GGS8RZ40J1ZNWH5MRRPUFPR2U76\"\n   }\n\n   * @example\n   * > minedTx = await conflux.sendTransaction({from:account, to:address, value:0}).mined(); // await till transaction mined\n   {\n    \"nonce\": 8n,\n    \"value\": 0n,\n    \"gasPrice\": 1000000000n,\n    \"gas\": 21000n,\n    \"v\": 0,\n    \"transactionIndex\": 0,\n    \"status\": 0,\n    \"storageLimit\": 0n,\n    \"chainId\": 1,\n    \"epochHeight\": 791394,\n    \"blockHash\": \"0xdb2d2d438dcdee8d61c6f495bd363b1afb68cb0fdff16582c08450a9ca487852\",\n    \"contractCreated\": null,\n    \"data\": \"0x\",\n    \"from\": \"CFXTEST:TYPE.USER:AAR7X4R8MKRNW39GGS8RZ40J1ZNWH5MRRPUFPR2U76\",\n    \"hash\": \"0xb2ba6cca35f0af99a9601d09ee19c1949d8130312550e3f5413c520c6d828f88\",\n    \"r\": \"0x245a1a86ae405eb72c1eaf98f5e22baa326fcf8262abad2c4a3e5bdcf2e912b5\",\n    \"s\": \"0x4df8058887a4dd8aaf60208accb3e57292a50ff06a117df6e54f7f56176248c0\",\n    \"to\": \"CFXTEST:TYPE.USER:AAR7X4R8MKRNW39GGS8RZ40J1ZNWH5MRRPUFPR2U76\"\n   }\n\n   * @example\n   * > executedReceipt = await conflux.sendTransaction({from:account, to:address, value:0}).executed(); // await till transaction executed\n   {\n    \"index\": 0,\n    \"epochNumber\": 791402,\n    \"outcomeStatus\": 0,\n    \"gasUsed\": 21000n,\n    \"gasFee\": 21000000000000n,\n    \"blockHash\": \"0xdb2d2d438dcdee8d61c6f495bd363b1afb68cb0fdff16582c08450a9ca487852\",\n    \"contractCreated\": null,\n    \"from\": \"CFXTEST:TYPE.USER:AAR7X4R8MKRNW39GGS8RZ40J1ZNWH5MRRPUFPR2U76\",\n    \"logs\": [],\n    \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"stateRoot\": \"0x510d680cdbf60d34bcd987b3bf9925449c0839a7381dc8fd8222d2c7ee96122d\",\n    \"to\": \"CFXTEST:TYPE.USER:AAR7X4R8MKRNW39GGS8RZ40J1ZNWH5MRRPUFPR2U76\",\n    \"transactionHash\": \"0xb2ba6cca35f0af99a9601d09ee19c1949d8130312550e3f5413c520c6d828f88\"\n   }\n\n   * @example\n   * > confirmedReceipt = await conflux.sendTransaction({from:account, to:address, value:0}).confirmed(); // await till risk coefficient < threshold (default 1e-8)\n   {\n    \"index\": 0,\n    \"epochNumber\": 791402,\n    \"outcomeStatus\": 0,\n    \"gasUsed\": 21000n,\n    \"gasFee\": 21000000000000n,\n    \"blockHash\": \"0xdb2d2d438dcdee8d61c6f495bd363b1afb68cb0fdff16582c08450a9ca487852\",\n    \"contractCreated\": null,\n    \"from\": \"CFXTEST:TYPE.USER:AAR7X4R8MKRNW39GGS8RZ40J1ZNWH5MRRPUFPR2U76\",\n    \"logs\": [],\n    \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"stateRoot\": \"0x510d680cdbf60d34bcd987b3bf9925449c0839a7381dc8fd8222d2c7ee96122d\",\n    \"to\": \"CFXTEST:TYPE.USER:AAR7X4R8MKRNW39GGS8RZ40J1ZNWH5MRRPUFPR2U76\",\n    \"transactionHash\": \"0xb2ba6cca35f0af99a9601d09ee19c1949d8130312550e3f5413c520c6d828f88\"\n   }\n   */\n  async sendTransaction(options, password) {\n    if (this.wallet.has(`${options.from}`)) {\n      const rawTx = await this.cfx.populateAndSignTransaction(options);\n      return this.sendRawTransaction(rawTx);\n    }\n\n    const params = [this._formatCallTx(options)];\n    if (password) params.push(password);\n    return this.request({\n      method: 'cfx_sendTransaction',\n      params,\n    });\n  }\n\n  // ------------------------------ contract ----------------------------------\n  /**\n   * Returns the code of given contract.\n   *\n   * @param {string} address - Address to contract.\n   * @param {string|number} [epochNumber='latest_state'] - See [format.epochNumber](utils.md#util/format.js/format/(static)epochNumber)\n   * @return {Promise<string>} Byte code of contract, or 0x if the contract does not exist.\n   *\n   * @example\n   * > await conflux.getCode('cfxtest:acb2nsctbanb9ezbw0mx1gapve60thyurjmxkage0f');\n   \"0x6080604052348015600f57600080fd5b506004361060325760003560e01c806306661abd1460375780638...\"\n   */\n  async getCode(address, epochNumber) {\n    return this.cfx.getCode(address, epochNumber);\n  }\n\n  /**\n   * Returns storage entries from a given contract.\n   *\n   * @param {string} address - Address to contract.\n   * @param {string} position - The given position.\n   * @param {string|number} [epochNumber='latest_state'] - See [format.epochNumber](utils.md#util/format.js/format/(static)epochNumber)\n   * @return {Promise<string|null>} Storage entry of given query, or null if the it does not exist.\n   *\n   * @example\n   * > await conflux.getStorageAt('cfxtest:acdgzwyh9634bnuf4jne0tp3xmae80bwej1w4hr66c', '0x6661e9d6d8b923d5bbaab1b96e1dd51ff6ea2a93520fdc9eb75d059238b8c5e9')\n   \"0x000000000000000000000000000000000000000000000000000000000000162e\"\n   */\n  async getStorageAt(address, position, epochNumber) {\n    return this.cfx.getStorageAt(address, position, epochNumber);\n  }\n\n  /**\n   * Returns the storage root of a given contract.\n   *\n   * @param {string} address - Address to contract.\n   * @param {string|number} [epochNumber='latest_state'] - See [format.epochNumber](utils.md#util/format.js/format/(static)epochNumber)\n   * @return {Promise<object>} A storage root object, or `null` if the contract does not exist\n   * - delta `string`: storage root in the delta trie.\n   * - intermediate `string`: storage root in the intermediate trie.\n   * - snapshot `string`: storage root in the snapshot.\n   *\n   * @example\n   * > await conflux.getStorageRoot('cfxtest:acdgzwyh9634bnuf4jne0tp3xmae80bwej1w4hr66c')\n   {\n      \"delta\": \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\",\n      \"intermediate\": \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\",\n      \"snapshot\": \"0x7bb7d43152e56f529fbef709aab7371b0672f2332ae0fb4786da350f664df5b4\"\n   }\n   */\n  async getStorageRoot(address, epochNumber) {\n    return this.cfx.getStorageRoot(address, epochNumber);\n  }\n\n  /**\n   * Returns the sponsor info of given contract.\n   *\n   * @param {string} address - Address to contract.\n   * @param {string|number} [epochNumber='latest_state'] - See [format.epochNumber](utils.md#util/format.js/format/(static)epochNumber)\n   * @return {Promise<import('./rpc/types/formatter').SponsorInfo>} A sponsor info object, if the contract doesn't have a sponsor, then the all fields in returned object will be 0:\n   * - sponsorBalanceForCollateral `BigInt`: the sponsored balance for storage.\n   * - sponsorBalanceForGas `BigInt`: the sponsored balance for gas.\n   * - sponsorGasBound `BigInt`: the max gas could be sponsored for one transaction.\n   * - sponsorForCollateral `string`: the address of the storage sponsor.\n   * - sponsorForGas `string`: the address of the gas sponsor.\n   *\n   * @example\n   * > await conflux.getSponsorInfo('cfxtest:achc8nxj7r451c223m18w2dwjnmhkd6rxa2gc31euw')\n   {\n      sponsorBalanceForCollateral: 410625000000000000000n,\n      sponsorBalanceForGas: 9999999993626232440n,\n      sponsorGasBound: 10000000000n,\n      sponsorForCollateral: 'CFXTEST:TYPE.CONTRACT:ACGZZ08M8Z2YWKEDA0JZU52FGAZ9U95Y1YV785YANX',\n      sponsorForGas: 'CFXTEST:TYPE.CONTRACT:ACGZZ08M8Z2YWKEDA0JZU52FGAZ9U95Y1YV785YANX'\n   }\n   */\n  async getSponsorInfo(address, epochNumber) {\n    return this.cfx.getSponsorInfo(address, epochNumber);\n  }\n\n  /**\n   * Return pending info of an account\n   *\n   * @param {string} address - Address to account\n   * @returns {Promise<import('./rpc/types/formatter').AccountPendingInfo>} An account pending info object.\n   * - localNonce `BigInt`: then next nonce can use in the transaction pool\n   * - nextPendingTx `string`: the hash of next pending transaction\n   * - pendingCount `BigInt`: the count of pending transactions\n   * - pendingNonce `BigInt`: the nonce of pending transaction\n   *\n   */\n  async getAccountPendingInfo(address) {\n    return this.cfx.getAccountPendingInfo(address);\n  }\n\n  /**\n   * Return pending transactions of one account\n   *\n   * @param {string} address - base32 address\n   * @returns {Promise<import('./rpc/types/formatter').AccountPendingTransactions>} An account's pending transactions and info.\n   * - pendingTransactions `Array`: pending transactions\n   * - firstTxStatus `Object`: the status of first pending tx\n   * - pendingCount `BigInt`: the count of pending transactions\n   */\n  async getAccountPendingTransactions(address, startNonce, limit) {\n    return this.cfx.getAccountPendingTransactions(address, startNonce, limit);\n  }\n\n  /**\n   * Returns the size of the collateral storage of given address, in Byte.\n   *\n   * @param {string} address - Address to check for collateral storage.\n   * @param [epochNumber='latest_state'] - See [format.epochNumber](utils.md#util/format.js/format/(static)epochNumber)\n   * @return {Promise<BigInt>} - The collateral storage in Byte.\n   *\n   * @example\n   * > await conflux.getCollateralForStorage('cfxtest:achc8nxj7r451c223m18w2dwjnmhkd6rxa2gc31euw')\n   89375000000000000000n\n   */\n  async getCollateralForStorage(address, epochNumber) {\n    return this.cfx.getCollateralForStorage(address, epochNumber);\n  }\n\n  /**\n   * Virtually call a contract, return the output data.\n   *\n   * @param {TransactionMeta} options - See [Transaction](Transaction.md#Transaction.js/Transaction/**constructor**)\n   * @param {string|number} [epochNumber='latest_state'] - See [format.epochNumber](utils.md#util/format.js/format/(static)epochNumber)\n   * @return {Promise<string>} The output data.\n   */\n  async call(options, epochNumber) {\n    try {\n      return await this.request({\n        method: 'cfx_call',\n        params: [\n          this._formatCallTx(options),\n          format.epochNumber.$or(undefined)(epochNumber),\n        ],\n      });\n    } catch (e) {\n      throw Contract.decodeError(e);\n    }\n  }\n\n  /**\n   * Virtually call a contract, return the estimate gas used and storage collateralized.\n   *\n   * @param {TransactionMeta} options - See [Transaction](Transaction.md#Transaction.js/Transaction/**constructor**)\n   * @param {string|number} [epochNumber='latest_state'] - See [format.epochNumber](utils.md#util/format.js/format/(static)epochNumber)\n   * @return {Promise<import('./rpc/types/formatter').EstimateResult>} A estimate result object:\n   * - `BigInt` gasUsed: The gas used.\n   * - `BigInt` gasLimit: The gas limit.\n   * - `BigInt` storageCollateralized: The storage collateralized in Byte.\n   */\n  async estimateGasAndCollateral(options, epochNumber) {\n    try {\n      const result = await this.request({\n        method: 'cfx_estimateGasAndCollateral',\n        params: [\n          this._formatCallTx(options),\n          format.epochNumber.$or(undefined)(epochNumber),\n        ],\n      });\n      return cfxFormat.estimate(result);\n    } catch (e) {\n      throw Contract.decodeError(e);\n    }\n  }\n\n  /**\n   * Estimate a transaction's gas and storageCollateralize, check whether user's balance is enough for fee and value\n   * @param {TransactionMeta} options - See [estimateGasAndCollateral](#Conflux.js/Conflux/estimateGasAndCollateral)\n   * @param {string|number} [epochNumber='latest_state'] - See [estimateGasAndCollateral](#Conflux.js/Conflux/estimateGasAndCollateral)\n   * @return {Promise<object>} A estimate result with advance info object:\n   * - `BigInt` gasUsed: The gas used.\n   * - `BigInt` gasLimit: The gas limit.\n   * - `BigInt` storageCollateralized: The storage collateralized in Byte.\n   * - `BigInt` balance: The balance of the options.from.\n   * - `Boolean` isBalanceEnough: indicate balance is enough for gas and storage fee\n   * - `Boolean` isBalanceEnoughForValueAndFee: indicate balance is enough for gas and storage fee plus value\n   * - `Boolean` willPayCollateral: false if the transaction is eligible for storage collateral sponsorship, true otherwise\n   * - `Boolean` willPayTxFee: false if the transaction is eligible for gas sponsorship, true otherwise\n   */\n  async estimateGasAndCollateralAdvance(options, epochNumber) {\n    return this.cfx.estimateGasAndCollateralAdvance(options, epochNumber);\n  }\n\n  /**\n   * Check whether transaction sender's balance is enough for gas and storage fee\n   * @param {string} from - sender address\n   * @param {string} to - target address\n   * @param {string|number} gas - gas limit (in drip)\n   * @param {string|number} gasPrice - gas price (in drip)\n   * @param {string|number} storageLimit - storage limit (in byte)\n   * @param {string|number} [epochNumber] - optional epoch number\n   * @return {Promise<object>} A check result object:\n   * - `Boolean` isBalanceEnough: indicate balance is enough for gas and storage fee\n   * - `Boolean` willPayCollateral: false if the transaction is eligible for storage collateral sponsorship, true otherwise\n   * - `Boolean` willPayTxFee: false if the transaction is eligible for gas sponsorship, true otherwise\n   */\n  async checkBalanceAgainstTransaction(from, to, gas, gasPrice, storageLimit, epochNumber) {\n    return this.cfx.checkBalanceAgainstTransaction(from, to, gas, gasPrice, storageLimit, epochNumber);\n  }\n\n  /**\n   * Returns logs matching the filter provided.\n   *\n   * @param {import('./rpc/types/formatter').LogFilter} [options]\n   * @return {Promise<import('./rpc/types/formatter').Log[]>} Array of log, that the logs matching the filter provided:\n   * - address `string`: Address this event originated from.\n   * - topics `string[]`: Array of topics.\n   * - data `string`: The data containing non-indexed log parameter.\n   * - blockHash `string`: Hash of the block where the log in.\n   * - epochNumber `number`: Epoch number of the block where the log in.\n   * - transactionHash `string`: Hash of the transaction where the log in.\n   * - transactionIndex `string`: Transaction index in the block.\n   * - logIndex `number`: Log index in block.\n   * - transactionLogIndex `number`: Log index in transaction.\n   *\n   * @example\n   * > await conflux.getLogs({\n      address: 'cfxtest:achc8nxj7r451c223m18w2dwjnmhkd6rxa2gc31euw',\n      fromEpoch: 39802,\n      toEpoch: 39802,\n      limit: 1,\n      topics: ['0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d'],\n    });\n   [\n   {\n      epochNumber: 39802,\n      logIndex: 2,\n      transactionIndex: 0,\n      transactionLogIndex: 2,\n      address: 'CFXTEST:TYPE.CONTRACT:ACHC8NXJ7R451C223M18W2DWJNMHKD6RXA2GC31EUW',\n      blockHash: '0xca00158a2a508170278d5bdc5ca258b6698306dd8c30fdba32266222c79e57e6',\n      data: '0x',\n      topics: [\n        '0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d',\n        '0x0000000000000000000000000000000000000000000000000000000000000000',\n        '0x0000000000000000000000001c1e72f0c37968557b3d85a3f32747792798bbde',\n        '0x0000000000000000000000001c1e72f0c37968557b3d85a3f32747792798bbde'\n      ],\n      transactionHash: '0xeb75f47002720311f1709e36d7f7e9a91ee4aaa469a1de892839cb1ef66a9939'\n    }\n   ]\n   */\n  async getLogs(options) {\n    if (options.blockHashes !== undefined && (options.fromEpoch !== undefined || options.toEpoch !== undefined)) {\n      throw new Error('OverrideError, do not use `blockHashes` with `fromEpoch` or `toEpoch`, cause only `blockHashes` will take effect');\n    }\n\n    const result = await this.request({ method: 'cfx_getLogs', params: [this._formatGetLogs(options)] });\n\n    return cfxFormat.logs(result);\n  }\n\n  /**\n   * Return block's execution trace.\n   *\n   * > Note: need RPC server open trace_block method\n   *\n   * @param {string} blockHash - block hash\n   * @return {Promise<object[]>} Array of transaction traces.\n   *\n   * @example\n   * > await conflux.traceBlock('0xaf0e1d773dee28c95bcfa5480ed663fcc695b32c8c1dd81f57ff61ff09f55f88')\n   {\n        \"transactionTraces\": [\n            {\n                \"traces\": [\n                    {\n                        \"action\": {\n                            \"callType\": \"call\",\n                            \"from\": \"CFXTEST:TYPE.USER:AAP6SU0S2UZ36X19HSCP55SR6N42YR1YK6HX8D8SD1\",\n                            \"gas\": \"311592\",\n                            \"input\": \"0x\",\n                            \"to\": \"CFXTEST:TYPE.CONTRACT:ACCKUCYY5FHZKNBXMEEXWTAJ3BXMEG25B2NUF6KM25\",\n                            \"value\": \"0\"\n                        },\n                        \"type\": \"call\"\n                    }\n                ]\n            },\n            {\n                \"traces\": [\n                    {\n                        \"action\": {\n                            \"from\": \"CFXTEST:TYPE.USER:AAR75DU3V36MG4U2DHAG44B40H6K4M2ARY46G0ECMB\",\n                            \"gas\": \"83962\",\n                            \"init\": \"0x\",\n                            \"value\": \"0\"\n                        },\n                        \"type\": \"create\"\n                    }\n                ]\n            }\n        ]\n    }\n   *\n   */\n  async traceBlock(blockHash) {\n    return this.trace.block(format.blockHash(blockHash));\n  }\n\n  /**\n   * Return transaction's trace\n   * @param {string} txHash - transaction hash\n   * @returns {Promise<import('./rpc/trace').Trace[]>} Array of traces.\n   *\n   * @example\n   * > await conflux.traceTransaction('0xaf0e1d773dee28c95bcfa5480ed663fcc695b32c8c1dd81f57ff61ff09f55f88')\n   */\n  async traceTransaction(txHash) {\n    return this.trace.transaction(format.transactionHash(txHash));\n  }\n\n  /**\n   * Return traces that satisfy an filter\n   * @param {import('./rpc/trace').TraceFilter} filter - trace filters\n   * @returns {Promise<import('./rpc/trace').Trace[]>} Array of traces.\n   *\n   * @example\n   * > await conflux.traceFilter({\n      fromEpoch: 1,\n      toEpoch: 100,\n      count: 100,\n      after: 100,\n      blockHashes: ['0xaf0e1d773dee28c95bcfa5480ed663fcc695b32c8c1dd81f57ff61ff09f55f88'],\n      actionTypes: ['call_result']\n    })\n   */\n  async traceFilter(filter) {\n    return this.trace.filter(format.traceFilter(filter));\n  }\n\n  /**\n   * Return one epoch's all receipts\n   * @param {number|string} epochNumber - epoch number\n   * @returns {Promise<import('./rpc/types/formatter').TransactionReceipt[][]>} Array of array receipts.\n   *\n   * @example\n   * > await conflux.getEpochReceipts('0x6')\n   */\n  async getEpochReceipts(epochNumber) {\n    return this.cfx.getEpochReceipts(epochNumber);\n  }\n\n  /**\n   * Return one epoch's all receipts by pivot block hash\n   * @param {string} pivotBlockHash - epoch pivot block hash\n   * @returns {Promise<import('./rpc/types/formatter').TransactionReceipt[][]>} Array of array receipts.\n   *\n   * @example\n   * > await conflux.getEpochReceiptsByPivotBlockHash('0x12291776d632d966896b6c580f3201cd2e2a3fd672378fc7965aa7f7058282b2')\n   */\n  async getEpochReceiptsByPivotBlockHash(pivotBlockHash) {\n    return this.cfx.getEpochReceiptsByPivotBlockHash(pivotBlockHash);\n  }\n\n  /**\n   * Return PoS summary info\n   * @param {number|string} epochNumber - epoch number\n   * @returns {Promise<import('./rpc/types/formatter').PoSEconomics>} PoS summary info\n   * - distributablePosInterest `number`: Currently total distributable PoS interest (Drip)\n   * - lastDistributeBlock `number`: Last distribute block number\n   * - totalPosStakingTokens `number`: Total token amount (Drip) staked in PoS\n   *\n   */\n  async getPoSEconomics(epochNumber) {\n    return this.cfx.getPoSEconomics(epochNumber);\n  }\n\n  // ----------------------------- subscription -------------------------------\n  /**\n   * Subscribe event by name and got id, and provider will emit event by id\n   *\n   * > Note: suggest use `conflux.subscribeXXX` to subscribe\n   *\n   * @param {string} name - Subscription name\n   * @param {array} args - Subscription arguments\n   * @return {Promise<string>} Id of subscription\n   *\n   * @example\n   * > conflux = new Conflux({url:'ws://127.0.0.1:12535'})\n   * > id = await conflux.subscribe('epochs');\n   \"0x8fe7879a1681e9b9\"\n   * > conflux.provider.on(id, data=>console.log(data));\n   {\n     epochHashesOrdered: [\n       '0x0eff33578346b8e8347af3bae948eb7f4f5c27add9dbcfeb55eaf7cb3640088f',\n       '0xb0cedac34a06ebcb42c3446a6bb2df1f0dcd9d83061f550460e387d19a4d8e91'\n     ],\n     epochNumber: '0x8cb32'\n   }\n   */\n  async subscribe(name, ...args) {\n    return this.request({ method: 'cfx_subscribe', params: [name, ...args] });\n  }\n\n  /**\n   * The epochs topic streams consensus results: the total order of blocks, as expressed by a sequence of epochs.\n   * The returned series of epoch numbers is monotonically increasing with an increment of one.\n   * If you see the same epoch twice, this suggests a pivot chain reorg has happened (this might happen for recent epochs).\n   * For each epoch, the last hash in epochHashesOrdered is the hash of the pivot block.\n   *\n   * @param {string} [sub_epoch] - Available values are latest_mined(default value) and latest_state\n   *\n   * @return {Promise<Subscription>} EventEmitter instance with the follow events:\n   * - 'data':\n   *   - epochNumber `number`: epoch number\n   *   - epochHashesOrdered `array`: epoch block hash in order\n   *     - `string`: block hash\n   *\n   * @example\n   * > subscription = await conflux.subscribeEpochs()\n   * > subscription.on('data', data=>console.log(data))\n   {\n     epochNumber: 566031,\n     epochHashesOrdered: [\n       '0x2820dbb5c4126455ad37bc88c635ae1f35e0d4f85c74300c01828f57ea1e5969',\n       '0xd66b801335ba01e2448df52e59da584b54fc7ee7c2f8160943c097e1ebd23038'\n     ]\n    }\n   {\n     epochNumber: 566032,\n     epochHashesOrdered: [\n       '0x899606b462f0141d672aaea8497c82aebbd7b16d266fad71e9d5093b5c6d392e',\n       '0xf6093d19c4df3645cd972e9f791fe0db3a1ab70881023a8aee63f64e0c3ca152'\n     ]\n   }\n   */\n  async subscribeEpochs(sub_epoch = CONST.EPOCH_NUMBER.LATEST_MINED) {\n    const id = await this.subscribe('epochs', sub_epoch);\n    const subscription = new Subscription(id);\n\n    this.provider.on(id, data => {\n      subscription.emit('data', cfxFormat.epoch(data));\n    });\n\n    return subscription;\n  }\n\n  /**\n   * The newHeads topic streams all new block headers participating in the consensus.\n   *\n   * @return {Promise<Subscription>} EventEmitter instance with the follow events:\n   * - 'data': see `getBlockByHash`\n   *\n   * @example\n   * > subscription = await conflux.subscribeNewHeads()\n   * > subscription.on('data', data=>console.log(data))\n   {\n      difficulty: 368178587115n,\n      epochNumber: null,\n      gasLimit: 30000000n,\n      height: 1118247,\n      timestamp: 1605005752,\n      adaptive: false,\n      blame: 0,\n      deferredLogsBloomHash: '0xd397b3b043d87fcd6fad1291ff0bfd16401c274896d8c63a923727f077b8e0b5',\n      deferredReceiptsRoot: '0x7ae0d5716513206755b6f7c95272b79dbc225759b6e17727e19c2f15c3166bda',\n      deferredStateRoot: '0x3cf5deba77c8aa9072f1e972d6a97db487a0ce88455f371eb8ac8fa77321cb9d',\n      hash: '0x194675173abbc5aab50326136008774eea1a289e6722c973dfed12b703ee5f2a',\n      miner: 'CFXTEST:TYPE.USER:AAPKCJR28DG976FZR43C5HF1RWN5XV8T1U8V8JW8A4',\n      nonce: '0x799d35f695950fd6',\n      parentHash: '0x4af3cf8cb358e75acad282ffa4b578b6211ea9eeb7cf87c282f120d8a1c809df',\n      powQuality: '0xe7ac17feab',\n      refereeHashes: [],\n      transactionsRoot: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n    }\n   */\n  async subscribeNewHeads() {\n    const id = await this.subscribe('newHeads');\n    const subscription = new Subscription(id);\n\n    this.provider.on(id, data => {\n      subscription.emit('data', cfxFormat.head(data));\n    });\n\n    return subscription;\n  }\n\n  /**\n   * The logs topic streams all logs matching a certain filter, in order.\n   * In case of a pivot chain reorg (which might affect recent logs), a special revert message is sent.\n   * All logs received previously that belong to epochs larger than the one in this message should be considered invalid.\n   *\n   * @param {object} [options]\n   * @param {string|string[]} [options.address] - Search contract addresses. If null, match all. If specified, log must be produced by one of these addresses.\n   * @param {array} [options.topics] - Search topics. Logs can have 4 topics: the function signature and up to 3 indexed event arguments. The elements of topics match the corresponding log topics. Example: [\"0xA\", null, [\"0xB\", \"0xC\"], null] matches logs with \"0xA\" as the 1st topic AND (\"0xB\" OR \"0xC\") as the 3rd topic. If null, match all.\n   * @return {Promise<Subscription>} EventEmitter instance with the follow events:\n   * - 'data': see `getLogs`\n   * - 'revert':\n   *   - revertTo 'number': epoch number\n   *\n   * @example\n   * > subscription = await conflux.subscribeLogs()\n   * > subscription.on('data', data=>console.log(data))\n   {\n     epochNumber: 568224,\n     logIndex: 0,\n     transactionIndex: 0,\n     transactionLogIndex: 0,\n     address: 'CFXTEST:TYPE.CONTRACT:ACCS4PG151C99AZPE6RSK37R40YNEMYRSE9P475E82',\n     blockHash: '0xc02689eea6a507250838463c13e6b633479e2757dfb7e9b2593d5c31b54adb63',\n     data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n     topics: [\n       '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n       '0x0000000000000000000000001bd9e9be525ab967e633bcdaeac8bd5723ed4d6b',\n       '0x0000000000000000000000001bd9e9be525ab967e633bcdaeac8bd5723ed4d6b'\n     ],\n     transactionHash: '0x950ddec9ce3b42c4d8ca120722fa318ae64dc2e24553201f55f68c00bfd9cc4c'\n   }\n   * @example\n   * > subscription.on('revert', data=>console.log(data))\n   { revertTo: 568230 }\n   { revertTo: 568231 }\n   */\n  async subscribeLogs({ address, topics } = {}) {\n    const id = await this.subscribe('logs', this._formatGetLogs({ address, topics }));\n\n    const subscription = new Subscription(id);\n    this.provider.on(id, data => {\n      if (data.revertTo) {\n        subscription.emit('revert', cfxFormat.revert(data));\n      } else {\n        subscription.emit('data', cfxFormat.log(data));\n      }\n    });\n\n    return subscription;\n  }\n\n  /**\n   * Unsubscribe subscription.\n   *\n   * @param {string|Subscription} id - Subscription id\n   * @return {Promise<boolean>} Is success\n   *\n   * @example\n   * > id = await conflux.subscribe('epochs');\n   * > await conflux.unsubscribe(id);\n   true\n   * > await conflux.unsubscribe(id);\n   false\n\n   * @example\n   * > subscription = await conflux.subscribeLogs();\n   * > await conflux.unsubscribe(subscription);\n   true\n   */\n  async unsubscribe(id) {\n    return this.request({ method: 'cfx_unsubscribe', params: [`${id}`] });\n  }\n}\n\nmodule.exports = Conflux;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/Conflux.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/Drip.js":
/*!*************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/Drip.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const format = __webpack_require__(/*! ./util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\n\n/**\n * Positive decimal integer string in `Drip`\n */\nclass Drip extends String {\n  /**\n   * Get `Drip` string from `CFX`\n   *\n   * @param {string|number|BigInt} value\n   * @return {Drip}\n   *\n   * @example\n   * > Drip.fromCFX(3.14)\n   [String (Drip): '3140000000000000000']\n   * > Drip.fromCFX('0xab')\n   [String (Drip): '171000000000000000000']\n   */\n  static fromCFX(value) {\n    return new this(format.big(value).times(1e18).toFixed());\n  }\n\n  /**\n   * Get `Drip` string from `GDrip`\n   *\n   * @param {string|number|BigInt} value\n   * @return {Drip}\n   *\n   * @example\n   * > Drip.fromGDrip(3.14)\n   [String (Drip): '3140000000']\n   * > Drip.fromGDrip('0xab')\n   [String (Drip): '171000000000']\n   */\n  static fromGDrip(value) {\n    return new this(format.big(value).times(1e9).toFixed());\n  }\n\n  /**\n   * @param {number|string|BigInt} value\n   * @return {Drip}\n   *\n   * @example\n   * > new Drip(1.00)\n   [String (Drip): '1']\n   * > new Drip('0xab')\n   [String (Drip): '171']\n   */\n  constructor(value) {\n    super(format.bigUInt(value).toString(10));\n  }\n\n  /**\n   * Get `CFX` number string\n   * @return {string}\n   *\n   * @example\n   * > Drip(1e9).toCFX()\n   \"0.000000001\"\n   */\n  toCFX() {\n    return format.big(this).div(1e18).toFixed();\n  }\n\n  /**\n   * Get `GDrip` number string\n   * @return {string}\n   *\n   * @example\n   * > Drip(1e9).toGDrip()\n   \"1\"\n   */\n  toGDrip() {\n    return format.big(this).div(1e9).toFixed();\n  }\n}\n\nmodule.exports = new Proxy(Drip, {\n  apply(target, thisArg, argArray) {\n    return new Drip(...argArray);\n  },\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL0RyaXAuanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLDZFQUFlOztBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsc0JBQXNCO0FBQ25DLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHNCQUFzQjtBQUNuQyxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLHNCQUFzQjtBQUNuQyxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDIiwic291cmNlcyI6WyIvVXNlcnMvdmlrYXNoeWFkYXYvRGV2ZWxvcGVyL0FsbGdpdEZpbGVzL0NvbmZsdXgtVHhuLXZpc3VhbGl6ZXIvbm9kZV9tb2R1bGVzL2pzLWNvbmZsdXgtc2RrL3NyYy9EcmlwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZvcm1hdCA9IHJlcXVpcmUoJy4vdXRpbC9mb3JtYXQnKTtcblxuLyoqXG4gKiBQb3NpdGl2ZSBkZWNpbWFsIGludGVnZXIgc3RyaW5nIGluIGBEcmlwYFxuICovXG5jbGFzcyBEcmlwIGV4dGVuZHMgU3RyaW5nIHtcbiAgLyoqXG4gICAqIEdldCBgRHJpcGAgc3RyaW5nIGZyb20gYENGWGBcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfEJpZ0ludH0gdmFsdWVcbiAgICogQHJldHVybiB7RHJpcH1cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogPiBEcmlwLmZyb21DRlgoMy4xNClcbiAgIFtTdHJpbmcgKERyaXApOiAnMzE0MDAwMDAwMDAwMDAwMDAwMCddXG4gICAqID4gRHJpcC5mcm9tQ0ZYKCcweGFiJylcbiAgIFtTdHJpbmcgKERyaXApOiAnMTcxMDAwMDAwMDAwMDAwMDAwMDAwJ11cbiAgICovXG4gIHN0YXRpYyBmcm9tQ0ZYKHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzKGZvcm1hdC5iaWcodmFsdWUpLnRpbWVzKDFlMTgpLnRvRml4ZWQoKSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGBEcmlwYCBzdHJpbmcgZnJvbSBgR0RyaXBgXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcnxCaWdJbnR9IHZhbHVlXG4gICAqIEByZXR1cm4ge0RyaXB9XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqID4gRHJpcC5mcm9tR0RyaXAoMy4xNClcbiAgIFtTdHJpbmcgKERyaXApOiAnMzE0MDAwMDAwMCddXG4gICAqID4gRHJpcC5mcm9tR0RyaXAoJzB4YWInKVxuICAgW1N0cmluZyAoRHJpcCk6ICcxNzEwMDAwMDAwMDAnXVxuICAgKi9cbiAgc3RhdGljIGZyb21HRHJpcCh2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgdGhpcyhmb3JtYXQuYmlnKHZhbHVlKS50aW1lcygxZTkpLnRvRml4ZWQoKSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfEJpZ0ludH0gdmFsdWVcbiAgICogQHJldHVybiB7RHJpcH1cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogPiBuZXcgRHJpcCgxLjAwKVxuICAgW1N0cmluZyAoRHJpcCk6ICcxJ11cbiAgICogPiBuZXcgRHJpcCgnMHhhYicpXG4gICBbU3RyaW5nIChEcmlwKTogJzE3MSddXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgIHN1cGVyKGZvcm1hdC5iaWdVSW50KHZhbHVlKS50b1N0cmluZygxMCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBgQ0ZYYCBudW1iZXIgc3RyaW5nXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogPiBEcmlwKDFlOSkudG9DRlgoKVxuICAgXCIwLjAwMDAwMDAwMVwiXG4gICAqL1xuICB0b0NGWCgpIHtcbiAgICByZXR1cm4gZm9ybWF0LmJpZyh0aGlzKS5kaXYoMWUxOCkudG9GaXhlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBgR0RyaXBgIG51bWJlciBzdHJpbmdcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA+IERyaXAoMWU5KS50b0dEcmlwKClcbiAgIFwiMVwiXG4gICAqL1xuICB0b0dEcmlwKCkge1xuICAgIHJldHVybiBmb3JtYXQuYmlnKHRoaXMpLmRpdigxZTkpLnRvRml4ZWQoKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBQcm94eShEcmlwLCB7XG4gIGFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJnQXJyYXkpIHtcbiAgICByZXR1cm4gbmV3IERyaXAoLi4uYXJnQXJyYXkpO1xuICB9LFxufSk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/Drip.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/ERROR_CODES.js":
/*!********************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/ERROR_CODES.js ***!
  \********************************************************/
/***/ ((module) => {

eval("module.exports = {\n  // Parser parse data failed\n  PARSER_ERROR: 5200,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL0VSUk9SX0NPREVTLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmlrYXNoeWFkYXYvRGV2ZWxvcGVyL0FsbGdpdEZpbGVzL0NvbmZsdXgtVHhuLXZpc3VhbGl6ZXIvbm9kZV9tb2R1bGVzL2pzLWNvbmZsdXgtc2RrL3NyYy9FUlJPUl9DT0RFUy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gUGFyc2VyIHBhcnNlIGRhdGEgZmFpbGVkXG4gIFBBUlNFUl9FUlJPUjogNTIwMCxcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/ERROR_CODES.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/Message.js":
/*!****************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/Message.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { keccak256, ecdsaSign, ecdsaRecover, publicKeyToAddress } = __webpack_require__(/*! ./util/sign */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/sign.js\");\nconst format = __webpack_require__(/*! ./util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\n\n/** Class provide message sign utilities. */\nclass Message {\n  /**\n   * Signs the hash with the privateKey.\n   *\n   * @param {string|Buffer} privateKey - Private key used to sign message\n   * @param {string|Buffer} messageHash - The message hash need to be signed\n   * @return {string} The signature as hex string.\n   *\n   * @example\n   * > Message.sign(\n   '0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef', // privateKey\n   '0x592fa743889fc7f92ac2a37bb1f5ba1daf2a5c84741ca0e0061d243a2e6707ba',\n   )\n   \"0x6e913e2b76459f19ebd269b82b51a70e912e909b2f5c002312efc27bcc280f3c29134d382aad0dbd3f0ccc9f0eb8f1dbe3f90141d81574ebb6504156b0d7b95f01\"\n   */\n  static sign(privateKey, messageHash) {\n    const { r, s, v } = ecdsaSign(format.hexBuffer(messageHash), format.hexBuffer(privateKey));\n    const buffer = Buffer.concat([r, s, format.hexBuffer(v)]);\n    return format.hex(buffer);\n  }\n\n  /**\n   * Recovers the signers publicKey from the signature.\n   *\n   * @param {string|Buffer} signature\n   * @param {string|Buffer} messageHash\n   * @return {string} The publicKey as hex string.\n   *\n   * @example\n   * > Message.recover(\n   '0x6e913e2b76459f19ebd269b82b51a70e912e909b2f5c002312efc27bcc280f3c29134d382aad0dbd3f0ccc9f0eb8f1dbe3f90141d81574ebb6504156b0d7b95f01',\n   '0x592fa743889fc7f92ac2a37bb1f5ba1daf2a5c84741ca0e0061d243a2e6707ba',\n   )\n   \"0x4646ae5047316b4230d0086c8acec687f00b1cd9d1dc634f6cb358ac0a9a8ffffe77b4dd0a4bfb95851f3b7355c781dd60f8418fc8a65d14907aff47c903a559\"\n   */\n  static recover(signature, messageHash) {\n    const signatureBuffer = format.hexBuffer(signature);\n    const r = signatureBuffer.slice(0, 32);\n    const s = signatureBuffer.slice(32, 64);\n    const v = signatureBuffer[64];\n    const buffer = ecdsaRecover(format.hexBuffer(messageHash), { r, s, v });\n    return format.publicKey(buffer);\n  }\n\n  /**\n   * @param {string} message\n   * @return {Message}\n   *\n   * @example\n   * > msg = new Message('Hello World');\n   Message {\n      message: 'Hello World',\n    }\n   * > msg.sign('0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef');\n   Message {\n      message: 'Hello World',\n      signature: '0x6e913e2b76459f19ebd269b82b51a70e912e909b2f5c002312efc27bcc280f3c29134d382aad0dbd3f0ccc9f0eb8f1dbe3f90141d81574ebb6504156b0d7b95f01'\n    }\n   * > msg.signature\n   \"0x6e913e2b76459f19ebd269b82b51a70e912e909b2f5c002312efc27bcc280f3c29134d382aad0dbd3f0ccc9f0eb8f1dbe3f90141d81574ebb6504156b0d7b95f01\"\n   * > msg.hash\n   \"0x592fa743889fc7f92ac2a37bb1f5ba1daf2a5c84741ca0e0061d243a2e6707ba\"\n   * > msg.from\n   \"cfxtest:aasm4c231py7j34fghntcfkdt2nm9xv1tu6jd3r1s7\"\n   * > msg.r\n   \"0x6e913e2b76459f19ebd269b82b51a70e912e909b2f5c002312efc27bcc280f3c\"\n   * > msg.s\n   \"0x29134d382aad0dbd3f0ccc9f0eb8f1dbe3f90141d81574ebb6504156b0d7b95f\"\n   * > msg.v\n   1\n   */\n  constructor(message) {\n    this.message = message;\n  }\n\n  /**\n   * Getter of message hash include signature.\n   *\n   * > Note: calculate every time.\n   *\n   * @return {string}\n   */\n  get hash() {\n    return format.hex(keccak256(Buffer.from(this.message)));\n  }\n\n  /**\n   * Getter of sender address.\n   *\n   * > Note: calculate every time.\n   *\n   * @return {string|undefined} If ECDSA recover success return address, else return undefined.\n   */\n  get from() {\n    try {\n      const publicKey = Message.recover(this.signature, this.hash);\n      return format.address(publicKeyToAddress(format.hexBuffer(publicKey)), this.networkId);\n    } catch (e) {\n      return undefined;\n    }\n  }\n\n  /**\n   * Sign message and set 'r','s','v' and 'hash'.\n   *\n   * @param {string} privateKey - Private key hex string.\n   * @param {number} networkId - Network id of account\n   * @return {Message}\n   */\n  sign(privateKey, networkId) {\n    this.signature = Message.sign(privateKey, this.hash);\n    this.networkId = networkId;\n    return this;\n  }\n\n  /**\n   * Get signatures r\n   * @return {string}\n   */\n  get r() {\n    try {\n      return this.signature.slice(0, 2 + 64);\n    } catch (e) {\n      return undefined;\n    }\n  }\n\n  /**\n   * Get signatures s\n   * @return {string}\n   */\n  get s() {\n    try {\n      return `0x${this.signature.slice(2 + 64, 2 + 128)}`;\n    } catch (e) {\n      return undefined;\n    }\n  }\n\n  /**\n   * Get signatures v\n   * @return {number}\n   */\n  get v() {\n    try {\n      return parseInt(this.signature.slice(2 + 128, 2 + 130), 16);\n    } catch (e) {\n      return undefined;\n    }\n  }\n}\n\nmodule.exports = Message;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/Message.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/PersonalMessage.js":
/*!************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/PersonalMessage.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const PREFIX = '\\x19Conflux Signed Message:\\n';\nconst format = __webpack_require__(/*! ./util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\nconst Message = __webpack_require__(/*! ./Message */ \"(ssr)/./node_modules/js-conflux-sdk/src/Message.js\");\nconst { keccak256 } = __webpack_require__(/*! ./util/sign */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/sign.js\");\nconst { isHexString } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\n\nclass PersonalMessage extends Message {\n  /**\n   * Assemble the personal message\n   * @param {string|Buffer} message - The origin message\n   * @return {string}\n   */\n  static personalMessage(message) {\n    const msgBuf = isHexString(message) ? format.hexBuffer(message) : Buffer.from(message);\n    return PREFIX + msgBuf.length + msgBuf.toString();\n  }\n\n  /**\n   * Assemble the personal message hash\n   * @param {string|Buffer} message - The origin message\n   * @return {string} The personal message hash\n   */\n  static personalHash(message) {\n    const personalMsg = this.personalMessage(message);\n    return format.hex(keccak256(Buffer.from(personalMsg)));\n  }\n\n  /**\n   * Signs the hash with the privateKey.\n   *\n   * @param {string|Buffer} privateKey\n   * @param {string|Buffer} message\n   * @return {string} The signature as hex string.\n   *\n   * @example\n   * > PersonalMessage.sign(\n   '0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef', // privateKey\n   'Hello world!',\n   )\n   \"0xa2d98c5d47b35ba4ebdf03e2d9496312355dccc609bf38c93f19cc9f970e131d0e95504eb3c786714ab703f6924876704bc44bb71680802a87b4c4d2599ac96a00\"\n   */\n  static sign(privateKey, message) {\n    return super.sign(privateKey, this.personalHash(message));\n  }\n\n  /**\n   * Recovers the signers publicKey from the signature.\n   *\n   * @param {string|Buffer} signature\n   * @param {string|Buffer} message\n   * @return {string} The publicKey as hex string.\n   *\n   * @example\n   * > PersonalMessage.recover(\n   '0xa2d98c5d47b35ba4ebdf03e2d9496312355dccc609bf38c93f19cc9f970e131d0e95504eb3c786714ab703f6924876704bc44bb71680802a87b4c4d2599ac96a00',\n   'Hello world!',\n   )\n   \"0x5e3eb3a2fbe124c62b382f078a1766c5b0b1306c38a496aa49e3702024a06cffe9da86ab15e4d017b6ef12794e9fe1751ce261a7b7c03be0c5b81ab9b040668a\"\n   */\n  static recover(signature, message) {\n    return super.recover(signature, this.personalHash(message));\n  }\n\n  /**\n   * Recovers the wallet signers publicKey from the signature.\n   *\n   * @param {string} signature\n   * @param {string} message\n   * @return {string} The publicKey as hex string.\n   *\n   * @example\n   > PersonalMessage.recoverPortalPersonalSign(\n   '0x6e913e2b76459f19ebd269b82b51a70e912e909b2f5c002312efc27bcc280f3c29134d382aad0dbd3f0ccc9f0eb8f1dbe3f90141d81574ebb6504156b0d7b95f01',\n   '0x592fa743889fc7f92ac2a37bb1f5ba1daf2a5c84741ca0e0061d243a2e6707ba',\n   )\n   \"0x4646ae5047316b4230d0086c8acec687f00b1cd9d1dc634f6cb358ac0a9a8ffffe77b4dd0a4bfb95851f3b7355c781dd60f8418fc8a65d14907aff47c903a559\"\n   *\n   > PersonalMessage.recoverPortalPersonalSign(\n   '0x5f8499879ce281ff083f5716de68ab6d05b176edbb27b6c5882ab482dc00478e33679f15a30bc60510faab49c2bd0bf883ad0a45ad3160e424b35cddcc1ee85d1c',\n   'Hello World',\n   )\n   \"0x41f3b66efde8121599072d1c215c88682f491c4f9e3b2345667a3f9f4adb8449b3de23832f435f4d923872ed043449ee7843a0bfc3594c46c982ab5297009f78\"\n   */\n  static recoverPortalPersonalSign(signature, message) {\n    const v = parseInt(signature.slice(130), 16) - 27;\n    signature = signature.slice(0, 130) + format.hex(v).slice(2);\n    const messageHex = isHexString(message) ? message : format.hex(Buffer.from(message));\n    const msg = new Message(PREFIX + messageHex.length + messageHex);\n    return Message.recover(signature, msg.hash);\n  }\n\n  /**\n   * Assemble the personal message hash\n   * @param {string|Buffer} message - The origin message\n   * @return {PersonalMessage}\n   */\n  constructor(message) {\n    const personalMessage = PersonalMessage.personalMessage(message);\n    super(personalMessage);\n    this._originMsg = message;\n    this._personalMsg = personalMessage;\n    this._prefix = PREFIX;\n  }\n}\n\nmodule.exports = PersonalMessage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL1BlcnNvbmFsTWVzc2FnZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyw2RUFBZTtBQUN0QyxnQkFBZ0IsbUJBQU8sQ0FBQyxxRUFBVztBQUNuQyxRQUFRLFlBQVksRUFBRSxtQkFBTyxDQUFDLHlFQUFhO0FBQzNDLFFBQVEsY0FBYyxFQUFFLG1CQUFPLENBQUMscUVBQVE7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZUFBZTtBQUM1QixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxlQUFlO0FBQzVCLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZUFBZTtBQUM1QixhQUFhLGVBQWU7QUFDNUIsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxlQUFlO0FBQzVCLGFBQWEsZUFBZTtBQUM1QixjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsZUFBZTtBQUM1QixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvdmlrYXNoeWFkYXYvRGV2ZWxvcGVyL0FsbGdpdEZpbGVzL0NvbmZsdXgtVHhuLXZpc3VhbGl6ZXIvbm9kZV9tb2R1bGVzL2pzLWNvbmZsdXgtc2RrL3NyYy9QZXJzb25hbE1lc3NhZ2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUFJFRklYID0gJ1xceDE5Q29uZmx1eCBTaWduZWQgTWVzc2FnZTpcXG4nO1xuY29uc3QgZm9ybWF0ID0gcmVxdWlyZSgnLi91dGlsL2Zvcm1hdCcpO1xuY29uc3QgTWVzc2FnZSA9IHJlcXVpcmUoJy4vTWVzc2FnZScpO1xuY29uc3QgeyBrZWNjYWsyNTYgfSA9IHJlcXVpcmUoJy4vdXRpbC9zaWduJyk7XG5jb25zdCB7IGlzSGV4U3RyaW5nIH0gPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuY2xhc3MgUGVyc29uYWxNZXNzYWdlIGV4dGVuZHMgTWVzc2FnZSB7XG4gIC8qKlxuICAgKiBBc3NlbWJsZSB0aGUgcGVyc29uYWwgbWVzc2FnZVxuICAgKiBAcGFyYW0ge3N0cmluZ3xCdWZmZXJ9IG1lc3NhZ2UgLSBUaGUgb3JpZ2luIG1lc3NhZ2VcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIHBlcnNvbmFsTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgY29uc3QgbXNnQnVmID0gaXNIZXhTdHJpbmcobWVzc2FnZSkgPyBmb3JtYXQuaGV4QnVmZmVyKG1lc3NhZ2UpIDogQnVmZmVyLmZyb20obWVzc2FnZSk7XG4gICAgcmV0dXJuIFBSRUZJWCArIG1zZ0J1Zi5sZW5ndGggKyBtc2dCdWYudG9TdHJpbmcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBc3NlbWJsZSB0aGUgcGVyc29uYWwgbWVzc2FnZSBoYXNoXG4gICAqIEBwYXJhbSB7c3RyaW5nfEJ1ZmZlcn0gbWVzc2FnZSAtIFRoZSBvcmlnaW4gbWVzc2FnZVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBwZXJzb25hbCBtZXNzYWdlIGhhc2hcbiAgICovXG4gIHN0YXRpYyBwZXJzb25hbEhhc2gobWVzc2FnZSkge1xuICAgIGNvbnN0IHBlcnNvbmFsTXNnID0gdGhpcy5wZXJzb25hbE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgcmV0dXJuIGZvcm1hdC5oZXgoa2VjY2FrMjU2KEJ1ZmZlci5mcm9tKHBlcnNvbmFsTXNnKSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNpZ25zIHRoZSBoYXNoIHdpdGggdGhlIHByaXZhdGVLZXkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfEJ1ZmZlcn0gcHJpdmF0ZUtleVxuICAgKiBAcGFyYW0ge3N0cmluZ3xCdWZmZXJ9IG1lc3NhZ2VcbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgc2lnbmF0dXJlIGFzIGhleCBzdHJpbmcuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqID4gUGVyc29uYWxNZXNzYWdlLnNpZ24oXG4gICAnMHgwMTIzNDU2Nzg5YWJjZGVmMDEyMzQ1Njc4OWFiY2RlZjAxMjM0NTY3ODlhYmNkZWYwMTIzNDU2Nzg5YWJjZGVmJywgLy8gcHJpdmF0ZUtleVxuICAgJ0hlbGxvIHdvcmxkIScsXG4gICApXG4gICBcIjB4YTJkOThjNWQ0N2IzNWJhNGViZGYwM2UyZDk0OTYzMTIzNTVkY2NjNjA5YmYzOGM5M2YxOWNjOWY5NzBlMTMxZDBlOTU1MDRlYjNjNzg2NzE0YWI3MDNmNjkyNDg3NjcwNGJjNDRiYjcxNjgwODAyYTg3YjRjNGQyNTk5YWM5NmEwMFwiXG4gICAqL1xuICBzdGF0aWMgc2lnbihwcml2YXRlS2V5LCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHN1cGVyLnNpZ24ocHJpdmF0ZUtleSwgdGhpcy5wZXJzb25hbEhhc2gobWVzc2FnZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlY292ZXJzIHRoZSBzaWduZXJzIHB1YmxpY0tleSBmcm9tIHRoZSBzaWduYXR1cmUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfEJ1ZmZlcn0gc2lnbmF0dXJlXG4gICAqIEBwYXJhbSB7c3RyaW5nfEJ1ZmZlcn0gbWVzc2FnZVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBwdWJsaWNLZXkgYXMgaGV4IHN0cmluZy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogPiBQZXJzb25hbE1lc3NhZ2UucmVjb3ZlcihcbiAgICcweGEyZDk4YzVkNDdiMzViYTRlYmRmMDNlMmQ5NDk2MzEyMzU1ZGNjYzYwOWJmMzhjOTNmMTljYzlmOTcwZTEzMWQwZTk1NTA0ZWIzYzc4NjcxNGFiNzAzZjY5MjQ4NzY3MDRiYzQ0YmI3MTY4MDgwMmE4N2I0YzRkMjU5OWFjOTZhMDAnLFxuICAgJ0hlbGxvIHdvcmxkIScsXG4gICApXG4gICBcIjB4NWUzZWIzYTJmYmUxMjRjNjJiMzgyZjA3OGExNzY2YzViMGIxMzA2YzM4YTQ5NmFhNDllMzcwMjAyNGEwNmNmZmU5ZGE4NmFiMTVlNGQwMTdiNmVmMTI3OTRlOWZlMTc1MWNlMjYxYTdiN2MwM2JlMGM1YjgxYWI5YjA0MDY2OGFcIlxuICAgKi9cbiAgc3RhdGljIHJlY292ZXIoc2lnbmF0dXJlLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHN1cGVyLnJlY292ZXIoc2lnbmF0dXJlLCB0aGlzLnBlcnNvbmFsSGFzaChtZXNzYWdlKSk7XG4gIH1cblxuICAvKipcbiAgICogUmVjb3ZlcnMgdGhlIHdhbGxldCBzaWduZXJzIHB1YmxpY0tleSBmcm9tIHRoZSBzaWduYXR1cmUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzaWduYXR1cmVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgcHVibGljS2V5IGFzIGhleCBzdHJpbmcuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICA+IFBlcnNvbmFsTWVzc2FnZS5yZWNvdmVyUG9ydGFsUGVyc29uYWxTaWduKFxuICAgJzB4NmU5MTNlMmI3NjQ1OWYxOWViZDI2OWI4MmI1MWE3MGU5MTJlOTA5YjJmNWMwMDIzMTJlZmMyN2JjYzI4MGYzYzI5MTM0ZDM4MmFhZDBkYmQzZjBjY2M5ZjBlYjhmMWRiZTNmOTAxNDFkODE1NzRlYmI2NTA0MTU2YjBkN2I5NWYwMScsXG4gICAnMHg1OTJmYTc0Mzg4OWZjN2Y5MmFjMmEzN2JiMWY1YmExZGFmMmE1Yzg0NzQxY2EwZTAwNjFkMjQzYTJlNjcwN2JhJyxcbiAgIClcbiAgIFwiMHg0NjQ2YWU1MDQ3MzE2YjQyMzBkMDA4NmM4YWNlYzY4N2YwMGIxY2Q5ZDFkYzYzNGY2Y2IzNThhYzBhOWE4ZmZmZmU3N2I0ZGQwYTRiZmI5NTg1MWYzYjczNTVjNzgxZGQ2MGY4NDE4ZmM4YTY1ZDE0OTA3YWZmNDdjOTAzYTU1OVwiXG4gICAqXG4gICA+IFBlcnNvbmFsTWVzc2FnZS5yZWNvdmVyUG9ydGFsUGVyc29uYWxTaWduKFxuICAgJzB4NWY4NDk5ODc5Y2UyODFmZjA4M2Y1NzE2ZGU2OGFiNmQwNWIxNzZlZGJiMjdiNmM1ODgyYWI0ODJkYzAwNDc4ZTMzNjc5ZjE1YTMwYmM2MDUxMGZhYWI0OWMyYmQwYmY4ODNhZDBhNDVhZDMxNjBlNDI0YjM1Y2RkY2MxZWU4NWQxYycsXG4gICAnSGVsbG8gV29ybGQnLFxuICAgKVxuICAgXCIweDQxZjNiNjZlZmRlODEyMTU5OTA3MmQxYzIxNWM4ODY4MmY0OTFjNGY5ZTNiMjM0NTY2N2EzZjlmNGFkYjg0NDliM2RlMjM4MzJmNDM1ZjRkOTIzODcyZWQwNDM0NDllZTc4NDNhMGJmYzM1OTRjNDZjOTgyYWI1Mjk3MDA5Zjc4XCJcbiAgICovXG4gIHN0YXRpYyByZWNvdmVyUG9ydGFsUGVyc29uYWxTaWduKHNpZ25hdHVyZSwgbWVzc2FnZSkge1xuICAgIGNvbnN0IHYgPSBwYXJzZUludChzaWduYXR1cmUuc2xpY2UoMTMwKSwgMTYpIC0gMjc7XG4gICAgc2lnbmF0dXJlID0gc2lnbmF0dXJlLnNsaWNlKDAsIDEzMCkgKyBmb3JtYXQuaGV4KHYpLnNsaWNlKDIpO1xuICAgIGNvbnN0IG1lc3NhZ2VIZXggPSBpc0hleFN0cmluZyhtZXNzYWdlKSA/IG1lc3NhZ2UgOiBmb3JtYXQuaGV4KEJ1ZmZlci5mcm9tKG1lc3NhZ2UpKTtcbiAgICBjb25zdCBtc2cgPSBuZXcgTWVzc2FnZShQUkVGSVggKyBtZXNzYWdlSGV4Lmxlbmd0aCArIG1lc3NhZ2VIZXgpO1xuICAgIHJldHVybiBNZXNzYWdlLnJlY292ZXIoc2lnbmF0dXJlLCBtc2cuaGFzaCk7XG4gIH1cblxuICAvKipcbiAgICogQXNzZW1ibGUgdGhlIHBlcnNvbmFsIG1lc3NhZ2UgaGFzaFxuICAgKiBAcGFyYW0ge3N0cmluZ3xCdWZmZXJ9IG1lc3NhZ2UgLSBUaGUgb3JpZ2luIG1lc3NhZ2VcbiAgICogQHJldHVybiB7UGVyc29uYWxNZXNzYWdlfVxuICAgKi9cbiAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgIGNvbnN0IHBlcnNvbmFsTWVzc2FnZSA9IFBlcnNvbmFsTWVzc2FnZS5wZXJzb25hbE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgc3VwZXIocGVyc29uYWxNZXNzYWdlKTtcbiAgICB0aGlzLl9vcmlnaW5Nc2cgPSBtZXNzYWdlO1xuICAgIHRoaXMuX3BlcnNvbmFsTXNnID0gcGVyc29uYWxNZXNzYWdlO1xuICAgIHRoaXMuX3ByZWZpeCA9IFBSRUZJWDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBlcnNvbmFsTWVzc2FnZTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/PersonalMessage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/Transaction.js":
/*!********************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/Transaction.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { keccak256, ecdsaSign, ecdsaRecover, privateKeyToAddress, publicKeyToAddress } = __webpack_require__(/*! ./util/sign */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/sign.js\");\nconst rlp = __webpack_require__(/*! ./util/rlp */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/rlp.js\");\nconst format = __webpack_require__(/*! ./util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\nconst cfxFormat = __webpack_require__(/*! ./rpc/types/formatter */ \"(ssr)/./node_modules/js-conflux-sdk/src/rpc/types/formatter.js\");\nconst { AccessList } = __webpack_require__(/*! ./primitives/AccessList */ \"(ssr)/./node_modules/js-conflux-sdk/src/primitives/AccessList.js\");\nconst {\n  TXRLP_TYPE_PREFIX_2930,\n  TXRLP_TYPE_PREFIX_1559,\n  TRANSACTION_TYPE_LEGACY,\n  TRANSACTION_TYPE_EIP2930,\n  TRANSACTION_TYPE_EIP1559,\n} = __webpack_require__(/*! ./CONST */ \"(ssr)/./node_modules/js-conflux-sdk/src/CONST.js\");\n\n/**\n * @typedef {import('./rpc/types/formatter').CallRequest} TransactionMeta\n */\n\nclass Transaction {\n  /**\n   * Decode rlp encoded raw transaction hex string\n   * @param {string} raw - rlp encoded transaction hex string\n   * @returns {Transaction} A Transaction instance\n   */\n  static decodeRaw(raw) {\n    const buf = format.hexBuffer(raw);\n    const prefix = buf.slice(0, 4);\n    let tx = null;\n\n    if (prefix.equals(TXRLP_TYPE_PREFIX_2930)) {\n      tx = Transaction.decode2930(buf.slice(4));\n    } else if (prefix.equals(TXRLP_TYPE_PREFIX_1559)) {\n      tx = Transaction.decode1559(buf.slice(4));\n    } else {\n      tx = Transaction.decodeLegacy(raw);\n    }\n\n    const publicKey = tx.recover();\n    const hexAddress = publicKeyToAddress(format.hexBuffer(publicKey));\n    tx.from = format.address(hexAddress, tx.chainId);\n\n    return tx;\n  }\n\n  static formatTxMeta({ nonce, gas, to, value, storageLimit, epochHeight, chainId, data, r, s, v }) {\n    const chainIdNum = format.uInt(chainId);\n    return {\n      nonce: format.bigIntFromBuffer(nonce),\n      gas: format.bigIntFromBuffer(gas),\n      to: to.length === 0 ? null : format.address(to, chainIdNum),\n      value: format.bigIntFromBuffer(value),\n      storageLimit: format.bigIntFromBuffer(storageLimit),\n      epochHeight: format.bigIntFromBuffer(epochHeight),\n      chainId: chainIdNum,\n      data: format.hex(data),\n      v: v.length === 0 ? 0 : format.uInt(v),\n      r: format.hex(r),\n      s: format.hex(s),\n    };\n  }\n\n  static decodeLegacy(raw) {\n    const [\n      [nonce, gasPrice, gas, to, value, storageLimit, epochHeight, chainId, data],\n      v,\n      r,\n      s,\n    ] = rlp.decode(raw);\n\n    const formatedMeta = Transaction.formatTxMeta({ nonce, gas, to, value, storageLimit, epochHeight, chainId, data, r, s, v });\n    const tx = new Transaction({\n      type: TRANSACTION_TYPE_LEGACY,\n      gasPrice: format.bigIntFromBuffer(gasPrice),\n      ...formatedMeta,\n    });\n\n    return tx;\n  }\n\n  static decode2930(raw) {\n    const [\n      [nonce, gasPrice, gas, to, value, storageLimit, epochHeight, chainId, data, accessList],\n      v,\n      r,\n      s,\n    ] = rlp.decode(raw);\n\n    const formatedMeta = Transaction.formatTxMeta({ nonce, gas, to, value, storageLimit, epochHeight, chainId, data, r, s, v });\n    const tx = new Transaction({\n      type: TRANSACTION_TYPE_EIP2930,\n      gasPrice: format.bigIntFromBuffer(gasPrice),\n      accessList,\n      ...formatedMeta,\n    });\n\n    return tx;\n  }\n\n  static decode1559(raw) {\n    const [\n      [nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, storageLimit, epochHeight, chainId, data, accessList],\n      v,\n      r,\n      s,\n    ] = rlp.decode(raw);\n\n    const formatedMeta = Transaction.formatTxMeta({ nonce, gas, to, value, storageLimit, epochHeight, chainId, data, r, s, v });\n\n    const tx = new Transaction({\n      type: TRANSACTION_TYPE_EIP1559,\n      maxPriorityFeePerGas: format.bigIntFromBuffer(maxPriorityFeePerGas),\n      maxFeePerGas: format.bigIntFromBuffer(maxFeePerGas),\n      accessList,\n      ...formatedMeta,\n    });\n\n    return tx;\n  }\n\n  /**\n   * Create a transaction.\n   *\n   * @param {object} options\n   * @param {number} [options.type] - Tx type: 0 for legacy, 1 for EIP-2930, 2 for EIP-1559\n   * @param {string} [options.from] - The sender address.\n   * @param {string|number} [options.nonce] - This allows to overwrite your own pending transactions that use the same nonce.\n   * @param {string|number} [options.gasPrice] - The price of gas for this transaction in drip.\n   * @param {string|number} [options.gas]- The amount of gas to use for the transaction (unused gas is refunded).\n   * @param {string} [options.to] - The destination address of the message, left undefined for a contract-creation transaction.\n   * @param {string|number} [options.value] - The value transferred for the transaction in drip, also the endowment if it’s a contract-creation transaction.\n   * @param {string|number} [options.storageLimit] - The storage limit specified by the sender.\n   * @param {string|number} [options.epochHeight] - The epoch proposed by the sender. Note that this is NOT the epoch of the block containing this transaction.\n   * @param {string|number} [options.chainId] - The chain ID specified by the sender.\n   * @param {string|Buffer} [options.data]- Either a ABI byte string containing the data of the function call on a contract, or in the case of a contract-creation transaction the initialisation code.\n   * @param {string|Buffer} [options.r] - ECDSA signature r\n   * @param {string|Buffer} [options.s] - ECDSA signature s\n   * @param {number} [options.v] - ECDSA signature v\n   * @param {array} [options.accessList] - EIP-2930 access list\n   * @param {string|number} [options.maxPriorityFeePerGas] - EIP-1559 maxPriorityFeePerGas\n   * @param {string|number} [options.maxFeePerGas] - EIP-1559 maxFeePerGas\n   * @return {Transaction}\n   */\n  constructor({\n    type,\n    from,\n    nonce,\n    gasPrice,\n    gas,\n    to,\n    value,\n    storageLimit,\n    epochHeight,\n    chainId,\n    data,\n    v,\n    r,\n    s,\n    accessList,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n  }) {\n    this.type = type;\n    this.from = from;\n    this.nonce = nonce;\n    this.gasPrice = gasPrice;\n    this.gas = gas;\n    this.to = to;\n    this.value = value;\n    this.storageLimit = storageLimit;\n    this.epochHeight = epochHeight;\n    this.chainId = chainId;\n    this.data = data;\n    this.v = v;\n    this.r = r;\n    this.s = s;\n    this.accessList = accessList ? new AccessList(accessList) : undefined;\n    this.maxPriorityFeePerGas = maxPriorityFeePerGas;\n    this.maxFeePerGas = maxFeePerGas;\n  }\n\n  /**\n   * Getter of transaction hash include signature.\n   *\n   * > Note: calculate every time.\n   *\n   * @return {string|undefined} If transaction has r,s,v return hex string, else return undefined.\n   */\n  get hash() {\n    try {\n      return format.hex(keccak256(this.encode(true)));\n    } catch (e) {\n      return undefined;\n    }\n  }\n\n  /**\n   * Sign transaction and set 'r','s','v'.\n   *\n   * @param {string} privateKey - Private key hex string.\n   * @param {number} networkId - fullnode's network id.\n   * @return {Transaction}\n   */\n  sign(privateKey, networkId) {\n    const privateKeyBuffer = format.hexBuffer(privateKey);\n    const { r, s, v } = ecdsaSign(keccak256(this.encode(false)), privateKeyBuffer);\n    this.r = format.hex(r);\n    this.s = format.hex(s);\n    this.v = v;\n\n    const addressBuffer = privateKeyToAddress(privateKeyBuffer);\n    this.from = format.address(addressBuffer, networkId || this.chainId);\n\n    return this;\n  }\n\n  /**\n   * Recover public key from signed Transaction.\n   *\n   * @return {string}\n   */\n  recover() {\n    const publicKey = ecdsaRecover(keccak256(this.encode(false)), {\n      r: format.hexBuffer(this.r),\n      s: format.hexBuffer(this.s),\n      v: format.uInt(this.v),\n    });\n    return format.publicKey(publicKey);\n  }\n\n  /**\n   * Infer the transaction type from the fields.\n   * @returns {number} Transaction type\n   */\n  txType() {\n    if (this.type !== undefined) {\n      return this.type;\n    } else if (this.maxPriorityFeePerGas !== undefined && this.maxFeePerGas !== undefined) {\n      return TRANSACTION_TYPE_EIP1559;\n    } else if (this.accessList !== undefined) {\n      return TRANSACTION_TYPE_EIP2930;\n    } else {\n      return TRANSACTION_TYPE_LEGACY;\n    }\n  }\n\n  typePrefix() {\n    let prefix = Buffer.from([]);\n    if (this.txType() === TRANSACTION_TYPE_EIP2930) {\n      prefix = TXRLP_TYPE_PREFIX_2930;\n    } else if (this.txType() === TRANSACTION_TYPE_EIP1559) {\n      prefix = TXRLP_TYPE_PREFIX_1559;\n    }\n    return prefix;\n  }\n\n  encodeAccessList() {\n    return this.accessList ? this.accessList.encode() : [];\n  }\n\n  /**\n   * Encode rlp.\n   *\n   * @param {boolean} [includeSignature=false] - Whether or not to include the signature.\n   * @return {Buffer}\n   */\n  encode(includeSignature) {\n    let raw;\n    if (this.txType() === TRANSACTION_TYPE_LEGACY) { // legacy transaction\n      const { nonce, gasPrice, gas, to, value, storageLimit, epochHeight, chainId, data, v, r, s } = cfxFormat.signTx(this);\n\n      raw = includeSignature\n        ? [[nonce, gasPrice, gas, to, value, storageLimit, epochHeight, chainId, data], v, r, s]\n        : [nonce, gasPrice, gas, to, value, storageLimit, epochHeight, chainId, data];\n    } else if (this.txType() === TRANSACTION_TYPE_EIP2930) { // 2930 transaction\n      const { nonce, gasPrice, gas, to, value, storageLimit, epochHeight, chainId, data, v, r, s } = cfxFormat.signTx(this);\n      const accessList = this.encodeAccessList();\n\n      raw = includeSignature\n        ? [[nonce, gasPrice, gas, to, value, storageLimit, epochHeight, chainId, data, accessList], v, r, s]\n        : [nonce, gasPrice, gas, to, value, storageLimit, epochHeight, chainId, data, accessList];\n    } else if (this.txType() === TRANSACTION_TYPE_EIP1559) { // 1559 transaction\n      const { nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, storageLimit, epochHeight, chainId, data, v, r, s } = cfxFormat.sign1559Tx(this);\n      const accessList = this.encodeAccessList();\n\n      raw = includeSignature\n        ? [[nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, storageLimit, epochHeight, chainId, data, accessList], v, r, s]\n        : [nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, storageLimit, epochHeight, chainId, data, accessList];\n    } else {\n      throw new Error('Unsupported transaction type');\n    }\n    return Buffer.concat([this.typePrefix(), rlp.encode(raw)]);\n  }\n\n  /**\n   * Get the raw transaction hex string.\n   *\n   * @return {string} Hex string\n   */\n  serialize() {\n    return format.hex(this.encode(true));\n  }\n}\n\nmodule.exports = Transaction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/Transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/ContractABI.js":
/*!*****************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/ContractABI.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("class ContractABI {\n  constructor(contract) {\n    this.contract = contract;\n  }\n\n  decodeData(data) {\n    const method = this.contract[data.slice(0, 10)] || this.contract.constructor;\n\n    const tuple = method.decodeData(data);\n    if (!tuple) {\n      return undefined;\n    }\n\n    return {\n      name: method.name,\n      fullName: method.fullName,\n      type: method.type,\n      signature: method.signature,\n      array: [...tuple],\n      object: tuple.toObject(),\n    };\n  }\n\n  decodeLog(log) {\n    const event = this.contract[log.topics[0]];\n    if (!event) {\n      return undefined;\n    }\n\n    const tuple = event.decodeLog(log);\n    return {\n      name: event.name,\n      fullName: event.fullName,\n      type: event.type,\n      signature: event.signature,\n      array: [...tuple],\n      object: tuple.toObject(),\n    };\n  }\n}\n\nmodule.exports = ContractABI;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L0NvbnRyYWN0QUJJLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL3Zpa2FzaHlhZGF2L0RldmVsb3Blci9BbGxnaXRGaWxlcy9Db25mbHV4LVR4bi12aXN1YWxpemVyL25vZGVfbW9kdWxlcy9qcy1jb25mbHV4LXNkay9zcmMvY29udHJhY3QvQ29udHJhY3RBQkkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQ29udHJhY3RBQkkge1xuICBjb25zdHJ1Y3Rvcihjb250cmFjdCkge1xuICAgIHRoaXMuY29udHJhY3QgPSBjb250cmFjdDtcbiAgfVxuXG4gIGRlY29kZURhdGEoZGF0YSkge1xuICAgIGNvbnN0IG1ldGhvZCA9IHRoaXMuY29udHJhY3RbZGF0YS5zbGljZSgwLCAxMCldIHx8IHRoaXMuY29udHJhY3QuY29uc3RydWN0b3I7XG5cbiAgICBjb25zdCB0dXBsZSA9IG1ldGhvZC5kZWNvZGVEYXRhKGRhdGEpO1xuICAgIGlmICghdHVwbGUpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IG1ldGhvZC5uYW1lLFxuICAgICAgZnVsbE5hbWU6IG1ldGhvZC5mdWxsTmFtZSxcbiAgICAgIHR5cGU6IG1ldGhvZC50eXBlLFxuICAgICAgc2lnbmF0dXJlOiBtZXRob2Quc2lnbmF0dXJlLFxuICAgICAgYXJyYXk6IFsuLi50dXBsZV0sXG4gICAgICBvYmplY3Q6IHR1cGxlLnRvT2JqZWN0KCksXG4gICAgfTtcbiAgfVxuXG4gIGRlY29kZUxvZyhsb2cpIHtcbiAgICBjb25zdCBldmVudCA9IHRoaXMuY29udHJhY3RbbG9nLnRvcGljc1swXV07XG4gICAgaWYgKCFldmVudCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBjb25zdCB0dXBsZSA9IGV2ZW50LmRlY29kZUxvZyhsb2cpO1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBldmVudC5uYW1lLFxuICAgICAgZnVsbE5hbWU6IGV2ZW50LmZ1bGxOYW1lLFxuICAgICAgdHlwZTogZXZlbnQudHlwZSxcbiAgICAgIHNpZ25hdHVyZTogZXZlbnQuc2lnbmF0dXJlLFxuICAgICAgYXJyYXk6IFsuLi50dXBsZV0sXG4gICAgICBvYmplY3Q6IHR1cGxlLnRvT2JqZWN0KCksXG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbnRyYWN0QUJJO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/ContractABI.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/AddressCoder.js":
/*!**********************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/abi/AddressCoder.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { alignBuffer } = __webpack_require__(/*! ../../util */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\nconst format = __webpack_require__(/*! ../../util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\nconst BaseCoder = __webpack_require__(/*! ./BaseCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/BaseCoder.js\");\n\nclass AddressCoder extends BaseCoder {\n  static from({ type, ...options }) {\n    if (type !== 'address') {\n      return undefined;\n    }\n    return new this({ ...options, type });\n  }\n\n  constructor({ type, ...options }) {\n    super({ ...options, type });\n    this.networkId = options.networkId;\n  }\n\n  /**\n   * @param {string} address\n   * @return {Buffer}\n   */\n  encode(address) {\n    return alignBuffer(format.hexBuffer(format.hexAddress(address)));\n  }\n\n  /**\n   * @param {import('../../util/HexStream')} stream\n   * @return {string}\n   */\n  decode(stream) {\n    const hexAddress = stream.read(40);\n    const isConfluxAddress = hexAddress.startsWith('1') || hexAddress.startsWith('0') || hexAddress.startsWith('8');\n    return (isConfluxAddress && this.networkId) ? format.address(`0x${hexAddress}`, this.networkId) : format.hexAddress(`0x${hexAddress}`);\n  }\n}\n\nmodule.exports = AddressCoder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L2FiaS9BZGRyZXNzQ29kZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxjQUFjLEVBQUUsbUJBQU8sQ0FBQyx5RUFBWTtBQUM1QyxlQUFlLG1CQUFPLENBQUMsaUZBQW1CO0FBQzFDLGtCQUFrQixtQkFBTyxDQUFDLHNGQUFhOztBQUV2QztBQUNBLGdCQUFnQixrQkFBa0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGtCQUFrQjtBQUN4Qzs7QUFFQSxnQkFBZ0Isa0JBQWtCO0FBQ2xDLFlBQVksa0JBQWtCO0FBQzlCO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxnQ0FBZ0M7QUFDN0MsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0VBQXNFLFdBQVcsNENBQTRDLFdBQVc7QUFDeEk7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL3Zpa2FzaHlhZGF2L0RldmVsb3Blci9BbGxnaXRGaWxlcy9Db25mbHV4LVR4bi12aXN1YWxpemVyL25vZGVfbW9kdWxlcy9qcy1jb25mbHV4LXNkay9zcmMvY29udHJhY3QvYWJpL0FkZHJlc3NDb2Rlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGFsaWduQnVmZmVyIH0gPSByZXF1aXJlKCcuLi8uLi91dGlsJyk7XG5jb25zdCBmb3JtYXQgPSByZXF1aXJlKCcuLi8uLi91dGlsL2Zvcm1hdCcpO1xuY29uc3QgQmFzZUNvZGVyID0gcmVxdWlyZSgnLi9CYXNlQ29kZXInKTtcblxuY2xhc3MgQWRkcmVzc0NvZGVyIGV4dGVuZHMgQmFzZUNvZGVyIHtcbiAgc3RhdGljIGZyb20oeyB0eXBlLCAuLi5vcHRpb25zIH0pIHtcbiAgICBpZiAodHlwZSAhPT0gJ2FkZHJlc3MnKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHRoaXMoeyAuLi5vcHRpb25zLCB0eXBlIH0pO1xuICB9XG5cbiAgY29uc3RydWN0b3IoeyB0eXBlLCAuLi5vcHRpb25zIH0pIHtcbiAgICBzdXBlcih7IC4uLm9wdGlvbnMsIHR5cGUgfSk7XG4gICAgdGhpcy5uZXR3b3JrSWQgPSBvcHRpb25zLm5ldHdvcmtJZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYWRkcmVzc1xuICAgKiBAcmV0dXJuIHtCdWZmZXJ9XG4gICAqL1xuICBlbmNvZGUoYWRkcmVzcykge1xuICAgIHJldHVybiBhbGlnbkJ1ZmZlcihmb3JtYXQuaGV4QnVmZmVyKGZvcm1hdC5oZXhBZGRyZXNzKGFkZHJlc3MpKSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtpbXBvcnQoJy4uLy4uL3V0aWwvSGV4U3RyZWFtJyl9IHN0cmVhbVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBkZWNvZGUoc3RyZWFtKSB7XG4gICAgY29uc3QgaGV4QWRkcmVzcyA9IHN0cmVhbS5yZWFkKDQwKTtcbiAgICBjb25zdCBpc0NvbmZsdXhBZGRyZXNzID0gaGV4QWRkcmVzcy5zdGFydHNXaXRoKCcxJykgfHwgaGV4QWRkcmVzcy5zdGFydHNXaXRoKCcwJykgfHwgaGV4QWRkcmVzcy5zdGFydHNXaXRoKCc4Jyk7XG4gICAgcmV0dXJuIChpc0NvbmZsdXhBZGRyZXNzICYmIHRoaXMubmV0d29ya0lkKSA/IGZvcm1hdC5hZGRyZXNzKGAweCR7aGV4QWRkcmVzc31gLCB0aGlzLm5ldHdvcmtJZCkgOiBmb3JtYXQuaGV4QWRkcmVzcyhgMHgke2hleEFkZHJlc3N9YCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBZGRyZXNzQ29kZXI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/AddressCoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/ArrayCoder.js":
/*!********************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/abi/ArrayCoder.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const lodash = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nconst { assert } = __webpack_require__(/*! ../../util */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\nconst format = __webpack_require__(/*! ../../util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\nconst BaseCoder = __webpack_require__(/*! ./BaseCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/BaseCoder.js\");\nconst { uIntCoder } = __webpack_require__(/*! ./IntegerCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/IntegerCoder.js\");\nconst { pack, unpack } = __webpack_require__(/*! ./TupleCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/TupleCoder.js\");\n\nclass ArrayCoder extends BaseCoder {\n  static from({ type, components, ...options }, valueCoder) {\n    const match = type.match(/^(.*)\\[([0-9]*)]$/);\n    if (!match) {\n      return undefined;\n    }\n\n    const [, subType, size] = match;\n    return new this({\n      ...options,\n      coder: valueCoder({ type: subType, components, ...options }),\n      size: size ? parseInt(size, 10) : undefined,\n    });\n  }\n\n  constructor({ name, coder, size }) {\n    if (size !== undefined) {\n      assert(Number.isInteger(size) && 0 < size, {\n        message: 'invalid size',\n        expect: 'integer && >0',\n        got: size,\n        coder: { name },\n      });\n    }\n\n    super({ name });\n    this.type = `${coder.type}[${size > 0 ? size : ''}]`;\n    this.size = size;\n    this.coder = coder;\n    this.dynamic = Boolean(size === undefined) || coder.dynamic;\n  }\n\n  /**\n   * @param {array} array\n   * @return {Buffer}\n   */\n  encode(array) {\n    assert(Array.isArray(array), {\n      message: 'unexpected type',\n      expect: 'array',\n      got: typeof array,\n      coder: this,\n    });\n\n    if (this.size !== undefined) {\n      assert(array.length === this.size, {\n        message: 'length not match',\n        expect: this.size,\n        got: array.length,\n        coder: this,\n      });\n    }\n\n    const coders = lodash.range(array.length).map(() => this.coder);\n    let buffer = pack(coders, array);\n    if (this.size === undefined) {\n      buffer = Buffer.concat([uIntCoder.encode(array.length), buffer]);\n    }\n    return buffer;\n  }\n\n  /**\n   * @param {import('../../util/HexStream')} stream\n   * @return {array}\n   */\n  decode(stream) {\n    let length = this.size;\n\n    if (length === undefined) {\n      length = format.uInt(uIntCoder.decode(stream)); // XXX: BigInt => Number, for length is enough.\n    }\n\n    const coders = lodash.range(length).map(() => this.coder);\n    return unpack(coders, stream);\n  }\n\n  encodeTopic(value) {\n    try {\n      return format.hex64(value);\n    } catch (e) {\n      // TODO https://solidity.readthedocs.io/en/v0.7.4/abi-spec.html#encoding-of-indexed-event-parameters\n      throw new Error('not supported encode array to index');\n    }\n  }\n\n  decodeTopic(hex) {\n    return hex;\n  }\n}\n\nmodule.exports = ArrayCoder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L2FiaS9BcnJheUNvZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLGVBQWUsbUJBQU8sQ0FBQyxxREFBUTtBQUMvQixRQUFRLFNBQVMsRUFBRSxtQkFBTyxDQUFDLHlFQUFZO0FBQ3ZDLGVBQWUsbUJBQU8sQ0FBQyxpRkFBbUI7QUFDMUMsa0JBQWtCLG1CQUFPLENBQUMsc0ZBQWE7QUFDdkMsUUFBUSxZQUFZLEVBQUUsbUJBQU8sQ0FBQyw0RkFBZ0I7QUFDOUMsUUFBUSxlQUFlLEVBQUUsbUJBQU8sQ0FBQyx3RkFBYzs7QUFFL0M7QUFDQSxnQkFBZ0IsOEJBQThCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQix1Q0FBdUM7QUFDakU7QUFDQSxLQUFLO0FBQ0w7O0FBRUEsZ0JBQWdCLG1CQUFtQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE1BQU07QUFDdkIsT0FBTztBQUNQOztBQUVBLFlBQVksTUFBTTtBQUNsQixtQkFBbUIsV0FBVyxHQUFHLHFCQUFxQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsT0FBTztBQUNwQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsZ0NBQWdDO0FBQzdDLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzREFBc0Q7QUFDdEQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL3Zpa2FzaHlhZGF2L0RldmVsb3Blci9BbGxnaXRGaWxlcy9Db25mbHV4LVR4bi12aXN1YWxpemVyL25vZGVfbW9kdWxlcy9qcy1jb25mbHV4LXNkay9zcmMvY29udHJhY3QvYWJpL0FycmF5Q29kZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbG9kYXNoID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5jb25zdCB7IGFzc2VydCB9ID0gcmVxdWlyZSgnLi4vLi4vdXRpbCcpO1xuY29uc3QgZm9ybWF0ID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9mb3JtYXQnKTtcbmNvbnN0IEJhc2VDb2RlciA9IHJlcXVpcmUoJy4vQmFzZUNvZGVyJyk7XG5jb25zdCB7IHVJbnRDb2RlciB9ID0gcmVxdWlyZSgnLi9JbnRlZ2VyQ29kZXInKTtcbmNvbnN0IHsgcGFjaywgdW5wYWNrIH0gPSByZXF1aXJlKCcuL1R1cGxlQ29kZXInKTtcblxuY2xhc3MgQXJyYXlDb2RlciBleHRlbmRzIEJhc2VDb2RlciB7XG4gIHN0YXRpYyBmcm9tKHsgdHlwZSwgY29tcG9uZW50cywgLi4ub3B0aW9ucyB9LCB2YWx1ZUNvZGVyKSB7XG4gICAgY29uc3QgbWF0Y2ggPSB0eXBlLm1hdGNoKC9eKC4qKVxcWyhbMC05XSopXSQvKTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGNvbnN0IFssIHN1YlR5cGUsIHNpemVdID0gbWF0Y2g7XG4gICAgcmV0dXJuIG5ldyB0aGlzKHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBjb2RlcjogdmFsdWVDb2Rlcih7IHR5cGU6IHN1YlR5cGUsIGNvbXBvbmVudHMsIC4uLm9wdGlvbnMgfSksXG4gICAgICBzaXplOiBzaXplID8gcGFyc2VJbnQoc2l6ZSwgMTApIDogdW5kZWZpbmVkLFxuICAgIH0pO1xuICB9XG5cbiAgY29uc3RydWN0b3IoeyBuYW1lLCBjb2Rlciwgc2l6ZSB9KSB7XG4gICAgaWYgKHNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYXNzZXJ0KE51bWJlci5pc0ludGVnZXIoc2l6ZSkgJiYgMCA8IHNpemUsIHtcbiAgICAgICAgbWVzc2FnZTogJ2ludmFsaWQgc2l6ZScsXG4gICAgICAgIGV4cGVjdDogJ2ludGVnZXIgJiYgPjAnLFxuICAgICAgICBnb3Q6IHNpemUsXG4gICAgICAgIGNvZGVyOiB7IG5hbWUgfSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHN1cGVyKHsgbmFtZSB9KTtcbiAgICB0aGlzLnR5cGUgPSBgJHtjb2Rlci50eXBlfVske3NpemUgPiAwID8gc2l6ZSA6ICcnfV1gO1xuICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gICAgdGhpcy5jb2RlciA9IGNvZGVyO1xuICAgIHRoaXMuZHluYW1pYyA9IEJvb2xlYW4oc2l6ZSA9PT0gdW5kZWZpbmVkKSB8fCBjb2Rlci5keW5hbWljO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7YXJyYXl9IGFycmF5XG4gICAqIEByZXR1cm4ge0J1ZmZlcn1cbiAgICovXG4gIGVuY29kZShhcnJheSkge1xuICAgIGFzc2VydChBcnJheS5pc0FycmF5KGFycmF5KSwge1xuICAgICAgbWVzc2FnZTogJ3VuZXhwZWN0ZWQgdHlwZScsXG4gICAgICBleHBlY3Q6ICdhcnJheScsXG4gICAgICBnb3Q6IHR5cGVvZiBhcnJheSxcbiAgICAgIGNvZGVyOiB0aGlzLFxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuc2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBhc3NlcnQoYXJyYXkubGVuZ3RoID09PSB0aGlzLnNpemUsIHtcbiAgICAgICAgbWVzc2FnZTogJ2xlbmd0aCBub3QgbWF0Y2gnLFxuICAgICAgICBleHBlY3Q6IHRoaXMuc2l6ZSxcbiAgICAgICAgZ290OiBhcnJheS5sZW5ndGgsXG4gICAgICAgIGNvZGVyOiB0aGlzLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgY29kZXJzID0gbG9kYXNoLnJhbmdlKGFycmF5Lmxlbmd0aCkubWFwKCgpID0+IHRoaXMuY29kZXIpO1xuICAgIGxldCBidWZmZXIgPSBwYWNrKGNvZGVycywgYXJyYXkpO1xuICAgIGlmICh0aGlzLnNpemUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgYnVmZmVyID0gQnVmZmVyLmNvbmNhdChbdUludENvZGVyLmVuY29kZShhcnJheS5sZW5ndGgpLCBidWZmZXJdKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vdXRpbC9IZXhTdHJlYW0nKX0gc3RyZWFtXG4gICAqIEByZXR1cm4ge2FycmF5fVxuICAgKi9cbiAgZGVjb2RlKHN0cmVhbSkge1xuICAgIGxldCBsZW5ndGggPSB0aGlzLnNpemU7XG5cbiAgICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGxlbmd0aCA9IGZvcm1hdC51SW50KHVJbnRDb2Rlci5kZWNvZGUoc3RyZWFtKSk7IC8vIFhYWDogQmlnSW50ID0+IE51bWJlciwgZm9yIGxlbmd0aCBpcyBlbm91Z2guXG4gICAgfVxuXG4gICAgY29uc3QgY29kZXJzID0gbG9kYXNoLnJhbmdlKGxlbmd0aCkubWFwKCgpID0+IHRoaXMuY29kZXIpO1xuICAgIHJldHVybiB1bnBhY2soY29kZXJzLCBzdHJlYW0pO1xuICB9XG5cbiAgZW5jb2RlVG9waWModmFsdWUpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZvcm1hdC5oZXg2NCh2YWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gVE9ETyBodHRwczovL3NvbGlkaXR5LnJlYWR0aGVkb2NzLmlvL2VuL3YwLjcuNC9hYmktc3BlYy5odG1sI2VuY29kaW5nLW9mLWluZGV4ZWQtZXZlbnQtcGFyYW1ldGVyc1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3Qgc3VwcG9ydGVkIGVuY29kZSBhcnJheSB0byBpbmRleCcpO1xuICAgIH1cbiAgfVxuXG4gIGRlY29kZVRvcGljKGhleCkge1xuICAgIHJldHVybiBoZXg7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheUNvZGVyO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/ArrayCoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/BaseCoder.js":
/*!*******************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/abi/BaseCoder.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const HexStream = __webpack_require__(/*! ../../util/HexStream */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/HexStream.js\");\n\nclass BaseCoder {\n  static from(component) {} // eslint-disable-line no-unused-vars\n\n  constructor({ type, name }) {\n    this.type = type;\n    this.name = name;\n    this.dynamic = false;\n  }\n\n  /**\n   * @param {boolean} [value]\n   * @return {Buffer}\n   */\n  encode(value) { // eslint-disable-line no-unused-vars\n    throw new Error(`${this.constructor.name}.encode not implemented`);\n  }\n\n  /**\n   * @param {import('../../util/HexStream')} stream\n   * @return {boolean}\n   */\n  decode(stream) { // eslint-disable-line no-unused-vars\n    throw new Error(`${this.constructor.name}.decode not implemented`);\n  }\n\n  encodeTopic(value) {\n    return this.encode(value);\n  }\n\n  decodeTopic(hex) {\n    const stream = new HexStream(hex);\n    return this.decode(stream);\n  }\n}\n\nmodule.exports = BaseCoder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L2FiaS9CYXNlQ29kZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCLG1CQUFPLENBQUMsdUZBQXNCOztBQUVoRDtBQUNBLDRCQUE0Qjs7QUFFNUIsZ0JBQWdCLFlBQVk7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLFNBQVM7QUFDdEIsY0FBYztBQUNkO0FBQ0Esa0JBQWtCO0FBQ2xCLHVCQUF1QixzQkFBc0I7QUFDN0M7O0FBRUE7QUFDQSxhQUFhLGdDQUFnQztBQUM3QyxjQUFjO0FBQ2Q7QUFDQSxtQkFBbUI7QUFDbkIsdUJBQXVCLHNCQUFzQjtBQUM3Qzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL3Zpa2FzaHlhZGF2L0RldmVsb3Blci9BbGxnaXRGaWxlcy9Db25mbHV4LVR4bi12aXN1YWxpemVyL25vZGVfbW9kdWxlcy9qcy1jb25mbHV4LXNkay9zcmMvY29udHJhY3QvYWJpL0Jhc2VDb2Rlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBIZXhTdHJlYW0gPSByZXF1aXJlKCcuLi8uLi91dGlsL0hleFN0cmVhbScpO1xuXG5jbGFzcyBCYXNlQ29kZXIge1xuICBzdGF0aWMgZnJvbShjb21wb25lbnQpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuICBjb25zdHJ1Y3Rvcih7IHR5cGUsIG5hbWUgfSkge1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmR5bmFtaWMgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFt2YWx1ZV1cbiAgICogQHJldHVybiB7QnVmZmVyfVxuICAgKi9cbiAgZW5jb2RlKHZhbHVlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfS5lbmNvZGUgbm90IGltcGxlbWVudGVkYCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtpbXBvcnQoJy4uLy4uL3V0aWwvSGV4U3RyZWFtJyl9IHN0cmVhbVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgZGVjb2RlKHN0cmVhbSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdGhyb3cgbmV3IEVycm9yKGAke3RoaXMuY29uc3RydWN0b3IubmFtZX0uZGVjb2RlIG5vdCBpbXBsZW1lbnRlZGApO1xuICB9XG5cbiAgZW5jb2RlVG9waWModmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5lbmNvZGUodmFsdWUpO1xuICB9XG5cbiAgZGVjb2RlVG9waWMoaGV4KSB7XG4gICAgY29uc3Qgc3RyZWFtID0gbmV3IEhleFN0cmVhbShoZXgpO1xuICAgIHJldHVybiB0aGlzLmRlY29kZShzdHJlYW0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZUNvZGVyO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/BaseCoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/BoolCoder.js":
/*!*******************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/abi/BoolCoder.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const lodash = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nconst { assert } = __webpack_require__(/*! ../../util */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\nconst JSBI = __webpack_require__(/*! ../../util/jsbi */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/jsbi.js\");\nconst IntegerCoder = __webpack_require__(/*! ./IntegerCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/IntegerCoder.js\");\n\nclass BoolCoder extends IntegerCoder {\n  static from({ type, ...options }) {\n    if (type !== 'bool') {\n      return undefined;\n    }\n    return new this({ ...options, type });\n  }\n\n  constructor({ type, name }) {\n    super({ name });\n    this.type = type;\n  }\n\n  /**\n   * @param {boolean} value\n   * @return {Buffer}\n   */\n  encode(value) {\n    assert(lodash.isBoolean(value), {\n      message: 'unexpected type',\n      expect: 'boolean',\n      got: value,\n      coder: this,\n    });\n\n    return super.encode(value ? 1 : 0);\n  }\n\n  /**\n   * @param {import('../../util/HexStream')} stream\n   * @return {boolean}\n   */\n  decode(stream) {\n    return JSBI.notEqual(super.decode(stream), JSBI.BigInt(0));\n  }\n}\n\nmodule.exports = BoolCoder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L2FiaS9Cb29sQ29kZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLHFEQUFRO0FBQy9CLFFBQVEsU0FBUyxFQUFFLG1CQUFPLENBQUMseUVBQVk7QUFDdkMsYUFBYSxtQkFBTyxDQUFDLDZFQUFpQjtBQUN0QyxxQkFBcUIsbUJBQU8sQ0FBQyw0RkFBZ0I7O0FBRTdDO0FBQ0EsZ0JBQWdCLGtCQUFrQjtBQUNsQztBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isa0JBQWtCO0FBQ3hDOztBQUVBLGdCQUFnQixZQUFZO0FBQzVCLFlBQVksTUFBTTtBQUNsQjtBQUNBOztBQUVBO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBLGFBQWEsZ0NBQWdDO0FBQzdDLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvdmlrYXNoeWFkYXYvRGV2ZWxvcGVyL0FsbGdpdEZpbGVzL0NvbmZsdXgtVHhuLXZpc3VhbGl6ZXIvbm9kZV9tb2R1bGVzL2pzLWNvbmZsdXgtc2RrL3NyYy9jb250cmFjdC9hYmkvQm9vbENvZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGxvZGFzaCA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuY29uc3QgeyBhc3NlcnQgfSA9IHJlcXVpcmUoJy4uLy4uL3V0aWwnKTtcbmNvbnN0IEpTQkkgPSByZXF1aXJlKCcuLi8uLi91dGlsL2pzYmknKTtcbmNvbnN0IEludGVnZXJDb2RlciA9IHJlcXVpcmUoJy4vSW50ZWdlckNvZGVyJyk7XG5cbmNsYXNzIEJvb2xDb2RlciBleHRlbmRzIEludGVnZXJDb2RlciB7XG4gIHN0YXRpYyBmcm9tKHsgdHlwZSwgLi4ub3B0aW9ucyB9KSB7XG4gICAgaWYgKHR5cGUgIT09ICdib29sJykge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyB0aGlzKHsgLi4ub3B0aW9ucywgdHlwZSB9KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHsgdHlwZSwgbmFtZSB9KSB7XG4gICAgc3VwZXIoeyBuYW1lIH0pO1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuICAgKiBAcmV0dXJuIHtCdWZmZXJ9XG4gICAqL1xuICBlbmNvZGUodmFsdWUpIHtcbiAgICBhc3NlcnQobG9kYXNoLmlzQm9vbGVhbih2YWx1ZSksIHtcbiAgICAgIG1lc3NhZ2U6ICd1bmV4cGVjdGVkIHR5cGUnLFxuICAgICAgZXhwZWN0OiAnYm9vbGVhbicsXG4gICAgICBnb3Q6IHZhbHVlLFxuICAgICAgY29kZXI6IHRoaXMsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3VwZXIuZW5jb2RlKHZhbHVlID8gMSA6IDApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuLi8uLi91dGlsL0hleFN0cmVhbScpfSBzdHJlYW1cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGRlY29kZShzdHJlYW0pIHtcbiAgICByZXR1cm4gSlNCSS5ub3RFcXVhbChzdXBlci5kZWNvZGUoc3RyZWFtKSwgSlNCSS5CaWdJbnQoMCkpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQm9vbENvZGVyO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/BoolCoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/BytesCoder.js":
/*!********************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/abi/BytesCoder.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { WORD_BYTES } = __webpack_require__(/*! ../../CONST */ \"(ssr)/./node_modules/js-conflux-sdk/src/CONST.js\");\nconst { assert, alignBuffer } = __webpack_require__(/*! ../../util */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\nconst format = __webpack_require__(/*! ../../util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\nconst sign = __webpack_require__(/*! ../../util/sign */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/sign.js\");\nconst BaseCoder = __webpack_require__(/*! ./BaseCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/BaseCoder.js\");\nconst { uIntCoder } = __webpack_require__(/*! ./IntegerCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/IntegerCoder.js\");\n\nclass BytesCoder extends BaseCoder {\n  static from({ type, ...options }) {\n    const match = type.match(/^bytes([0-9]*)$/);\n    if (!match) {\n      return undefined;\n    }\n\n    const [, size] = match;\n    return new this({\n      ...options,\n      size: size ? parseInt(size, 10) : undefined,\n    });\n  }\n\n  constructor({ name, size, _decodeToHex }) {\n    if (size !== undefined) {\n      assert(Number.isInteger(size) && size <= WORD_BYTES, {\n        message: 'invalid size',\n        expect: `integer && <=${WORD_BYTES}`,\n        got: size,\n        coder: { name },\n      });\n    }\n\n    super({ name });\n    this.type = `bytes${size > 0 ? size : ''}`;\n    this.size = size;\n    this.dynamic = Boolean(size === undefined);\n    this._decodeToHex = _decodeToHex;\n  }\n\n  /**\n   * @param {any[]|string} value\n   * @return {Buffer}\n   */\n  encode(value) {\n    value = format.bytes(value);\n\n    if (this.size !== undefined && this.size !== value.length) {\n      if (value.length < this.size) {\n        // if short than the expect size, auto complete it\n        value = Buffer.concat([value, Buffer.alloc(this.size - value.length)]);\n      } else {\n        assert(false, {\n          message: 'length not match',\n          expect: this.size,\n          got: value.length,\n          coder: this,\n        });\n      }\n    }\n\n    let buffer = alignBuffer(value, true);\n    if (this.size === undefined) {\n      buffer = Buffer.concat([uIntCoder.encode(value.length), buffer]);\n    }\n    return buffer;\n  }\n\n  /**\n   * @param {import('../../util/HexStream')} stream\n   * @return {Buffer}\n   */\n  decode(stream) {\n    let length = this.size;\n    if (length === undefined) {\n      length = format.uInt(uIntCoder.decode(stream)); // XXX: BigInt => Number, for length is enough.\n    }\n\n    if (this._decodeToHex) {\n      return `0x${stream.read(length * 2, true)}`;\n    }\n\n    return Buffer.from(stream.read(length * 2, true), 'hex');\n  }\n\n  encodeTopic(value) {\n    assert(Buffer.isBuffer(value), {\n      message: 'value type error',\n      expect: Buffer.name,\n      got: value.constructor.name,\n      coder: this,\n    });\n\n    return sign.keccak256(value);\n  }\n\n  decodeTopic(hex) {\n    return hex;\n  }\n}\n\nmodule.exports = BytesCoder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L2FiaS9CeXRlc0NvZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLFFBQVEsYUFBYSxFQUFFLG1CQUFPLENBQUMscUVBQWE7QUFDNUMsUUFBUSxzQkFBc0IsRUFBRSxtQkFBTyxDQUFDLHlFQUFZO0FBQ3BELGVBQWUsbUJBQU8sQ0FBQyxpRkFBbUI7QUFDMUMsYUFBYSxtQkFBTyxDQUFDLDZFQUFpQjtBQUN0QyxrQkFBa0IsbUJBQU8sQ0FBQyxzRkFBYTtBQUN2QyxRQUFRLFlBQVksRUFBRSxtQkFBTyxDQUFDLDRGQUFnQjs7QUFFOUM7QUFDQSxnQkFBZ0Isa0JBQWtCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBLGdCQUFnQiwwQkFBMEI7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLFdBQVc7QUFDM0M7QUFDQSxpQkFBaUIsTUFBTTtBQUN2QixPQUFPO0FBQ1A7O0FBRUEsWUFBWSxNQUFNO0FBQ2xCLHdCQUF3QixxQkFBcUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLGNBQWM7QUFDM0IsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxnQ0FBZ0M7QUFDN0MsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REOztBQUVBO0FBQ0Esa0JBQWtCLDhCQUE4QjtBQUNoRDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL3Zpa2FzaHlhZGF2L0RldmVsb3Blci9BbGxnaXRGaWxlcy9Db25mbHV4LVR4bi12aXN1YWxpemVyL25vZGVfbW9kdWxlcy9qcy1jb25mbHV4LXNkay9zcmMvY29udHJhY3QvYWJpL0J5dGVzQ29kZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBXT1JEX0JZVEVTIH0gPSByZXF1aXJlKCcuLi8uLi9DT05TVCcpO1xuY29uc3QgeyBhc3NlcnQsIGFsaWduQnVmZmVyIH0gPSByZXF1aXJlKCcuLi8uLi91dGlsJyk7XG5jb25zdCBmb3JtYXQgPSByZXF1aXJlKCcuLi8uLi91dGlsL2Zvcm1hdCcpO1xuY29uc3Qgc2lnbiA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvc2lnbicpO1xuY29uc3QgQmFzZUNvZGVyID0gcmVxdWlyZSgnLi9CYXNlQ29kZXInKTtcbmNvbnN0IHsgdUludENvZGVyIH0gPSByZXF1aXJlKCcuL0ludGVnZXJDb2RlcicpO1xuXG5jbGFzcyBCeXRlc0NvZGVyIGV4dGVuZHMgQmFzZUNvZGVyIHtcbiAgc3RhdGljIGZyb20oeyB0eXBlLCAuLi5vcHRpb25zIH0pIHtcbiAgICBjb25zdCBtYXRjaCA9IHR5cGUubWF0Y2goL15ieXRlcyhbMC05XSopJC8pO1xuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY29uc3QgWywgc2l6ZV0gPSBtYXRjaDtcbiAgICByZXR1cm4gbmV3IHRoaXMoe1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHNpemU6IHNpemUgPyBwYXJzZUludChzaXplLCAxMCkgOiB1bmRlZmluZWQsXG4gICAgfSk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcih7IG5hbWUsIHNpemUsIF9kZWNvZGVUb0hleCB9KSB7XG4gICAgaWYgKHNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYXNzZXJ0KE51bWJlci5pc0ludGVnZXIoc2l6ZSkgJiYgc2l6ZSA8PSBXT1JEX0JZVEVTLCB7XG4gICAgICAgIG1lc3NhZ2U6ICdpbnZhbGlkIHNpemUnLFxuICAgICAgICBleHBlY3Q6IGBpbnRlZ2VyICYmIDw9JHtXT1JEX0JZVEVTfWAsXG4gICAgICAgIGdvdDogc2l6ZSxcbiAgICAgICAgY29kZXI6IHsgbmFtZSB9LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3VwZXIoeyBuYW1lIH0pO1xuICAgIHRoaXMudHlwZSA9IGBieXRlcyR7c2l6ZSA+IDAgPyBzaXplIDogJyd9YDtcbiAgICB0aGlzLnNpemUgPSBzaXplO1xuICAgIHRoaXMuZHluYW1pYyA9IEJvb2xlYW4oc2l6ZSA9PT0gdW5kZWZpbmVkKTtcbiAgICB0aGlzLl9kZWNvZGVUb0hleCA9IF9kZWNvZGVUb0hleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2FueVtdfHN0cmluZ30gdmFsdWVcbiAgICogQHJldHVybiB7QnVmZmVyfVxuICAgKi9cbiAgZW5jb2RlKHZhbHVlKSB7XG4gICAgdmFsdWUgPSBmb3JtYXQuYnl0ZXModmFsdWUpO1xuXG4gICAgaWYgKHRoaXMuc2l6ZSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuc2l6ZSAhPT0gdmFsdWUubGVuZ3RoKSB7XG4gICAgICBpZiAodmFsdWUubGVuZ3RoIDwgdGhpcy5zaXplKSB7XG4gICAgICAgIC8vIGlmIHNob3J0IHRoYW4gdGhlIGV4cGVjdCBzaXplLCBhdXRvIGNvbXBsZXRlIGl0XG4gICAgICAgIHZhbHVlID0gQnVmZmVyLmNvbmNhdChbdmFsdWUsIEJ1ZmZlci5hbGxvYyh0aGlzLnNpemUgLSB2YWx1ZS5sZW5ndGgpXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhc3NlcnQoZmFsc2UsIHtcbiAgICAgICAgICBtZXNzYWdlOiAnbGVuZ3RoIG5vdCBtYXRjaCcsXG4gICAgICAgICAgZXhwZWN0OiB0aGlzLnNpemUsXG4gICAgICAgICAgZ290OiB2YWx1ZS5sZW5ndGgsXG4gICAgICAgICAgY29kZXI6IHRoaXMsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBidWZmZXIgPSBhbGlnbkJ1ZmZlcih2YWx1ZSwgdHJ1ZSk7XG4gICAgaWYgKHRoaXMuc2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBidWZmZXIgPSBCdWZmZXIuY29uY2F0KFt1SW50Q29kZXIuZW5jb2RlKHZhbHVlLmxlbmd0aCksIGJ1ZmZlcl0pO1xuICAgIH1cbiAgICByZXR1cm4gYnVmZmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuLi8uLi91dGlsL0hleFN0cmVhbScpfSBzdHJlYW1cbiAgICogQHJldHVybiB7QnVmZmVyfVxuICAgKi9cbiAgZGVjb2RlKHN0cmVhbSkge1xuICAgIGxldCBsZW5ndGggPSB0aGlzLnNpemU7XG4gICAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBsZW5ndGggPSBmb3JtYXQudUludCh1SW50Q29kZXIuZGVjb2RlKHN0cmVhbSkpOyAvLyBYWFg6IEJpZ0ludCA9PiBOdW1iZXIsIGZvciBsZW5ndGggaXMgZW5vdWdoLlxuICAgIH1cblxuICAgIGlmICh0aGlzLl9kZWNvZGVUb0hleCkge1xuICAgICAgcmV0dXJuIGAweCR7c3RyZWFtLnJlYWQobGVuZ3RoICogMiwgdHJ1ZSl9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gQnVmZmVyLmZyb20oc3RyZWFtLnJlYWQobGVuZ3RoICogMiwgdHJ1ZSksICdoZXgnKTtcbiAgfVxuXG4gIGVuY29kZVRvcGljKHZhbHVlKSB7XG4gICAgYXNzZXJ0KEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSksIHtcbiAgICAgIG1lc3NhZ2U6ICd2YWx1ZSB0eXBlIGVycm9yJyxcbiAgICAgIGV4cGVjdDogQnVmZmVyLm5hbWUsXG4gICAgICBnb3Q6IHZhbHVlLmNvbnN0cnVjdG9yLm5hbWUsXG4gICAgICBjb2RlcjogdGhpcyxcbiAgICB9KTtcblxuICAgIHJldHVybiBzaWduLmtlY2NhazI1Nih2YWx1ZSk7XG4gIH1cblxuICBkZWNvZGVUb3BpYyhoZXgpIHtcbiAgICByZXR1cm4gaGV4O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQnl0ZXNDb2RlcjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/BytesCoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/IntegerCoder.js":
/*!**********************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/abi/IntegerCoder.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { UINT_BOUND } = __webpack_require__(/*! ../../CONST */ \"(ssr)/./node_modules/js-conflux-sdk/src/CONST.js\");\nconst { assert, alignBuffer } = __webpack_require__(/*! ../../util */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\nconst format = __webpack_require__(/*! ../../util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\nconst JSBI = __webpack_require__(/*! ../../util/jsbi */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/jsbi.js\");\nconst BaseCoder = __webpack_require__(/*! ./BaseCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/BaseCoder.js\");\n\nclass IntegerCoder extends BaseCoder {\n  static from({ type, ...options }) {\n    const match = type.match(/^(int|uint)([0-9]*)$/);\n    if (!match) {\n      return undefined;\n    }\n\n    const [, label, bits] = match;\n    return new this({\n      ...options,\n      type: label,\n      signed: !label.startsWith('u'),\n      bits: bits ? parseInt(bits, 10) : undefined,\n    });\n  }\n\n  constructor({ name, type, signed = false, bits = 256 }) {\n    assert(Number.isInteger(bits) && 0 < bits && bits <= 256 && (bits % 8 === 0), {\n      message: 'invalid bits',\n      expect: 'integer && 0<bits<=256 && bits%8==0',\n      got: bits,\n      coder: { name, type, signed },\n    });\n\n    super({ name });\n    this.type = `${type}${bits}`;\n    this.signed = signed;\n    this.size = bits / 8;\n    this.bound = JSBI.leftShift(JSBI.BigInt(1), JSBI.BigInt(bits - (this.signed ? 1 : 0)));\n  }\n\n  /**\n   * @param {number|JSBI|string} value - FIXME: it is not a good idea to accept string as number\n   * @return {Buffer}\n   */\n  encode(value) {\n    let number = format.bigInt(value);\n    let twosComplement = number;\n\n    if (this.signed && JSBI.LT(number, JSBI.BigInt(0))) {\n      twosComplement = JSBI.add(number, this.bound);\n      number = JSBI.add(number, UINT_BOUND);\n    }\n\n    assert(JSBI.LE(JSBI.BigInt(0), twosComplement) && JSBI.LT(twosComplement, this.bound), {\n      message: 'bound error',\n      expect: `0<= && <${this.bound}`,\n      got: twosComplement.toString(),\n      coder: this,\n      value,\n    });\n\n    return alignBuffer(format.hexBuffer(number));\n  }\n\n  /**\n   * @param {import('../../util/HexStream')} stream\n   * @return {BigInt}\n   */\n  decode(stream) {\n    let value = JSBI.BigInt(`0x${stream.read(this.size * 2)}`); // 16: read out naked hex string\n\n    if (this.signed && JSBI.GE(value, this.bound)) {\n      const mask = JSBI.leftShift(JSBI.BigInt(1), JSBI.BigInt(this.size * 8));\n      value = JSBI.subtract(value, mask);\n    }\n\n    return JSBI.BigInt(value);\n  }\n}\n\nmodule.exports = IntegerCoder;\nmodule.exports.uIntCoder = new IntegerCoder({ type: 'uint' });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L2FiaS9JbnRlZ2VyQ29kZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxhQUFhLEVBQUUsbUJBQU8sQ0FBQyxxRUFBYTtBQUM1QyxRQUFRLHNCQUFzQixFQUFFLG1CQUFPLENBQUMseUVBQVk7QUFDcEQsZUFBZSxtQkFBTyxDQUFDLGlGQUFtQjtBQUMxQyxhQUFhLG1CQUFPLENBQUMsNkVBQWlCO0FBQ3RDLGtCQUFrQixtQkFBTyxDQUFDLHNGQUFhOztBQUV2QztBQUNBLGdCQUFnQixrQkFBa0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBLGdCQUFnQix3Q0FBd0M7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9CQUFvQjtBQUNuQyxLQUFLOztBQUVMLFlBQVksTUFBTTtBQUNsQixtQkFBbUIsS0FBSyxFQUFFLEtBQUs7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLG9CQUFvQjtBQUNqQyxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHlCQUF5QixXQUFXO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBLGFBQWEsZ0NBQWdDO0FBQzdDLGNBQWM7QUFDZDtBQUNBO0FBQ0EsaUNBQWlDLDJCQUEyQixJQUFJOztBQUVoRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0Isc0JBQXNCLGNBQWMiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWthc2h5YWRhdi9EZXZlbG9wZXIvQWxsZ2l0RmlsZXMvQ29uZmx1eC1UeG4tdmlzdWFsaXplci9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L2FiaS9JbnRlZ2VyQ29kZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBVSU5UX0JPVU5EIH0gPSByZXF1aXJlKCcuLi8uLi9DT05TVCcpO1xuY29uc3QgeyBhc3NlcnQsIGFsaWduQnVmZmVyIH0gPSByZXF1aXJlKCcuLi8uLi91dGlsJyk7XG5jb25zdCBmb3JtYXQgPSByZXF1aXJlKCcuLi8uLi91dGlsL2Zvcm1hdCcpO1xuY29uc3QgSlNCSSA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvanNiaScpO1xuY29uc3QgQmFzZUNvZGVyID0gcmVxdWlyZSgnLi9CYXNlQ29kZXInKTtcblxuY2xhc3MgSW50ZWdlckNvZGVyIGV4dGVuZHMgQmFzZUNvZGVyIHtcbiAgc3RhdGljIGZyb20oeyB0eXBlLCAuLi5vcHRpb25zIH0pIHtcbiAgICBjb25zdCBtYXRjaCA9IHR5cGUubWF0Y2goL14oaW50fHVpbnQpKFswLTldKikkLyk7XG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBjb25zdCBbLCBsYWJlbCwgYml0c10gPSBtYXRjaDtcbiAgICByZXR1cm4gbmV3IHRoaXMoe1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHR5cGU6IGxhYmVsLFxuICAgICAgc2lnbmVkOiAhbGFiZWwuc3RhcnRzV2l0aCgndScpLFxuICAgICAgYml0czogYml0cyA/IHBhcnNlSW50KGJpdHMsIDEwKSA6IHVuZGVmaW5lZCxcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHsgbmFtZSwgdHlwZSwgc2lnbmVkID0gZmFsc2UsIGJpdHMgPSAyNTYgfSkge1xuICAgIGFzc2VydChOdW1iZXIuaXNJbnRlZ2VyKGJpdHMpICYmIDAgPCBiaXRzICYmIGJpdHMgPD0gMjU2ICYmIChiaXRzICUgOCA9PT0gMCksIHtcbiAgICAgIG1lc3NhZ2U6ICdpbnZhbGlkIGJpdHMnLFxuICAgICAgZXhwZWN0OiAnaW50ZWdlciAmJiAwPGJpdHM8PTI1NiAmJiBiaXRzJTg9PTAnLFxuICAgICAgZ290OiBiaXRzLFxuICAgICAgY29kZXI6IHsgbmFtZSwgdHlwZSwgc2lnbmVkIH0sXG4gICAgfSk7XG5cbiAgICBzdXBlcih7IG5hbWUgfSk7XG4gICAgdGhpcy50eXBlID0gYCR7dHlwZX0ke2JpdHN9YDtcbiAgICB0aGlzLnNpZ25lZCA9IHNpZ25lZDtcbiAgICB0aGlzLnNpemUgPSBiaXRzIC8gODtcbiAgICB0aGlzLmJvdW5kID0gSlNCSS5sZWZ0U2hpZnQoSlNCSS5CaWdJbnQoMSksIEpTQkkuQmlnSW50KGJpdHMgLSAodGhpcy5zaWduZWQgPyAxIDogMCkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcnxKU0JJfHN0cmluZ30gdmFsdWUgLSBGSVhNRTogaXQgaXMgbm90IGEgZ29vZCBpZGVhIHRvIGFjY2VwdCBzdHJpbmcgYXMgbnVtYmVyXG4gICAqIEByZXR1cm4ge0J1ZmZlcn1cbiAgICovXG4gIGVuY29kZSh2YWx1ZSkge1xuICAgIGxldCBudW1iZXIgPSBmb3JtYXQuYmlnSW50KHZhbHVlKTtcbiAgICBsZXQgdHdvc0NvbXBsZW1lbnQgPSBudW1iZXI7XG5cbiAgICBpZiAodGhpcy5zaWduZWQgJiYgSlNCSS5MVChudW1iZXIsIEpTQkkuQmlnSW50KDApKSkge1xuICAgICAgdHdvc0NvbXBsZW1lbnQgPSBKU0JJLmFkZChudW1iZXIsIHRoaXMuYm91bmQpO1xuICAgICAgbnVtYmVyID0gSlNCSS5hZGQobnVtYmVyLCBVSU5UX0JPVU5EKTtcbiAgICB9XG5cbiAgICBhc3NlcnQoSlNCSS5MRShKU0JJLkJpZ0ludCgwKSwgdHdvc0NvbXBsZW1lbnQpICYmIEpTQkkuTFQodHdvc0NvbXBsZW1lbnQsIHRoaXMuYm91bmQpLCB7XG4gICAgICBtZXNzYWdlOiAnYm91bmQgZXJyb3InLFxuICAgICAgZXhwZWN0OiBgMDw9ICYmIDwke3RoaXMuYm91bmR9YCxcbiAgICAgIGdvdDogdHdvc0NvbXBsZW1lbnQudG9TdHJpbmcoKSxcbiAgICAgIGNvZGVyOiB0aGlzLFxuICAgICAgdmFsdWUsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYWxpZ25CdWZmZXIoZm9ybWF0LmhleEJ1ZmZlcihudW1iZXIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vdXRpbC9IZXhTdHJlYW0nKX0gc3RyZWFtXG4gICAqIEByZXR1cm4ge0JpZ0ludH1cbiAgICovXG4gIGRlY29kZShzdHJlYW0pIHtcbiAgICBsZXQgdmFsdWUgPSBKU0JJLkJpZ0ludChgMHgke3N0cmVhbS5yZWFkKHRoaXMuc2l6ZSAqIDIpfWApOyAvLyAxNjogcmVhZCBvdXQgbmFrZWQgaGV4IHN0cmluZ1xuXG4gICAgaWYgKHRoaXMuc2lnbmVkICYmIEpTQkkuR0UodmFsdWUsIHRoaXMuYm91bmQpKSB7XG4gICAgICBjb25zdCBtYXNrID0gSlNCSS5sZWZ0U2hpZnQoSlNCSS5CaWdJbnQoMSksIEpTQkkuQmlnSW50KHRoaXMuc2l6ZSAqIDgpKTtcbiAgICAgIHZhbHVlID0gSlNCSS5zdWJ0cmFjdCh2YWx1ZSwgbWFzayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIEpTQkkuQmlnSW50KHZhbHVlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVnZXJDb2Rlcjtcbm1vZHVsZS5leHBvcnRzLnVJbnRDb2RlciA9IG5ldyBJbnRlZ2VyQ29kZXIoeyB0eXBlOiAndWludCcgfSk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/IntegerCoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/NullCoder.js":
/*!*******************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/abi/NullCoder.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { assert } = __webpack_require__(/*! ../../util */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\nconst BaseCoder = __webpack_require__(/*! ./BaseCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/BaseCoder.js\");\n\nclass NullCoder extends BaseCoder {\n  static from({ type, ...options }) {\n    if (type !== '') {\n      return undefined;\n    }\n    return new this({ ...options, type: 'null' });\n  }\n\n  /**\n   * @param {null} value\n   * @return {Buffer}\n   */\n  encode(value) {\n    assert(value === null, {\n      message: 'unexpected type',\n      expect: null,\n      got: value,\n      coder: this,\n    });\n\n    return Buffer.from('');\n  }\n\n  /**\n   * @return {null}\n   */\n  decode() {\n    return null;\n  }\n}\n\nmodule.exports = NullCoder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L2FiaS9OdWxsQ29kZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxTQUFTLEVBQUUsbUJBQU8sQ0FBQyx5RUFBWTtBQUN2QyxrQkFBa0IsbUJBQU8sQ0FBQyxzRkFBYTs7QUFFdkM7QUFDQSxnQkFBZ0Isa0JBQWtCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwwQkFBMEI7QUFDaEQ7O0FBRUE7QUFDQSxhQUFhLE1BQU07QUFDbkIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWthc2h5YWRhdi9EZXZlbG9wZXIvQWxsZ2l0RmlsZXMvQ29uZmx1eC1UeG4tdmlzdWFsaXplci9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L2FiaS9OdWxsQ29kZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBhc3NlcnQgfSA9IHJlcXVpcmUoJy4uLy4uL3V0aWwnKTtcbmNvbnN0IEJhc2VDb2RlciA9IHJlcXVpcmUoJy4vQmFzZUNvZGVyJyk7XG5cbmNsYXNzIE51bGxDb2RlciBleHRlbmRzIEJhc2VDb2RlciB7XG4gIHN0YXRpYyBmcm9tKHsgdHlwZSwgLi4ub3B0aW9ucyB9KSB7XG4gICAgaWYgKHR5cGUgIT09ICcnKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHRoaXMoeyAuLi5vcHRpb25zLCB0eXBlOiAnbnVsbCcgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudWxsfSB2YWx1ZVxuICAgKiBAcmV0dXJuIHtCdWZmZXJ9XG4gICAqL1xuICBlbmNvZGUodmFsdWUpIHtcbiAgICBhc3NlcnQodmFsdWUgPT09IG51bGwsIHtcbiAgICAgIG1lc3NhZ2U6ICd1bmV4cGVjdGVkIHR5cGUnLFxuICAgICAgZXhwZWN0OiBudWxsLFxuICAgICAgZ290OiB2YWx1ZSxcbiAgICAgIGNvZGVyOiB0aGlzLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKCcnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudWxsfVxuICAgKi9cbiAgZGVjb2RlKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTnVsbENvZGVyO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/NullCoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/StringCoder.js":
/*!*********************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/abi/StringCoder.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const lodash = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nconst { assert } = __webpack_require__(/*! ../../util */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\nconst BytesCoder = __webpack_require__(/*! ./BytesCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/BytesCoder.js\");\n\nclass StringCoder extends BytesCoder {\n  static from({ type, ...options }) {\n    if (type !== 'string') {\n      return undefined;\n    }\n    return new this({ ...options, type });\n  }\n\n  constructor({ type, name }) {\n    super({ name, size: undefined });\n    this.type = type;\n  }\n\n  /**\n   * @param {string} value - string in utf8\n   * @return {Buffer}\n   */\n  encode(value) {\n    assert(lodash.isString(value), {\n      message: 'value type error',\n      expect: 'string',\n      got: value.constructor.name,\n      coder: this,\n    });\n\n    return super.encode(Buffer.from(value));\n  }\n\n  /**\n   * @param {import('../../util/HexStream')} stream\n   * @return {string}\n   */\n  decode(stream) {\n    const bytes = super.decode(stream);\n    return bytes.toString();\n  }\n\n  encodeTopic(value) {\n    assert(lodash.isString(value), {\n      message: 'value type error',\n      expect: 'string',\n      got: value.constructor.name,\n      coder: this,\n    });\n\n    return super.encodeTopic(Buffer.from(value));\n  }\n}\n\nmodule.exports = StringCoder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L2FiaS9TdHJpbmdDb2Rlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMscURBQVE7QUFDL0IsUUFBUSxTQUFTLEVBQUUsbUJBQU8sQ0FBQyx5RUFBWTtBQUN2QyxtQkFBbUIsbUJBQU8sQ0FBQyx3RkFBYzs7QUFFekM7QUFDQSxnQkFBZ0Isa0JBQWtCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixrQkFBa0I7QUFDeEM7O0FBRUEsZ0JBQWdCLFlBQVk7QUFDNUIsWUFBWSx1QkFBdUI7QUFDbkM7QUFDQTs7QUFFQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLGdDQUFnQztBQUM3QyxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL3Zpa2FzaHlhZGF2L0RldmVsb3Blci9BbGxnaXRGaWxlcy9Db25mbHV4LVR4bi12aXN1YWxpemVyL25vZGVfbW9kdWxlcy9qcy1jb25mbHV4LXNkay9zcmMvY29udHJhY3QvYWJpL1N0cmluZ0NvZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGxvZGFzaCA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuY29uc3QgeyBhc3NlcnQgfSA9IHJlcXVpcmUoJy4uLy4uL3V0aWwnKTtcbmNvbnN0IEJ5dGVzQ29kZXIgPSByZXF1aXJlKCcuL0J5dGVzQ29kZXInKTtcblxuY2xhc3MgU3RyaW5nQ29kZXIgZXh0ZW5kcyBCeXRlc0NvZGVyIHtcbiAgc3RhdGljIGZyb20oeyB0eXBlLCAuLi5vcHRpb25zIH0pIHtcbiAgICBpZiAodHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBuZXcgdGhpcyh7IC4uLm9wdGlvbnMsIHR5cGUgfSk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcih7IHR5cGUsIG5hbWUgfSkge1xuICAgIHN1cGVyKHsgbmFtZSwgc2l6ZTogdW5kZWZpbmVkIH0pO1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gc3RyaW5nIGluIHV0ZjhcbiAgICogQHJldHVybiB7QnVmZmVyfVxuICAgKi9cbiAgZW5jb2RlKHZhbHVlKSB7XG4gICAgYXNzZXJ0KGxvZGFzaC5pc1N0cmluZyh2YWx1ZSksIHtcbiAgICAgIG1lc3NhZ2U6ICd2YWx1ZSB0eXBlIGVycm9yJyxcbiAgICAgIGV4cGVjdDogJ3N0cmluZycsXG4gICAgICBnb3Q6IHZhbHVlLmNvbnN0cnVjdG9yLm5hbWUsXG4gICAgICBjb2RlcjogdGhpcyxcbiAgICB9KTtcblxuICAgIHJldHVybiBzdXBlci5lbmNvZGUoQnVmZmVyLmZyb20odmFsdWUpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vdXRpbC9IZXhTdHJlYW0nKX0gc3RyZWFtXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGRlY29kZShzdHJlYW0pIHtcbiAgICBjb25zdCBieXRlcyA9IHN1cGVyLmRlY29kZShzdHJlYW0pO1xuICAgIHJldHVybiBieXRlcy50b1N0cmluZygpO1xuICB9XG5cbiAgZW5jb2RlVG9waWModmFsdWUpIHtcbiAgICBhc3NlcnQobG9kYXNoLmlzU3RyaW5nKHZhbHVlKSwge1xuICAgICAgbWVzc2FnZTogJ3ZhbHVlIHR5cGUgZXJyb3InLFxuICAgICAgZXhwZWN0OiAnc3RyaW5nJyxcbiAgICAgIGdvdDogdmFsdWUuY29uc3RydWN0b3IubmFtZSxcbiAgICAgIGNvZGVyOiB0aGlzLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHN1cGVyLmVuY29kZVRvcGljKEJ1ZmZlci5mcm9tKHZhbHVlKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTdHJpbmdDb2RlcjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/StringCoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/TupleCoder.js":
/*!********************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/abi/TupleCoder.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const lodash = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nconst { WORD_BYTES } = __webpack_require__(/*! ../../CONST */ \"(ssr)/./node_modules/js-conflux-sdk/src/CONST.js\");\nconst { assert } = __webpack_require__(/*! ../../util */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\nconst format = __webpack_require__(/*! ../../util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\nconst namedTuple = __webpack_require__(/*! ../../util/namedTuple */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/namedTuple.js\");\nconst BaseCoder = __webpack_require__(/*! ./BaseCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/BaseCoder.js\");\nconst { uIntCoder } = __webpack_require__(/*! ./IntegerCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/IntegerCoder.js\");\n\nclass Pointer extends Number {}\n\n/**\n * @param {BaseCoder[]} coders\n * @param {array} array\n * @return {Buffer}\n */\nfunction pack(coders, array) {\n  let offset = 0;\n  const staticList = [];\n  const dynamicList = [];\n\n  lodash.zip(coders, array)\n    .forEach(([coder, value]) => {\n      const buffer = coder.encode(value);\n\n      if (coder.dynamic) {\n        offset += WORD_BYTES;\n        staticList.push(new Pointer(dynamicList.length)); // push index of dynamic to static\n        dynamicList.push(buffer);\n      } else {\n        offset += buffer.length;\n        staticList.push(buffer);\n      }\n    });\n\n  // write back the dynamic address\n  staticList.forEach((pointer, index) => {\n    if (pointer instanceof Pointer) {\n      staticList[index] = uIntCoder.encode(offset);\n      offset += dynamicList[pointer].length;\n    }\n  });\n\n  return Buffer.concat([...staticList, ...dynamicList]);\n}\n\n/**\n *\n * @param {BaseCoder[]} coders\n * @param {import('../../util/HexStream')} stream\n * @return {array}\n */\nfunction unpack(coders, stream) {\n  const startIndex = stream.index;\n\n  const array = coders.map(coder => {\n    if (coder.dynamic) {\n      const offset = format.uInt(uIntCoder.decode(stream)); // XXX: BigInt => Number, for length is enough.\n      return new Pointer(startIndex + offset * 2);\n    } else {\n      return coder.decode(stream);\n    }\n  });\n\n  lodash.zip(coders, array)\n    .forEach(([coder, value], index) => {\n      if (value instanceof Pointer) {\n        assert(Number(value) === stream.index, {\n          message: 'stream.index error',\n          expect: value,\n          got: stream.index,\n          coder,\n          stream,\n        });\n\n        array[index] = coder.decode(stream);\n      }\n    });\n\n  return array;\n}\n\nclass TupleCoder extends BaseCoder {\n  static from({ type, components, ...options }, valueCoder) {\n    if (type !== 'tuple') {\n      return undefined;\n    }\n    return new this({ ...options, coders: components.map(valueCoder) });\n  }\n\n  constructor({ name, coders }) {\n    super({ name });\n    this.type = `(${coders.map(coder => coder.type).join(',')})`;\n    this.size = coders.length;\n    this.coders = coders;\n    this.dynamic = lodash.some(coders, coder => coder.dynamic);\n    this.names = coders.map((coder, index) => coder.name || `${index}`);\n    /** @type {object} */\n    this.NamedTuple = namedTuple(...this.names);\n  }\n\n  /**\n   * @param {array} array\n   * @return {Buffer}\n   */\n  encode(array) {\n    if (lodash.isPlainObject(array)) {\n      array = this.NamedTuple.fromObject(array);\n    }\n\n    assert(Array.isArray(array), {\n      message: 'unexpected type',\n      expect: 'array',\n      got: typeof array,\n      coder: this,\n    });\n\n    assert(array.length === this.size, {\n      message: 'length not match',\n      expect: this.size,\n      got: array.length,\n      coder: this,\n    });\n\n    return pack(this.coders, array);\n  }\n\n  /**\n   * @param {import('../../util/HexStream')} stream\n   * @return {NamedTuple}\n   */\n  decode(stream) {\n    const array = unpack(this.coders, stream);\n    return new this.NamedTuple(...array);\n  }\n\n  encodeTopic(value) {\n    try {\n      return format.hex64(value);\n    } catch (e) {\n      // TODO https://solidity.readthedocs.io/en/v0.7.4/abi-spec.html#encoding-of-indexed-event-parameters\n      throw new Error('not supported encode tuple to index');\n    }\n  }\n\n  decodeTopic(hex) {\n    return hex;\n  }\n}\n\nmodule.exports = TupleCoder;\nmodule.exports.pack = pack;\nmodule.exports.unpack = unpack;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L2FiaS9UdXBsZUNvZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLGVBQWUsbUJBQU8sQ0FBQyxxREFBUTtBQUMvQixRQUFRLGFBQWEsRUFBRSxtQkFBTyxDQUFDLHFFQUFhO0FBQzVDLFFBQVEsU0FBUyxFQUFFLG1CQUFPLENBQUMseUVBQVk7QUFDdkMsZUFBZSxtQkFBTyxDQUFDLGlGQUFtQjtBQUMxQyxtQkFBbUIsbUJBQU8sQ0FBQyx5RkFBdUI7QUFDbEQsa0JBQWtCLG1CQUFPLENBQUMsc0ZBQWE7QUFDdkMsUUFBUSxZQUFZLEVBQUUsbUJBQU8sQ0FBQyw0RkFBZ0I7O0FBRTlDOztBQUVBO0FBQ0EsV0FBVyxhQUFhO0FBQ3hCLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDBEQUEwRDtBQUMxRDtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxhQUFhO0FBQ3hCLFdBQVcsZ0NBQWdDO0FBQzNDLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDREQUE0RDtBQUM1RDtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0IsOEJBQThCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixnREFBZ0Q7QUFDdEU7O0FBRUEsZ0JBQWdCLGNBQWM7QUFDOUIsWUFBWSxNQUFNO0FBQ2xCLG9CQUFvQiwwQ0FBMEM7QUFDOUQ7QUFDQTtBQUNBO0FBQ0EsK0RBQStELE1BQU07QUFDckUsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLE9BQU87QUFDcEIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBLGFBQWEsZ0NBQWdDO0FBQzdDLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQjtBQUNuQixxQkFBcUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWthc2h5YWRhdi9EZXZlbG9wZXIvQWxsZ2l0RmlsZXMvQ29uZmx1eC1UeG4tdmlzdWFsaXplci9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L2FiaS9UdXBsZUNvZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGxvZGFzaCA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuY29uc3QgeyBXT1JEX0JZVEVTIH0gPSByZXF1aXJlKCcuLi8uLi9DT05TVCcpO1xuY29uc3QgeyBhc3NlcnQgfSA9IHJlcXVpcmUoJy4uLy4uL3V0aWwnKTtcbmNvbnN0IGZvcm1hdCA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvZm9ybWF0Jyk7XG5jb25zdCBuYW1lZFR1cGxlID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9uYW1lZFR1cGxlJyk7XG5jb25zdCBCYXNlQ29kZXIgPSByZXF1aXJlKCcuL0Jhc2VDb2RlcicpO1xuY29uc3QgeyB1SW50Q29kZXIgfSA9IHJlcXVpcmUoJy4vSW50ZWdlckNvZGVyJyk7XG5cbmNsYXNzIFBvaW50ZXIgZXh0ZW5kcyBOdW1iZXIge31cblxuLyoqXG4gKiBAcGFyYW0ge0Jhc2VDb2RlcltdfSBjb2RlcnNcbiAqIEBwYXJhbSB7YXJyYXl9IGFycmF5XG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmZ1bmN0aW9uIHBhY2soY29kZXJzLCBhcnJheSkge1xuICBsZXQgb2Zmc2V0ID0gMDtcbiAgY29uc3Qgc3RhdGljTGlzdCA9IFtdO1xuICBjb25zdCBkeW5hbWljTGlzdCA9IFtdO1xuXG4gIGxvZGFzaC56aXAoY29kZXJzLCBhcnJheSlcbiAgICAuZm9yRWFjaCgoW2NvZGVyLCB2YWx1ZV0pID0+IHtcbiAgICAgIGNvbnN0IGJ1ZmZlciA9IGNvZGVyLmVuY29kZSh2YWx1ZSk7XG5cbiAgICAgIGlmIChjb2Rlci5keW5hbWljKSB7XG4gICAgICAgIG9mZnNldCArPSBXT1JEX0JZVEVTO1xuICAgICAgICBzdGF0aWNMaXN0LnB1c2gobmV3IFBvaW50ZXIoZHluYW1pY0xpc3QubGVuZ3RoKSk7IC8vIHB1c2ggaW5kZXggb2YgZHluYW1pYyB0byBzdGF0aWNcbiAgICAgICAgZHluYW1pY0xpc3QucHVzaChidWZmZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2Zmc2V0ICs9IGJ1ZmZlci5sZW5ndGg7XG4gICAgICAgIHN0YXRpY0xpc3QucHVzaChidWZmZXIpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIC8vIHdyaXRlIGJhY2sgdGhlIGR5bmFtaWMgYWRkcmVzc1xuICBzdGF0aWNMaXN0LmZvckVhY2goKHBvaW50ZXIsIGluZGV4KSA9PiB7XG4gICAgaWYgKHBvaW50ZXIgaW5zdGFuY2VvZiBQb2ludGVyKSB7XG4gICAgICBzdGF0aWNMaXN0W2luZGV4XSA9IHVJbnRDb2Rlci5lbmNvZGUob2Zmc2V0KTtcbiAgICAgIG9mZnNldCArPSBkeW5hbWljTGlzdFtwb2ludGVyXS5sZW5ndGg7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChbLi4uc3RhdGljTGlzdCwgLi4uZHluYW1pY0xpc3RdKTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtCYXNlQ29kZXJbXX0gY29kZXJzXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vdXRpbC9IZXhTdHJlYW0nKX0gc3RyZWFtXG4gKiBAcmV0dXJuIHthcnJheX1cbiAqL1xuZnVuY3Rpb24gdW5wYWNrKGNvZGVycywgc3RyZWFtKSB7XG4gIGNvbnN0IHN0YXJ0SW5kZXggPSBzdHJlYW0uaW5kZXg7XG5cbiAgY29uc3QgYXJyYXkgPSBjb2RlcnMubWFwKGNvZGVyID0+IHtcbiAgICBpZiAoY29kZXIuZHluYW1pYykge1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gZm9ybWF0LnVJbnQodUludENvZGVyLmRlY29kZShzdHJlYW0pKTsgLy8gWFhYOiBCaWdJbnQgPT4gTnVtYmVyLCBmb3IgbGVuZ3RoIGlzIGVub3VnaC5cbiAgICAgIHJldHVybiBuZXcgUG9pbnRlcihzdGFydEluZGV4ICsgb2Zmc2V0ICogMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjb2Rlci5kZWNvZGUoc3RyZWFtKTtcbiAgICB9XG4gIH0pO1xuXG4gIGxvZGFzaC56aXAoY29kZXJzLCBhcnJheSlcbiAgICAuZm9yRWFjaCgoW2NvZGVyLCB2YWx1ZV0sIGluZGV4KSA9PiB7XG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBQb2ludGVyKSB7XG4gICAgICAgIGFzc2VydChOdW1iZXIodmFsdWUpID09PSBzdHJlYW0uaW5kZXgsIHtcbiAgICAgICAgICBtZXNzYWdlOiAnc3RyZWFtLmluZGV4IGVycm9yJyxcbiAgICAgICAgICBleHBlY3Q6IHZhbHVlLFxuICAgICAgICAgIGdvdDogc3RyZWFtLmluZGV4LFxuICAgICAgICAgIGNvZGVyLFxuICAgICAgICAgIHN0cmVhbSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXJyYXlbaW5kZXhdID0gY29kZXIuZGVjb2RlKHN0cmVhbSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5jbGFzcyBUdXBsZUNvZGVyIGV4dGVuZHMgQmFzZUNvZGVyIHtcbiAgc3RhdGljIGZyb20oeyB0eXBlLCBjb21wb25lbnRzLCAuLi5vcHRpb25zIH0sIHZhbHVlQ29kZXIpIHtcbiAgICBpZiAodHlwZSAhPT0gJ3R1cGxlJykge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyB0aGlzKHsgLi4ub3B0aW9ucywgY29kZXJzOiBjb21wb25lbnRzLm1hcCh2YWx1ZUNvZGVyKSB9KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHsgbmFtZSwgY29kZXJzIH0pIHtcbiAgICBzdXBlcih7IG5hbWUgfSk7XG4gICAgdGhpcy50eXBlID0gYCgke2NvZGVycy5tYXAoY29kZXIgPT4gY29kZXIudHlwZSkuam9pbignLCcpfSlgO1xuICAgIHRoaXMuc2l6ZSA9IGNvZGVycy5sZW5ndGg7XG4gICAgdGhpcy5jb2RlcnMgPSBjb2RlcnM7XG4gICAgdGhpcy5keW5hbWljID0gbG9kYXNoLnNvbWUoY29kZXJzLCBjb2RlciA9PiBjb2Rlci5keW5hbWljKTtcbiAgICB0aGlzLm5hbWVzID0gY29kZXJzLm1hcCgoY29kZXIsIGluZGV4KSA9PiBjb2Rlci5uYW1lIHx8IGAke2luZGV4fWApO1xuICAgIC8qKiBAdHlwZSB7b2JqZWN0fSAqL1xuICAgIHRoaXMuTmFtZWRUdXBsZSA9IG5hbWVkVHVwbGUoLi4udGhpcy5uYW1lcyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHthcnJheX0gYXJyYXlcbiAgICogQHJldHVybiB7QnVmZmVyfVxuICAgKi9cbiAgZW5jb2RlKGFycmF5KSB7XG4gICAgaWYgKGxvZGFzaC5pc1BsYWluT2JqZWN0KGFycmF5KSkge1xuICAgICAgYXJyYXkgPSB0aGlzLk5hbWVkVHVwbGUuZnJvbU9iamVjdChhcnJheSk7XG4gICAgfVxuXG4gICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkoYXJyYXkpLCB7XG4gICAgICBtZXNzYWdlOiAndW5leHBlY3RlZCB0eXBlJyxcbiAgICAgIGV4cGVjdDogJ2FycmF5JyxcbiAgICAgIGdvdDogdHlwZW9mIGFycmF5LFxuICAgICAgY29kZXI6IHRoaXMsXG4gICAgfSk7XG5cbiAgICBhc3NlcnQoYXJyYXkubGVuZ3RoID09PSB0aGlzLnNpemUsIHtcbiAgICAgIG1lc3NhZ2U6ICdsZW5ndGggbm90IG1hdGNoJyxcbiAgICAgIGV4cGVjdDogdGhpcy5zaXplLFxuICAgICAgZ290OiBhcnJheS5sZW5ndGgsXG4gICAgICBjb2RlcjogdGhpcyxcbiAgICB9KTtcblxuICAgIHJldHVybiBwYWNrKHRoaXMuY29kZXJzLCBhcnJheSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtpbXBvcnQoJy4uLy4uL3V0aWwvSGV4U3RyZWFtJyl9IHN0cmVhbVxuICAgKiBAcmV0dXJuIHtOYW1lZFR1cGxlfVxuICAgKi9cbiAgZGVjb2RlKHN0cmVhbSkge1xuICAgIGNvbnN0IGFycmF5ID0gdW5wYWNrKHRoaXMuY29kZXJzLCBzdHJlYW0pO1xuICAgIHJldHVybiBuZXcgdGhpcy5OYW1lZFR1cGxlKC4uLmFycmF5KTtcbiAgfVxuXG4gIGVuY29kZVRvcGljKHZhbHVlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmb3JtYXQuaGV4NjQodmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIFRPRE8gaHR0cHM6Ly9zb2xpZGl0eS5yZWFkdGhlZG9jcy5pby9lbi92MC43LjQvYWJpLXNwZWMuaHRtbCNlbmNvZGluZy1vZi1pbmRleGVkLWV2ZW50LXBhcmFtZXRlcnNcbiAgICAgIHRocm93IG5ldyBFcnJvcignbm90IHN1cHBvcnRlZCBlbmNvZGUgdHVwbGUgdG8gaW5kZXgnKTtcbiAgICB9XG4gIH1cblxuICBkZWNvZGVUb3BpYyhoZXgpIHtcbiAgICByZXR1cm4gaGV4O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVHVwbGVDb2Rlcjtcbm1vZHVsZS5leHBvcnRzLnBhY2sgPSBwYWNrO1xubW9kdWxlLmV4cG9ydHMudW5wYWNrID0gdW5wYWNrO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/TupleCoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/abi/index.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n @see https://solidity.readthedocs.io/en/v0.5.13/abi-spec.html\n @see https://solidity.readthedocs.io/en/v0.5.13/abi-spec.html#encoding-of-indexed-event-parameters\n */\n\nconst { assert } = __webpack_require__(/*! ../../util */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\nconst BaseCoder = __webpack_require__(/*! ./BaseCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/BaseCoder.js\");\nconst NullCoder = __webpack_require__(/*! ./NullCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/NullCoder.js\");\nconst AddressCoder = __webpack_require__(/*! ./AddressCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/AddressCoder.js\");\nconst IntegerCoder = __webpack_require__(/*! ./IntegerCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/IntegerCoder.js\");\nconst BoolCoder = __webpack_require__(/*! ./BoolCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/BoolCoder.js\");\nconst BytesCoder = __webpack_require__(/*! ./BytesCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/BytesCoder.js\");\nconst StringCoder = __webpack_require__(/*! ./StringCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/StringCoder.js\");\nconst TupleCoder = __webpack_require__(/*! ./TupleCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/TupleCoder.js\");\nconst ArrayCoder = __webpack_require__(/*! ./ArrayCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/ArrayCoder.js\");\n// TODO FixedCoder\n\n/**\n * Get coder by abi component.\n *\n * @param {object} component\n * @param {string} component.type\n * @param {string} [component.name]\n * @param {array} [component.components] - For TupleCoder\n * @return {BaseCoder}\n */\nfunction valueCoder(component) {\n  // must parse ArrayCoder first, others sorted by probability\n  const coder = ArrayCoder.from(component, valueCoder) // recursion\n    || TupleCoder.from(component, valueCoder) // recursion\n    || AddressCoder.from(component)\n    || IntegerCoder.from(component)\n    || StringCoder.from(component)\n    || BytesCoder.from(component)\n    || BoolCoder.from(component)\n    || NullCoder.from(component);\n\n  assert(coder instanceof BaseCoder, {\n    message: 'can not found matched coder',\n    component,\n  });\n\n  return coder;\n}\n\nfunction formatType({ name, inputs }) {\n  return `${name}(${inputs.map(param => valueCoder(param).type).join(',')})`;\n}\n\nfunction formatFullName({ name, inputs }) {\n  return `${name}(${inputs.map(param => `${valueCoder(param).type} ${param.indexed ? 'indexed ' : ''}${param.name}`).join(', ')})`;\n}\n\nmodule.exports = {\n  valueCoder,\n  formatType,\n  formatFullName,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L2FiaS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFRLFNBQVMsRUFBRSxtQkFBTyxDQUFDLHlFQUFZO0FBQ3ZDLGtCQUFrQixtQkFBTyxDQUFDLHNGQUFhO0FBQ3ZDLGtCQUFrQixtQkFBTyxDQUFDLHNGQUFhO0FBQ3ZDLHFCQUFxQixtQkFBTyxDQUFDLDRGQUFnQjtBQUM3QyxxQkFBcUIsbUJBQU8sQ0FBQyw0RkFBZ0I7QUFDN0Msa0JBQWtCLG1CQUFPLENBQUMsc0ZBQWE7QUFDdkMsbUJBQW1CLG1CQUFPLENBQUMsd0ZBQWM7QUFDekMsb0JBQW9CLG1CQUFPLENBQUMsMEZBQWU7QUFDM0MsbUJBQW1CLG1CQUFPLENBQUMsd0ZBQWM7QUFDekMsbUJBQW1CLG1CQUFPLENBQUMsd0ZBQWM7QUFDekM7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxPQUFPO0FBQ2xCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQSxzQkFBc0IsY0FBYztBQUNwQyxZQUFZLEtBQUssR0FBRyxzREFBc0Q7QUFDMUU7O0FBRUEsMEJBQTBCLGNBQWM7QUFDeEMsWUFBWSxLQUFLLEdBQUcsdUJBQXVCLHdCQUF3QixFQUFFLGdDQUFnQyxFQUFFLFdBQVcsY0FBYztBQUNoSTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmlrYXNoeWFkYXYvRGV2ZWxvcGVyL0FsbGdpdEZpbGVzL0NvbmZsdXgtVHhuLXZpc3VhbGl6ZXIvbm9kZV9tb2R1bGVzL2pzLWNvbmZsdXgtc2RrL3NyYy9jb250cmFjdC9hYmkvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiBAc2VlIGh0dHBzOi8vc29saWRpdHkucmVhZHRoZWRvY3MuaW8vZW4vdjAuNS4xMy9hYmktc3BlYy5odG1sXG4gQHNlZSBodHRwczovL3NvbGlkaXR5LnJlYWR0aGVkb2NzLmlvL2VuL3YwLjUuMTMvYWJpLXNwZWMuaHRtbCNlbmNvZGluZy1vZi1pbmRleGVkLWV2ZW50LXBhcmFtZXRlcnNcbiAqL1xuXG5jb25zdCB7IGFzc2VydCB9ID0gcmVxdWlyZSgnLi4vLi4vdXRpbCcpO1xuY29uc3QgQmFzZUNvZGVyID0gcmVxdWlyZSgnLi9CYXNlQ29kZXInKTtcbmNvbnN0IE51bGxDb2RlciA9IHJlcXVpcmUoJy4vTnVsbENvZGVyJyk7XG5jb25zdCBBZGRyZXNzQ29kZXIgPSByZXF1aXJlKCcuL0FkZHJlc3NDb2RlcicpO1xuY29uc3QgSW50ZWdlckNvZGVyID0gcmVxdWlyZSgnLi9JbnRlZ2VyQ29kZXInKTtcbmNvbnN0IEJvb2xDb2RlciA9IHJlcXVpcmUoJy4vQm9vbENvZGVyJyk7XG5jb25zdCBCeXRlc0NvZGVyID0gcmVxdWlyZSgnLi9CeXRlc0NvZGVyJyk7XG5jb25zdCBTdHJpbmdDb2RlciA9IHJlcXVpcmUoJy4vU3RyaW5nQ29kZXInKTtcbmNvbnN0IFR1cGxlQ29kZXIgPSByZXF1aXJlKCcuL1R1cGxlQ29kZXInKTtcbmNvbnN0IEFycmF5Q29kZXIgPSByZXF1aXJlKCcuL0FycmF5Q29kZXInKTtcbi8vIFRPRE8gRml4ZWRDb2RlclxuXG4vKipcbiAqIEdldCBjb2RlciBieSBhYmkgY29tcG9uZW50LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb21wb25lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb21wb25lbnQudHlwZVxuICogQHBhcmFtIHtzdHJpbmd9IFtjb21wb25lbnQubmFtZV1cbiAqIEBwYXJhbSB7YXJyYXl9IFtjb21wb25lbnQuY29tcG9uZW50c10gLSBGb3IgVHVwbGVDb2RlclxuICogQHJldHVybiB7QmFzZUNvZGVyfVxuICovXG5mdW5jdGlvbiB2YWx1ZUNvZGVyKGNvbXBvbmVudCkge1xuICAvLyBtdXN0IHBhcnNlIEFycmF5Q29kZXIgZmlyc3QsIG90aGVycyBzb3J0ZWQgYnkgcHJvYmFiaWxpdHlcbiAgY29uc3QgY29kZXIgPSBBcnJheUNvZGVyLmZyb20oY29tcG9uZW50LCB2YWx1ZUNvZGVyKSAvLyByZWN1cnNpb25cbiAgICB8fCBUdXBsZUNvZGVyLmZyb20oY29tcG9uZW50LCB2YWx1ZUNvZGVyKSAvLyByZWN1cnNpb25cbiAgICB8fCBBZGRyZXNzQ29kZXIuZnJvbShjb21wb25lbnQpXG4gICAgfHwgSW50ZWdlckNvZGVyLmZyb20oY29tcG9uZW50KVxuICAgIHx8IFN0cmluZ0NvZGVyLmZyb20oY29tcG9uZW50KVxuICAgIHx8IEJ5dGVzQ29kZXIuZnJvbShjb21wb25lbnQpXG4gICAgfHwgQm9vbENvZGVyLmZyb20oY29tcG9uZW50KVxuICAgIHx8IE51bGxDb2Rlci5mcm9tKGNvbXBvbmVudCk7XG5cbiAgYXNzZXJ0KGNvZGVyIGluc3RhbmNlb2YgQmFzZUNvZGVyLCB7XG4gICAgbWVzc2FnZTogJ2NhbiBub3QgZm91bmQgbWF0Y2hlZCBjb2RlcicsXG4gICAgY29tcG9uZW50LFxuICB9KTtcblxuICByZXR1cm4gY29kZXI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFR5cGUoeyBuYW1lLCBpbnB1dHMgfSkge1xuICByZXR1cm4gYCR7bmFtZX0oJHtpbnB1dHMubWFwKHBhcmFtID0+IHZhbHVlQ29kZXIocGFyYW0pLnR5cGUpLmpvaW4oJywnKX0pYDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RnVsbE5hbWUoeyBuYW1lLCBpbnB1dHMgfSkge1xuICByZXR1cm4gYCR7bmFtZX0oJHtpbnB1dHMubWFwKHBhcmFtID0+IGAke3ZhbHVlQ29kZXIocGFyYW0pLnR5cGV9ICR7cGFyYW0uaW5kZXhlZCA/ICdpbmRleGVkICcgOiAnJ30ke3BhcmFtLm5hbWV9YCkuam9pbignLCAnKX0pYDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHZhbHVlQ29kZXIsXG4gIGZvcm1hdFR5cGUsXG4gIGZvcm1hdEZ1bGxOYW1lLFxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/event/ContractEvent.js":
/*!*************************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/event/ContractEvent.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const callable = __webpack_require__(/*! ../../util/callable */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/callable.js\");\nconst EventCoder = __webpack_require__(/*! ./EventCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/event/EventCoder.js\");\nconst LogFilter = __webpack_require__(/*! ./LogFilter */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/event/LogFilter.js\");\n\nclass ContractEvent extends EventCoder {\n  constructor(fragment, contract, conflux) {\n    super(fragment);\n    this.contract = contract;\n    this.conflux = conflux;\n\n    return callable(this, this.call.bind(this));\n  }\n\n  call(...args) {\n    const address = this.contract.address; // dynamic get `contract.address`\n    const topics = [this.signature, ...this.encodeTopics(args)];\n    return new LogFilter({ address: [address], topics }, this);\n  }\n}\n\nmodule.exports = ContractEvent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L2V2ZW50L0NvbnRyYWN0RXZlbnQuanMiLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLG1CQUFPLENBQUMscUZBQXFCO0FBQzlDLG1CQUFtQixtQkFBTyxDQUFDLDBGQUFjO0FBQ3pDLGtCQUFrQixtQkFBTyxDQUFDLHdGQUFhOztBQUV2QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQSwyQkFBMkIsNEJBQTRCO0FBQ3ZEO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWthc2h5YWRhdi9EZXZlbG9wZXIvQWxsZ2l0RmlsZXMvQ29uZmx1eC1UeG4tdmlzdWFsaXplci9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L2V2ZW50L0NvbnRyYWN0RXZlbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY2FsbGFibGUgPSByZXF1aXJlKCcuLi8uLi91dGlsL2NhbGxhYmxlJyk7XG5jb25zdCBFdmVudENvZGVyID0gcmVxdWlyZSgnLi9FdmVudENvZGVyJyk7XG5jb25zdCBMb2dGaWx0ZXIgPSByZXF1aXJlKCcuL0xvZ0ZpbHRlcicpO1xuXG5jbGFzcyBDb250cmFjdEV2ZW50IGV4dGVuZHMgRXZlbnRDb2RlciB7XG4gIGNvbnN0cnVjdG9yKGZyYWdtZW50LCBjb250cmFjdCwgY29uZmx1eCkge1xuICAgIHN1cGVyKGZyYWdtZW50KTtcbiAgICB0aGlzLmNvbnRyYWN0ID0gY29udHJhY3Q7XG4gICAgdGhpcy5jb25mbHV4ID0gY29uZmx1eDtcblxuICAgIHJldHVybiBjYWxsYWJsZSh0aGlzLCB0aGlzLmNhbGwuYmluZCh0aGlzKSk7XG4gIH1cblxuICBjYWxsKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBhZGRyZXNzID0gdGhpcy5jb250cmFjdC5hZGRyZXNzOyAvLyBkeW5hbWljIGdldCBgY29udHJhY3QuYWRkcmVzc2BcbiAgICBjb25zdCB0b3BpY3MgPSBbdGhpcy5zaWduYXR1cmUsIC4uLnRoaXMuZW5jb2RlVG9waWNzKGFyZ3MpXTtcbiAgICByZXR1cm4gbmV3IExvZ0ZpbHRlcih7IGFkZHJlc3M6IFthZGRyZXNzXSwgdG9waWNzIH0sIHRoaXMpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29udHJhY3RFdmVudDtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/event/ContractEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/event/ContractEventOverride.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/event/ContractEventOverride.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const lodash = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nconst callable = __webpack_require__(/*! ../../util/callable */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/callable.js\");\n\nclass ContractEventOverride {\n  constructor(events, contract, conflux) {\n    this.signatureToEvent = lodash.keyBy(events, 'signature');\n    this.contract = contract;\n    this.conflux = conflux;\n\n    return callable(this, this.call.bind(this));\n  }\n\n  call(...args) {\n    const acceptArray = [];\n    const rejectArray = [];\n\n    let filter;\n    for (const event of Object.values(this.signatureToEvent)) {\n      try {\n        filter = event(...args);\n        acceptArray.push(event.type);\n      } catch (e) {\n        rejectArray.push(event.type);\n      }\n    }\n\n    if (!acceptArray.length) {\n      throw new Error(`can not match override \"${rejectArray.join(',')}\" with args (${args.join(',')})`);\n    }\n    if (acceptArray.length > 1) {\n      throw new Error(`can not determine override \"${acceptArray.join('|')}\" with args (${args.join(',')})`);\n    }\n\n    return filter;\n  }\n\n  decodeLog(log) {\n    const topic = log.topics[0];\n    const event = this.signatureToEvent[topic];\n    return event.decodeLog(log);\n  }\n}\n\nmodule.exports = ContractEventOverride;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L2V2ZW50L0NvbnRyYWN0RXZlbnRPdmVycmlkZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMscURBQVE7QUFDL0IsaUJBQWlCLG1CQUFPLENBQUMscUZBQXFCOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaURBQWlELHNCQUFzQixlQUFlLGVBQWU7QUFDckc7QUFDQTtBQUNBLHFEQUFxRCxzQkFBc0IsZUFBZSxlQUFlO0FBQ3pHOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvdmlrYXNoeWFkYXYvRGV2ZWxvcGVyL0FsbGdpdEZpbGVzL0NvbmZsdXgtVHhuLXZpc3VhbGl6ZXIvbm9kZV9tb2R1bGVzL2pzLWNvbmZsdXgtc2RrL3NyYy9jb250cmFjdC9ldmVudC9Db250cmFjdEV2ZW50T3ZlcnJpZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbG9kYXNoID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5jb25zdCBjYWxsYWJsZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvY2FsbGFibGUnKTtcblxuY2xhc3MgQ29udHJhY3RFdmVudE92ZXJyaWRlIHtcbiAgY29uc3RydWN0b3IoZXZlbnRzLCBjb250cmFjdCwgY29uZmx1eCkge1xuICAgIHRoaXMuc2lnbmF0dXJlVG9FdmVudCA9IGxvZGFzaC5rZXlCeShldmVudHMsICdzaWduYXR1cmUnKTtcbiAgICB0aGlzLmNvbnRyYWN0ID0gY29udHJhY3Q7XG4gICAgdGhpcy5jb25mbHV4ID0gY29uZmx1eDtcblxuICAgIHJldHVybiBjYWxsYWJsZSh0aGlzLCB0aGlzLmNhbGwuYmluZCh0aGlzKSk7XG4gIH1cblxuICBjYWxsKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBhY2NlcHRBcnJheSA9IFtdO1xuICAgIGNvbnN0IHJlamVjdEFycmF5ID0gW107XG5cbiAgICBsZXQgZmlsdGVyO1xuICAgIGZvciAoY29uc3QgZXZlbnQgb2YgT2JqZWN0LnZhbHVlcyh0aGlzLnNpZ25hdHVyZVRvRXZlbnQpKSB7XG4gICAgICB0cnkge1xuICAgICAgICBmaWx0ZXIgPSBldmVudCguLi5hcmdzKTtcbiAgICAgICAgYWNjZXB0QXJyYXkucHVzaChldmVudC50eXBlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0QXJyYXkucHVzaChldmVudC50eXBlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWFjY2VwdEFycmF5Lmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW4gbm90IG1hdGNoIG92ZXJyaWRlIFwiJHtyZWplY3RBcnJheS5qb2luKCcsJyl9XCIgd2l0aCBhcmdzICgke2FyZ3Muam9pbignLCcpfSlgKTtcbiAgICB9XG4gICAgaWYgKGFjY2VwdEFycmF5Lmxlbmd0aCA+IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgY2FuIG5vdCBkZXRlcm1pbmUgb3ZlcnJpZGUgXCIke2FjY2VwdEFycmF5LmpvaW4oJ3wnKX1cIiB3aXRoIGFyZ3MgKCR7YXJncy5qb2luKCcsJyl9KWApO1xuICAgIH1cblxuICAgIHJldHVybiBmaWx0ZXI7XG4gIH1cblxuICBkZWNvZGVMb2cobG9nKSB7XG4gICAgY29uc3QgdG9waWMgPSBsb2cudG9waWNzWzBdO1xuICAgIGNvbnN0IGV2ZW50ID0gdGhpcy5zaWduYXR1cmVUb0V2ZW50W3RvcGljXTtcbiAgICByZXR1cm4gZXZlbnQuZGVjb2RlTG9nKGxvZyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb250cmFjdEV2ZW50T3ZlcnJpZGU7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/event/ContractEventOverride.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/event/EventCoder.js":
/*!**********************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/event/EventCoder.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { assert } = __webpack_require__(/*! ../../util */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\nconst format = __webpack_require__(/*! ../../util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\nconst HexStream = __webpack_require__(/*! ../../util/HexStream */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/HexStream.js\");\nconst namedTuple = __webpack_require__(/*! ../../util/namedTuple */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/namedTuple.js\");\nconst { formatType, formatFullName, valueCoder } = __webpack_require__(/*! ../abi */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/index.js\");\n\nclass EventCoder {\n  /**\n   * Event coder\n   *\n   * @param {object} options\n   * @param {boolean} options.anonymous\n   * @param {string} options.name\n   * @param {array} options.inputs\n   * @return {EventCoder}\n   *\n   * @example\n   * > abi = {\n    name: 'EventName',\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'account',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        name: 'number',\n        type: 'uint',\n      },\n    ],\n   }\n   * > coder = new EventCoder(abi)\n   EventCoder {\n      anonymous: false,\n      name: 'EventName',\n      inputs: [\n        { indexed: true, name: 'account', type: 'address' },\n        { indexed: false, name: 'number', type: 'uint' }\n      ],\n      type: 'EventName(address,uint256)',\n      NamedTuple: [Function: NamedTuple(account,number)]\n    }\n   */\n  constructor({ anonymous, name, inputs = [] }) {\n    this.anonymous = anonymous;\n    this.name = name; // example: \"Event\"\n    this.fullName = formatFullName({ name, inputs }); // example: \"Event(address indexed account)\"\n    this.type = formatType({ name, inputs }); // example: \"Event(address)\"\n    this.signature = format.keccak256(this.type); // example: \"0x50d7c806d0f7913f321946784dee176a42aa55b5dd83371fc57dcedf659085e0\"\n\n    this.inputs = inputs;\n    this.inputCoders = inputs.map(valueCoder);\n    this.dataCoder = valueCoder({ type: 'tuple', components: inputs.filter(component => !component.indexed) });\n\n    /** @type {object} */\n    this.NamedTuple = namedTuple(...inputs.map((input, index) => input.name || `${index}`));\n  }\n\n  /**\n   * Encode topics by params\n   *\n   * @param {any[]} args\n   * @return {string[]}\n   * @example\n   * > coder = new EventCoder(abi)\n   * > coder.encodeTopics(['0x0123456789012345678901234567890123456789', null])\n   ['0x0000000000000000000000000123456789012345678901234567890123456789']\n   */\n  encodeTopics(args) {\n    assert(args.length === this.inputs.length, {\n      message: 'length not match',\n      expect: this.inputs.length,\n      got: args.length,\n      coder: this.fullName,\n    });\n\n    const topics = [];\n    this.inputs.forEach((component, index) => {\n      if (component.indexed) {\n        const coder = this.inputCoders[index];\n        const value = args[index];\n        topics.push(value === null ? null : format.hex(coder.encodeTopic(value)));\n      }\n    });\n\n    return topics;\n  }\n\n  /**\n   * Decode log\n   *\n   * @param {array} topics - Array of hex sting\n   * @param {string} data - Hex string\n   * @return {array} NamedTuple\n   *\n   * @example\n   * > coder = new EventCoder(abi)\n   * > result = coder.decodeLog({\n      data: '0x000000000000000000000000000000000000000000000000000000000000000a',\n      topics: [\n        '0xb0333e0e3a6b99318e4e2e0d7e5e5f93646f9cbf62da1587955a4092bf7df6e7',\n        '0x0000000000000000000000000123456789012345678901234567890123456789',\n      ],\n    })\n   NamedTuple(account,number) [ '0x0123456789012345678901234567890123456789', 10n ]\n   * > console.log([...result])\n   [ 0x0123456789012345678901234567890123456789, 10n ]\n   * > console.log(result.account) // `account` a field name in abi\n   \"0x0123456789012345678901234567890123456789\"\n   * > console.log(result.number) // `number` a field name in abi\n   10n\n   */\n  decodeLog({ topics, data }) {\n    assert(this.anonymous || topics[0] === this.signature, {\n      message: 'decodeLog unexpected topic',\n      expect: this.signature,\n      got: topics[0],\n      coder: this.fullName,\n    });\n\n    const stream = new HexStream(data || '0x');\n    const notIndexedNamedTuple = this.dataCoder.decode(stream);\n    assert(stream.eof(), {\n      message: 'hex length too large',\n      expect: `${stream.string.length}`,\n      got: stream.index,\n      coder: this.fullName,\n    });\n\n    let offset = this.anonymous ? 0 : 1;\n    const array = this.inputs.map((component, index) => {\n      if (component.indexed) {\n        const coder = this.inputCoders[index];\n        const topic = topics[offset++]; // eslint-disable-line no-plusplus\n        return coder.decodeTopic(topic);\n      } else {\n        return notIndexedNamedTuple[component.name || index];\n      }\n    });\n\n    return new this.NamedTuple(...array);\n  }\n}\n\nmodule.exports = EventCoder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/event/EventCoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/event/LogFilter.js":
/*!*********************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/event/LogFilter.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("class LogFilter {\n  constructor({ address, topics }, event) {\n    this.address = address;\n    this.topics = topics;\n    Reflect.defineProperty(this, 'event', { value: event }); // XXX: use defineProperty to avoid from JSON.stringify\n  }\n\n  async getLogs(options = {}) {\n    const logs = await this.event.conflux.cfx.getLogs({ ...this, ...options });\n\n    logs.forEach(log => {\n      log.arguments = this.event.decodeLog(log);\n    });\n\n    return logs;\n  }\n\n  async subscribeLogs(options = {}) {\n    const subscription = await this.event.conflux.subscribeLogs({ ...this, ...options });\n\n    subscription.on('data', log => {\n      log.arguments = this.event.decodeLog(log);\n    });\n\n    return subscription;\n  }\n}\n\nmodule.exports = LogFilter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L2V2ZW50L0xvZ0ZpbHRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdCQUFnQixpQkFBaUI7QUFDakM7QUFDQTtBQUNBLDRDQUE0QyxjQUFjLEdBQUc7QUFDN0Q7O0FBRUEsNEJBQTRCO0FBQzVCLHdEQUF3RCxxQkFBcUI7O0FBRTdFO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUEsa0NBQWtDO0FBQ2xDLGtFQUFrRSxxQkFBcUI7O0FBRXZGO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL3Zpa2FzaHlhZGF2L0RldmVsb3Blci9BbGxnaXRGaWxlcy9Db25mbHV4LVR4bi12aXN1YWxpemVyL25vZGVfbW9kdWxlcy9qcy1jb25mbHV4LXNkay9zcmMvY29udHJhY3QvZXZlbnQvTG9nRmlsdGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIExvZ0ZpbHRlciB7XG4gIGNvbnN0cnVjdG9yKHsgYWRkcmVzcywgdG9waWNzIH0sIGV2ZW50KSB7XG4gICAgdGhpcy5hZGRyZXNzID0gYWRkcmVzcztcbiAgICB0aGlzLnRvcGljcyA9IHRvcGljcztcbiAgICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdldmVudCcsIHsgdmFsdWU6IGV2ZW50IH0pOyAvLyBYWFg6IHVzZSBkZWZpbmVQcm9wZXJ0eSB0byBhdm9pZCBmcm9tIEpTT04uc3RyaW5naWZ5XG4gIH1cblxuICBhc3luYyBnZXRMb2dzKG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGxvZ3MgPSBhd2FpdCB0aGlzLmV2ZW50LmNvbmZsdXguY2Z4LmdldExvZ3MoeyAuLi50aGlzLCAuLi5vcHRpb25zIH0pO1xuXG4gICAgbG9ncy5mb3JFYWNoKGxvZyA9PiB7XG4gICAgICBsb2cuYXJndW1lbnRzID0gdGhpcy5ldmVudC5kZWNvZGVMb2cobG9nKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBsb2dzO1xuICB9XG5cbiAgYXN5bmMgc3Vic2NyaWJlTG9ncyhvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBhd2FpdCB0aGlzLmV2ZW50LmNvbmZsdXguc3Vic2NyaWJlTG9ncyh7IC4uLnRoaXMsIC4uLm9wdGlvbnMgfSk7XG5cbiAgICBzdWJzY3JpcHRpb24ub24oJ2RhdGEnLCBsb2cgPT4ge1xuICAgICAgbG9nLmFyZ3VtZW50cyA9IHRoaXMuZXZlbnQuZGVjb2RlTG9nKGxvZyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTG9nRmlsdGVyO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/event/LogFilter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/index.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const lodash = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nconst { parseABIFromString } = __webpack_require__(/*! abi-util-lite */ \"(ssr)/./node_modules/abi-util-lite/lib/esm/index.js\");\nconst ContractABI = __webpack_require__(/*! ./ContractABI */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/ContractABI.js\");\nconst ContractConstructor = __webpack_require__(/*! ./method/ContractConstructor */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/method/ContractConstructor.js\");\nconst ContractMethod = __webpack_require__(/*! ./method/ContractMethod */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/method/ContractMethod.js\");\nconst ContractMethodOverride = __webpack_require__(/*! ./method/ContractMethodOverride */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/method/ContractMethodOverride.js\");\nconst ContractEvent = __webpack_require__(/*! ./event/ContractEvent */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/event/ContractEvent.js\");\nconst ContractEventOverride = __webpack_require__(/*! ./event/ContractEventOverride */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/event/ContractEventOverride.js\");\nconst ErrorCoder = __webpack_require__(/*! ./method/ErrorCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/method/ErrorCoder.js\");\n\n/**\n * Contract with all its methods and events defined in its abi.\n */\nclass Contract {\n  /**\n   * > contract \"code\" definition:\n   * ```\n   * 6080................6080.................a264.........0033...............................\n   * | <-                     create contract transaction `data`                          -> |\n   * | <- deploy code -> | <- runtime code -> | <- metadata -> | <- constructor arguments -> |\n   * | <-                contract `bytecode`                -> |\n   *                     | <-       code as `getCode`       -> |\n   * ```\n   *\n   * @param {object} options\n   * @param {array} options.abi - The json interface for the contract to instantiate\n   * @param {string} [options.address] - The address of the smart contract to call, can be added later using `contract.address = '0x1234...'`\n   * @param {string} [options.bytecode] - The byte code of the contract, can be added later using `contract.constructor.code = '0x1234...'`\n   * @param {boolean} [options.decodeByteToHex=false] - Whether decode bytes to hex string, default will decoe to Buffer.\n   * @param {import('../Conflux').Conflux} conflux - Conflux instance.\n   * @return {object}\n   *\n   * @example\n   * > const contract = conflux.Contract({ abi, bytecode, address });\n   {\n      abi: ContractABI { contract: [Circular *1] },\n      address: 'cfxtest:achc8nxj7r451c223m18w2dwjnmhkd6rxa2gc31euw',\n      constructor: [Function: bound call],\n      name: [Function: bound call],\n      'name()': [Function: bound call],\n      '0x06fdde03': [Function: bound call],\n      balanceOf: [Function: bound call],\n      'balanceOf(address)': [Function: bound call],\n      '0x70a08231': [Function: bound call],\n      send: [Function: bound call],\n      'send(address,uint256,bytes)': [Function: bound call],\n      '0x9bd9bbc6': [Function: bound call],\n      Transfer: [Function: bound call],\n      'Transfer(address,address,uint256)': [Function: bound call],\n      '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef': [Function: bound call]\n   }\n\n   * > contract.constructor.bytecode; // input code\n   \"0x6080...\"\n\n   * @example\n   * > const contract = conflux.Contract({\n   address: 'cfxtest:achc8nxj7r451c223m18w2dwjnmhkd6rxa2gc31euw',\n   abi: [\n      {\n        type: 'function',\n        name: 'name',\n        inputs: [],\n        outputs: [{ type: 'string' }],\n      },\n      {\n        type: 'function',\n        name: 'balanceOf',\n        inputs: [{ type: 'address' }],\n        outputs: [{ type: 'uint256' }],\n      },\n      {\n        name: 'send',\n        type: 'function',\n        inputs: [\n          { type: 'address', name: 'recipient' },\n          { type: 'uint256', name: 'amount' },\n          { type: 'bytes', name: 'data' },\n        ],\n        outputs: [{ type: 'bool' }],\n      },\n    ]\n   });\n   * > contract.address\n   \"cfxtest:achc8nxj7r451c223m18w2dwjnmhkd6rxa2gc31euw\"\n\n   * > await contract.name(); // call a method without parameter, get decoded return value.\n   \"FansCoin\"\n   * > await contract.name().call({ to: '0x8b8689c7f3014a4d86e4d1d0daaf74a47f5e0f27' }); // call a method with options\n   \"conflux USDT\"\n   * > await contract.balanceOf('0x19c742cec42b9e4eff3b84cdedcde2f58a36f44f'); // call a method with parameters, get decoded return value.\n   10000000000000000000n\n\n   * Update contract state with sendTransaction\n   * > await contract.transfer('0x19c742cec42b9e4eff3b84cdedcde2f58a36f44f', 10000).sendTransaction({\n     from: 'cfxtest:aak2rra2njvd77ezwjvx04kkds9fzagfe6d5r8e957',\n   });\n   0x2055f3287f1a6ce77d91f5dfdf7517a531b3a560fee1265f27dc1ff92314530b\n\n   * > transaction = await conflux.getTransactionByHash('0x2055f3287f1a6ce77d91f5dfdf7517a531b3a560fee1265f27dc1ff92314530b');\n   * > contract.abi.decodeData(transaction.data)\n   {\n      name: 'send',\n      fullName: 'send(address recipient, uint256 amount, bytes data)',\n      type: 'send(address,uint256,bytes)',\n      signature: '0x9bd9bbc6',\n      array: [\n        '0x80bb30efc5683758128b404fe5da03432eb16634',\n        60000000000000000000n,\n        <Buffer 1f 3c 6b 96 96 60 4c dc 3c e1 ca 27 7d 4c 69 a9 c2 77 0c 9f>\n      ],\n      object: {\n        recipient: '0x80bb30efc5683758128b404fe5da03432eb16634',\n        amount: 60000000000000000000n,\n        data: <Buffer 1f 3c 6b 96 96 60 4c dc 3c e1 ca 27 7d 4c 69 a9 c2 77 0c 9f>\n      }\n    }\n\n   * > receipt = await conflux.getTransactionReceipt('0x2055f3287f1a6ce77d91f5dfdf7517a531b3a560fee1265f27dc1ff92314530b');\n   * > contract.abi.decodeLog(receipt.logs[1]);\n   {\n      name: 'Transfer',\n      fullName: 'Transfer(address indexed from, address indexed to, uint256 value)',\n      type: 'Transfer(address,address,uint256)',\n      signature: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n      array: [\n        '0x1f3c6b9696604cdc3ce1ca277d4c69a9c2770c9f',\n        '0x80bb30efc5683758128b404fe5da03432eb16634',\n        60000000000000000000n\n      ],\n      object: {\n        from: '0x1f3c6b9696604cdc3ce1ca277d4c69a9c2770c9f',\n        to: '0x80bb30efc5683758128b404fe5da03432eb16634',\n        value: 60000000000000000000n\n      }\n    }\n   */\n  constructor({ abi, address, bytecode, decodeByteToHex }, conflux) {\n    if (abi.length > 0 && typeof abi[0] === 'string') {\n      abi = parseABIFromString(abi);\n    }\n    _feedAddressNetId(abi, conflux);\n    _feedByteOption(abi, decodeByteToHex);\n    const abiTable = lodash.groupBy(abi, 'type');\n    this.abi = new ContractABI(this); // XXX: Create a method named `abi` in solidity is a `Warning`.\n\n    if (address) {\n      this.address = (conflux && conflux.networkId) ? conflux._formatAddress(address) : address; // XXX: Create a method named `address` in solidity is a `ParserError`\n    }\n\n    // constructor\n    this.constructor = new ContractConstructor(lodash.first(abiTable.constructor), bytecode, this, conflux);\n\n    // method\n    const methodArray = lodash.map(abiTable.function, fragment => new ContractMethod(fragment, this, conflux));\n    lodash.forEach(lodash.groupBy(methodArray, 'name'), (array, name) => {\n      this[name] = array.length === 1 ? lodash.first(array) : new ContractMethodOverride(array, this, conflux);\n\n      array.forEach(method => {\n        this[method.type] = method;\n        this[method.signature] = method; // signature for contract abi decoder to decode\n      });\n    });\n\n    // event\n    const eventArray = lodash.map(abiTable.event, fragment => new ContractEvent(fragment, this, conflux));\n    lodash.forEach(lodash.groupBy(eventArray, 'name'), (array, name) => {\n      this[name] = array.length === 1 ? lodash.first(array) : new ContractEventOverride(array, this, conflux);\n\n      array.forEach(event => {\n        this[event.type] = event;\n        this[event.signature] = event; // signature for contract abi decoder to decode\n      });\n    });\n  }\n\n  attach(address) {\n    this.address = address;\n  }\n}\n\nfunction _feedAddressNetId(abi, conflux) {\n  if (!abi || !conflux || !conflux.networkId) return;\n\n  for (const item of abi) {\n    if (['function', 'event', 'constructor'].indexOf(item.type) >= 0) {\n      _feedInfo(item.inputs);\n      _feedInfo(item.outputs);\n    }\n  }\n\n  function _feedInfo(items = []) {\n    for (const meta of items) {\n      if (meta.type === 'address') {\n        meta.networkId = conflux.networkId;\n      }\n      if (meta.type === 'tuple') {\n        _feedInfo(meta.components);\n      }\n    }\n  }\n}\n\nfunction _feedByteOption(abi, decodeByteToHex = false) {\n  if (!abi || !decodeByteToHex) return;\n\n  for (const item of abi) {\n    if (['function', 'event', 'constructor'].indexOf(item.type) >= 0) {\n      _feedOption(item.inputs);\n      _feedOption(item.outputs);\n    }\n  }\n\n  function _feedOption(items = []) {\n    for (const meta of items) {\n      if (meta.type.startsWith('bytes')) {\n        meta._decodeToHex = true;\n      }\n      if (meta.type === 'tuple') {\n        _feedOption(meta.components);\n      }\n    }\n  }\n}\n\nmodule.exports = Contract;\n\nconst errorCoder = new ErrorCoder();\nmodule.exports.decodeError = e => errorCoder.decodeError(e);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/internal/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/internal/index.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("const AdminControl = {\n  abi: [\n    'function getAdmin(address contractAddr) public view returns (address)',\n    'function setAdmin(address contractAddr, address newAdmin)',\n    'function destroy(address contractAddr)',\n  ],\n  address: '0x0888000000000000000000000000000000000000',\n};\n\nconst SponsorWhitelistControl = {\n  abi: [\n    'function getSponsorForGas(address contractAddr) public view returns (address)',\n    'function getSponsoredBalanceForGas(address contractAddr) public view returns (uint256)',\n    'function getSponsoredGasFeeUpperBound(address contractAddr) public view returns (uint256)',\n    'function getSponsorForCollateral(address contractAddr) public view returns (address)',\n    'function getSponsoredBalanceForCollateral(address contractAddr) public view returns (uint256)',\n    'function isWhitelisted(address contractAddr, address user) public view returns (bool)',\n    'function isAllWhitelisted(address contractAddr) public view returns (bool)',\n    'function addPrivilegeByAdmin(address contractAddr, address[] memory addresses)',\n    'function removePrivilegeByAdmin(address contractAddr, address[] memory addresses)',\n    'function setSponsorForGas(address contractAddr, uint upperBound)',\n    'function setSponsorForCollateral(address contractAddr)',\n    'function getAvailableStoragePoints(address contractAddr) public view returns (uint256)',\n    // 'function addPrivilege(address[] memory)',\n    // 'function removePrivilege(address[] memory)',\n  ],\n  address: '0x0888000000000000000000000000000000000001',\n};\n\nconst Staking = {\n  abi: [\n    'function getStakingBalance(address user) public view returns (uint256)',\n    'function getLockedStakingBalance(address user, uint256 blockNumber) public view returns (uint256)',\n    'function getVotePower(address user, uint256 blockNumber) public view returns (uint256)',\n    'function deposit(uint256 amount)',\n    'function withdraw(uint256 amount)',\n    'function voteLock(uint256 amount, uint256 unlockBlockNumber)',\n  ],\n  address: '0x0888000000000000000000000000000000000002',\n};\n\n/* const ConfluxContext = {\n  abi: [\n    'function epochNumber() public view returns (uint256)',\n    'function posHeight() public view returns (uint256)',\n    'function finalizedEpochNumber() public view returns (uint256)',\n  ],\n  address: '0x0888000000000000000000000000000000000004',\n}; */\n\nconst PoSRegister = {\n  abi: [\n    'function register(bytes32 identifier, uint64 votePower, bytes calldata blsPubKey, bytes calldata vrfPubKey, bytes[2] calldata blsPubKeyProof)',\n    'function increaseStake(uint64 votePower)',\n    'function retire(uint64 votePower)',\n    'function getVotes(bytes32 identifier) external view returns (uint256, uint256)',\n    'function identifierToAddress(bytes32 identifier) external view returns (address)',\n    'function addressToIdentifier(address addr) external view returns (bytes32)',\n    'event Register(bytes32 indexed identifier, bytes blsPubKey, bytes vrfPubKey)',\n    'event IncreaseStake(bytes32 indexed identifier, uint64 votePower)',\n    'event Retire(bytes32 indexed identifier, uint64 votePower)',\n  ],\n  address: '0x0888000000000000000000000000000000000005',\n};\n\nconst CrossSpaceCall = {\n  abi: [\n    'event Call(bytes20 indexed sender, bytes20 indexed receiver, uint256 value, uint256 nonce, bytes data)',\n    'event Create(bytes20 indexed sender, bytes20 indexed contract_address, uint256 value, uint256 nonce, bytes init)',\n    'event Withdraw(bytes20 indexed sender, address indexed receiver, uint256 value, uint256 nonce)',\n    'event Outcome(bool success)',\n    'function createEVM(bytes calldata init) external payable returns (bytes20)',\n    'function transferEVM(bytes20 to) external payable returns (bytes memory output)',\n    'function callEVM(bytes20 to, bytes calldata data) external payable returns (bytes memory output)',\n    'function staticCallEVM(bytes20 to, bytes calldata data) external view returns (bytes memory output)',\n    'function withdrawFromMapped(uint256 value)',\n    'function mappedBalance(address addr) external view returns (uint256)',\n    'function mappedNonce(address addr) external view returns (uint256)',\n  ],\n  address: '0x0888000000000000000000000000000000000006',\n};\n\nconst ParamsControl = {\n  abi: [\n    'function castVote(uint64 vote_round, tuple(uint16 topic_index, uint256[3] votes)[] vote_data)',\n    'function readVote(address addr) view returns (tuple(uint16 topic_index, uint256[3] votes)[])',\n    'function currentRound() external view returns (uint64)',\n    'function totalVotes(uint64 vote_round) external view returns (tuple(uint16 topic_index, uint256[3] votes)[])',\n    'function posStakeForVotes(uint64) external view returns (uint256)',\n    'event CastVote(uint64 indexed vote_round, address indexed addr, uint16 indexed topic_index, uint256[3] votes)',\n    'event RevokeVote(uint64 indexed vote_round, address indexed addr, uint16 indexed topic_index, uint256[3] votes)',\n  ],\n  address: '0x0888000000000000000000000000000000000007',\n};\n\nmodule.exports = {\n  AdminControl,\n  SponsorWhitelistControl,\n  Staking,\n  // ConfluxContext,\n  PoSRegister,\n  CrossSpaceCall,\n  ParamsControl,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/internal/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/method/ContractConstructor.js":
/*!********************************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/method/ContractConstructor.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const lodash = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nconst ContractMethod = __webpack_require__(/*! ./ContractMethod */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/method/ContractMethod.js\");\nconst { WORD_CHARS } = __webpack_require__(/*! ../../CONST */ \"(ssr)/./node_modules/js-conflux-sdk/src/CONST.js\");\n\nclass ContractConstructor extends ContractMethod {\n  constructor(fragment, bytecode, contract, conflux) {\n    super(lodash.defaults(fragment, { name: 'constructor', inputs: [] }), contract, conflux);\n\n    this.signature = ''; // MUST be '' for `super.encodeData`\n    this.bytecode = bytecode;\n    this.decodeOutputs = hex => hex;\n  }\n\n  call(...args) {\n    if (!this.bytecode) {\n      throw new Error('bytecode is empty');\n    }\n\n    const transaction = super.call(...args);\n    transaction.to = null;\n    return transaction;\n  }\n\n  /**\n   * Encode contract deploy data\n   *\n   * @param {array} args\n   * @return {string}\n   */\n  encodeData(args) {\n    return `${this.bytecode}${super.encodeData(args)}`;\n  }\n\n  /**\n   * Reverse try to decode word by word\n   *\n   * @param {string} hex - Hex string\n   * @return {array} NamedTuple\n   */\n  decodeData(hex) {\n    for (let index = WORD_CHARS; index <= hex.length; index += WORD_CHARS) {\n      try {\n        return super.decodeData(hex.slice(-index));\n      } catch (e) {\n        // pass\n      }\n    }\n    return undefined;\n  }\n}\n\nmodule.exports = ContractConstructor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L21ldGhvZC9Db250cmFjdENvbnN0cnVjdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFBLGVBQWUsbUJBQU8sQ0FBQyxxREFBUTtBQUMvQix1QkFBdUIsbUJBQU8sQ0FBQyxtR0FBa0I7QUFDakQsUUFBUSxhQUFhLEVBQUUsbUJBQU8sQ0FBQyxxRUFBYTs7QUFFNUM7QUFDQTtBQUNBLHNDQUFzQyxpQ0FBaUM7O0FBRXZFLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGNBQWM7QUFDZDtBQUNBO0FBQ0EsY0FBYyxjQUFjLEVBQUUsdUJBQXVCO0FBQ3JEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBLGlDQUFpQyxxQkFBcUI7QUFDdEQ7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWthc2h5YWRhdi9EZXZlbG9wZXIvQWxsZ2l0RmlsZXMvQ29uZmx1eC1UeG4tdmlzdWFsaXplci9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L21ldGhvZC9Db250cmFjdENvbnN0cnVjdG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGxvZGFzaCA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuY29uc3QgQ29udHJhY3RNZXRob2QgPSByZXF1aXJlKCcuL0NvbnRyYWN0TWV0aG9kJyk7XG5jb25zdCB7IFdPUkRfQ0hBUlMgfSA9IHJlcXVpcmUoJy4uLy4uL0NPTlNUJyk7XG5cbmNsYXNzIENvbnRyYWN0Q29uc3RydWN0b3IgZXh0ZW5kcyBDb250cmFjdE1ldGhvZCB7XG4gIGNvbnN0cnVjdG9yKGZyYWdtZW50LCBieXRlY29kZSwgY29udHJhY3QsIGNvbmZsdXgpIHtcbiAgICBzdXBlcihsb2Rhc2guZGVmYXVsdHMoZnJhZ21lbnQsIHsgbmFtZTogJ2NvbnN0cnVjdG9yJywgaW5wdXRzOiBbXSB9KSwgY29udHJhY3QsIGNvbmZsdXgpO1xuXG4gICAgdGhpcy5zaWduYXR1cmUgPSAnJzsgLy8gTVVTVCBiZSAnJyBmb3IgYHN1cGVyLmVuY29kZURhdGFgXG4gICAgdGhpcy5ieXRlY29kZSA9IGJ5dGVjb2RlO1xuICAgIHRoaXMuZGVjb2RlT3V0cHV0cyA9IGhleCA9PiBoZXg7XG4gIH1cblxuICBjYWxsKC4uLmFyZ3MpIHtcbiAgICBpZiAoIXRoaXMuYnl0ZWNvZGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYnl0ZWNvZGUgaXMgZW1wdHknKTtcbiAgICB9XG5cbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHN1cGVyLmNhbGwoLi4uYXJncyk7XG4gICAgdHJhbnNhY3Rpb24udG8gPSBudWxsO1xuICAgIHJldHVybiB0cmFuc2FjdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmNvZGUgY29udHJhY3QgZGVwbG95IGRhdGFcbiAgICpcbiAgICogQHBhcmFtIHthcnJheX0gYXJnc1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBlbmNvZGVEYXRhKGFyZ3MpIHtcbiAgICByZXR1cm4gYCR7dGhpcy5ieXRlY29kZX0ke3N1cGVyLmVuY29kZURhdGEoYXJncyl9YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXZlcnNlIHRyeSB0byBkZWNvZGUgd29yZCBieSB3b3JkXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBoZXggLSBIZXggc3RyaW5nXG4gICAqIEByZXR1cm4ge2FycmF5fSBOYW1lZFR1cGxlXG4gICAqL1xuICBkZWNvZGVEYXRhKGhleCkge1xuICAgIGZvciAobGV0IGluZGV4ID0gV09SRF9DSEFSUzsgaW5kZXggPD0gaGV4Lmxlbmd0aDsgaW5kZXggKz0gV09SRF9DSEFSUykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmRlY29kZURhdGEoaGV4LnNsaWNlKC1pbmRleCkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBwYXNzXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb250cmFjdENvbnN0cnVjdG9yO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/method/ContractConstructor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/method/ContractMethod.js":
/*!***************************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/method/ContractMethod.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const callable = __webpack_require__(/*! ../../util/callable */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/callable.js\");\nconst MethodTransaction = __webpack_require__(/*! ./MethodTransaction */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/method/MethodTransaction.js\");\nconst FunctionCoder = __webpack_require__(/*! ./FunctionCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/method/FunctionCoder.js\");\n\nclass ContractMethod extends FunctionCoder {\n  constructor(fragment, contract, conflux) {\n    super(fragment);\n    this.contract = contract;\n    this.conflux = conflux;\n\n    return callable(this, this.call.bind(this));\n  }\n\n  call(...args) {\n    const to = this.contract.address; // dynamic get `contract.address`\n    const data = this.encodeData(args);\n    return new MethodTransaction({ to, data }, this);\n  }\n}\n\nmodule.exports = ContractMethod;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L21ldGhvZC9Db250cmFjdE1ldGhvZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQyxxRkFBcUI7QUFDOUMsMEJBQTBCLG1CQUFPLENBQUMseUdBQXFCO0FBQ3ZELHNCQUFzQixtQkFBTyxDQUFDLGlHQUFpQjs7QUFFL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0EsbUNBQW1DLFVBQVU7QUFDN0M7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL3Zpa2FzaHlhZGF2L0RldmVsb3Blci9BbGxnaXRGaWxlcy9Db25mbHV4LVR4bi12aXN1YWxpemVyL25vZGVfbW9kdWxlcy9qcy1jb25mbHV4LXNkay9zcmMvY29udHJhY3QvbWV0aG9kL0NvbnRyYWN0TWV0aG9kLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNhbGxhYmxlID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9jYWxsYWJsZScpO1xuY29uc3QgTWV0aG9kVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL01ldGhvZFRyYW5zYWN0aW9uJyk7XG5jb25zdCBGdW5jdGlvbkNvZGVyID0gcmVxdWlyZSgnLi9GdW5jdGlvbkNvZGVyJyk7XG5cbmNsYXNzIENvbnRyYWN0TWV0aG9kIGV4dGVuZHMgRnVuY3Rpb25Db2RlciB7XG4gIGNvbnN0cnVjdG9yKGZyYWdtZW50LCBjb250cmFjdCwgY29uZmx1eCkge1xuICAgIHN1cGVyKGZyYWdtZW50KTtcbiAgICB0aGlzLmNvbnRyYWN0ID0gY29udHJhY3Q7XG4gICAgdGhpcy5jb25mbHV4ID0gY29uZmx1eDtcblxuICAgIHJldHVybiBjYWxsYWJsZSh0aGlzLCB0aGlzLmNhbGwuYmluZCh0aGlzKSk7XG4gIH1cblxuICBjYWxsKC4uLmFyZ3MpIHtcbiAgICBjb25zdCB0byA9IHRoaXMuY29udHJhY3QuYWRkcmVzczsgLy8gZHluYW1pYyBnZXQgYGNvbnRyYWN0LmFkZHJlc3NgXG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZW5jb2RlRGF0YShhcmdzKTtcbiAgICByZXR1cm4gbmV3IE1ldGhvZFRyYW5zYWN0aW9uKHsgdG8sIGRhdGEgfSwgdGhpcyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb250cmFjdE1ldGhvZDtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/method/ContractMethod.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/method/ContractMethodOverride.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/method/ContractMethodOverride.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const lodash = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nconst callable = __webpack_require__(/*! ../../util/callable */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/callable.js\");\n\nclass ContractMethodOverride {\n  constructor(methods, contract, conflux) {\n    this.signatureToMethod = lodash.keyBy(methods, 'signature');\n    this.contract = contract;\n    this.conflux = conflux;\n\n    return callable(this, this.call.bind(this));\n  }\n\n  call(...args) {\n    const acceptArray = [];\n    const rejectArray = [];\n\n    let transaction;\n    for (const method of Object.values(this.signatureToMethod)) {\n      try {\n        transaction = method(...args);\n        acceptArray.push(method.type);\n      } catch (e) {\n        rejectArray.push(method.type);\n      }\n    }\n\n    if (!acceptArray.length) {\n      throw new Error(`can not match override \"${rejectArray.join('|')}\" with args (${args.join(',')})`);\n    }\n    if (acceptArray.length > 1) {\n      throw new Error(`can not determine override \"${acceptArray.join('|')}\" with args (${args.join(',')})`);\n    }\n\n    return transaction;\n  }\n\n  decodeData(hex) {\n    const signature = hex.slice(0, 10); // '0x' + 8 hex\n    const method = this.signatureToMethod[signature];\n    return method.decodeData(hex);\n  }\n}\n\nmodule.exports = ContractMethodOverride;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L21ldGhvZC9Db250cmFjdE1ldGhvZE92ZXJyaWRlLmpzIiwibWFwcGluZ3MiOiJBQUFBLGVBQWUsbUJBQU8sQ0FBQyxxREFBUTtBQUMvQixpQkFBaUIsbUJBQU8sQ0FBQyxxRkFBcUI7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpREFBaUQsc0JBQXNCLGVBQWUsZUFBZTtBQUNyRztBQUNBO0FBQ0EscURBQXFELHNCQUFzQixlQUFlLGVBQWU7QUFDekc7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL3Zpa2FzaHlhZGF2L0RldmVsb3Blci9BbGxnaXRGaWxlcy9Db25mbHV4LVR4bi12aXN1YWxpemVyL25vZGVfbW9kdWxlcy9qcy1jb25mbHV4LXNkay9zcmMvY29udHJhY3QvbWV0aG9kL0NvbnRyYWN0TWV0aG9kT3ZlcnJpZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbG9kYXNoID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5jb25zdCBjYWxsYWJsZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvY2FsbGFibGUnKTtcblxuY2xhc3MgQ29udHJhY3RNZXRob2RPdmVycmlkZSB7XG4gIGNvbnN0cnVjdG9yKG1ldGhvZHMsIGNvbnRyYWN0LCBjb25mbHV4KSB7XG4gICAgdGhpcy5zaWduYXR1cmVUb01ldGhvZCA9IGxvZGFzaC5rZXlCeShtZXRob2RzLCAnc2lnbmF0dXJlJyk7XG4gICAgdGhpcy5jb250cmFjdCA9IGNvbnRyYWN0O1xuICAgIHRoaXMuY29uZmx1eCA9IGNvbmZsdXg7XG5cbiAgICByZXR1cm4gY2FsbGFibGUodGhpcywgdGhpcy5jYWxsLmJpbmQodGhpcykpO1xuICB9XG5cbiAgY2FsbCguLi5hcmdzKSB7XG4gICAgY29uc3QgYWNjZXB0QXJyYXkgPSBbXTtcbiAgICBjb25zdCByZWplY3RBcnJheSA9IFtdO1xuXG4gICAgbGV0IHRyYW5zYWN0aW9uO1xuICAgIGZvciAoY29uc3QgbWV0aG9kIG9mIE9iamVjdC52YWx1ZXModGhpcy5zaWduYXR1cmVUb01ldGhvZCkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRyYW5zYWN0aW9uID0gbWV0aG9kKC4uLmFyZ3MpO1xuICAgICAgICBhY2NlcHRBcnJheS5wdXNoKG1ldGhvZC50eXBlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0QXJyYXkucHVzaChtZXRob2QudHlwZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFhY2NlcHRBcnJheS5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgY2FuIG5vdCBtYXRjaCBvdmVycmlkZSBcIiR7cmVqZWN0QXJyYXkuam9pbignfCcpfVwiIHdpdGggYXJncyAoJHthcmdzLmpvaW4oJywnKX0pYCk7XG4gICAgfVxuICAgIGlmIChhY2NlcHRBcnJheS5sZW5ndGggPiAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbiBub3QgZGV0ZXJtaW5lIG92ZXJyaWRlIFwiJHthY2NlcHRBcnJheS5qb2luKCd8Jyl9XCIgd2l0aCBhcmdzICgke2FyZ3Muam9pbignLCcpfSlgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNhY3Rpb247XG4gIH1cblxuICBkZWNvZGVEYXRhKGhleCkge1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IGhleC5zbGljZSgwLCAxMCk7IC8vICcweCcgKyA4IGhleFxuICAgIGNvbnN0IG1ldGhvZCA9IHRoaXMuc2lnbmF0dXJlVG9NZXRob2Rbc2lnbmF0dXJlXTtcbiAgICByZXR1cm4gbWV0aG9kLmRlY29kZURhdGEoaGV4KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbnRyYWN0TWV0aG9kT3ZlcnJpZGU7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/method/ContractMethodOverride.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/method/ErrorCoder.js":
/*!***********************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/method/ErrorCoder.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const FunctionCoder = __webpack_require__(/*! ./FunctionCoder */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/method/FunctionCoder.js\");\n\nclass ErrorCoder extends FunctionCoder {\n  constructor() {\n    super({ name: 'Error', inputs: [{ type: 'string', name: 'message' }] });\n  }\n\n  decodeError(error) {\n    try {\n      const { message } = this.decodeData(error.data);\n      return new Error(message);\n    } catch (e) {\n      return error;\n    }\n  }\n}\n\nmodule.exports = ErrorCoder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L21ldGhvZC9FcnJvckNvZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHNCQUFzQixtQkFBTyxDQUFDLGlHQUFpQjs7QUFFL0M7QUFDQTtBQUNBLFlBQVksMEJBQTBCLGlDQUFpQyxHQUFHO0FBQzFFOztBQUVBO0FBQ0E7QUFDQSxjQUFjLFVBQVU7QUFDeEI7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWthc2h5YWRhdi9EZXZlbG9wZXIvQWxsZ2l0RmlsZXMvQ29uZmx1eC1UeG4tdmlzdWFsaXplci9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L21ldGhvZC9FcnJvckNvZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEZ1bmN0aW9uQ29kZXIgPSByZXF1aXJlKCcuL0Z1bmN0aW9uQ29kZXInKTtcblxuY2xhc3MgRXJyb3JDb2RlciBleHRlbmRzIEZ1bmN0aW9uQ29kZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcih7IG5hbWU6ICdFcnJvcicsIGlucHV0czogW3sgdHlwZTogJ3N0cmluZycsIG5hbWU6ICdtZXNzYWdlJyB9XSB9KTtcbiAgfVxuXG4gIGRlY29kZUVycm9yKGVycm9yKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgbWVzc2FnZSB9ID0gdGhpcy5kZWNvZGVEYXRhKGVycm9yLmRhdGEpO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZXJyb3I7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRXJyb3JDb2RlcjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/method/ErrorCoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/method/FunctionCoder.js":
/*!**************************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/method/FunctionCoder.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { assert } = __webpack_require__(/*! ../../util */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\nconst format = __webpack_require__(/*! ../../util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\nconst HexStream = __webpack_require__(/*! ../../util/HexStream */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/HexStream.js\");\nconst { formatType, formatFullName, valueCoder } = __webpack_require__(/*! ../abi */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/abi/index.js\");\n\nclass FunctionCoder {\n  /**\n   * Function coder\n   *\n   * @param {object} options\n   * @param {string} [options.name]\n   * @param {array} [options.inputs]\n   * @param {array} [options.outputs]\n   * @param {string} [options.stateMutability='nonpayable']\n   *\n   * @example\n   * > abi = { name: 'func', inputs: [{ type: 'int' }, { type: 'bool' }], outputs: [{ type: 'int' }] }\n   * > coder = new FunctionCoder(abi)\n   FunctionCoder {\n      name: 'func',\n      fullName: 'func(int256 , bool )',\n      inputs: [ { type: 'int' }, { type: 'bool' } ],\n      outputs: [ { type: 'int' } ],\n      type: 'func(int256,bool)'\n    }\n   */\n  constructor({ name, inputs = [], outputs = [], stateMutability = 'nonpayable' }) {\n    this.name = name; // example: \"add\"\n    this.fullName = formatFullName({ name, inputs }); // example: \"add(uint number, uint count)\"\n    this.type = formatType({ name, inputs }); // example: \"add(uint,uint)\"\n    this.signature = format.keccak256(this.type).slice(0, 10); // example: \"0xb8966352\"\n    this.stateMutability = stateMutability;\n\n    this.inputCoder = valueCoder({ type: 'tuple', components: inputs });\n    this.outputCoder = valueCoder({ type: 'tuple', components: outputs });\n  }\n\n  /**\n   * Get function signature by abi (json interface)\n   *\n   * @param {array} args\n   * @return {string}\n   *\n   * @example\n   * > abi = { name: 'func', inputs: [{ type: 'int' }, { type: 'bool' }], outputs: [{ type: 'int' }] }\n   * > coder = new FunctionCoder(abi)\n   * > coder.encodeData([100, true])\n   \"0x1eee72c100000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000001\"\n   */\n  encodeData(args) {\n    const hex = format.hex(this.inputCoder.encode(args));\n    return `${this.signature}${hex.substring(2)}`;\n  }\n\n  /**\n   * Decode data hex with inputs by abi (json interface)\n   *\n   * @param {string} hex  - Hex string\n   * @return {array} NamedTuple\n   *\n   * @example\n   * > abi = { name: 'func', inputs: [{ type: 'int' }, { type: 'bool' }], outputs: [{ type: 'int' }] }\n   * > coder = new FunctionCoder(abi)\n   * > result = coder.decodeData('0x15fb272000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000001')\n   NamedTuple(0,1) [ 100n, true ]\n   * > console.log([...result])\n   [ 100n, true ]\n   * > console.log(result[0])\n   100\n   * > console.log(result[1])\n   true\n   */\n  decodeData(hex) {\n    const prefix = hex.slice(0, this.signature.length);\n    assert(prefix === this.signature, {\n      message: 'decodeData unexpected signature',\n      expect: this.signature,\n      got: prefix,\n      coder: this.fullName,\n    });\n\n    const data = hex.slice(this.signature.length);\n    const stream = new HexStream(data);\n    const tuple = this.inputCoder.decode(stream);\n    assert(stream.eof(), {\n      message: 'hex length too large',\n      expect: `${stream.string.length}`,\n      got: stream.index,\n      coder: this.fullName,\n    });\n\n    return tuple;\n  }\n\n  /**\n   * Decode hex with outputs by abi (json interface)\n   *\n   * @param {string} hex - Hex string\n   * @return {array} NamedTuple\n   *\n   * @example\n   * > abi = { name: 'func', inputs: [{ type: 'int' }, { type: 'bool' }], outputs: [{ type: 'int' }] }\n   * > coder = new FunctionCoder(abi)\n   * > result = coder.decodeOutputs('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n   NamedTuple(0) [ -1n ]\n   * > console.log([...result])\n   [-1n]\n   * > console.log(result[0])\n   -1n\n   */\n  decodeOutputs(hex) {\n    const stream = new HexStream(hex);\n    const tuple = this.outputCoder.decode(stream);\n\n    assert(stream.eof(), {\n      message: 'hex length too large',\n      expect: `${stream.string.length}`,\n      got: stream.index,\n      coder: this.fullName,\n    });\n\n    return tuple.length <= 1 ? tuple[0] : tuple;\n  }\n}\n\nmodule.exports = FunctionCoder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L21ldGhvZC9GdW5jdGlvbkNvZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLFFBQVEsU0FBUyxFQUFFLG1CQUFPLENBQUMseUVBQVk7QUFDdkMsZUFBZSxtQkFBTyxDQUFDLGlGQUFtQjtBQUMxQyxrQkFBa0IsbUJBQU8sQ0FBQyx1RkFBc0I7QUFDaEQsUUFBUSx5Q0FBeUMsRUFBRSxtQkFBTyxDQUFDLDZFQUFROztBQUVuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBLGVBQWUseUJBQXlCLGFBQWEsSUFBSSxjQUFjLGVBQWUsYUFBYTtBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixhQUFhLElBQUksZUFBZTtBQUNsRCxtQkFBbUIsY0FBYztBQUNqQztBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsaUVBQWlFO0FBQ2pGLHNCQUFzQjtBQUN0QixxQ0FBcUMsY0FBYyxHQUFHO0FBQ3RELDZCQUE2QixjQUFjLEdBQUc7QUFDOUMsK0RBQStEO0FBQy9EOztBQUVBLG1DQUFtQyxtQ0FBbUM7QUFDdEUsb0NBQW9DLG9DQUFvQztBQUN4RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsY0FBYztBQUNkO0FBQ0E7QUFDQSxlQUFlLHlCQUF5QixhQUFhLElBQUksY0FBYyxlQUFlLGFBQWE7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxlQUFlLEVBQUUsaUJBQWlCO0FBQ2hEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBLGVBQWUseUJBQXlCLGFBQWEsSUFBSSxjQUFjLGVBQWUsYUFBYTtBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHFCQUFxQjtBQUN0QztBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBLGVBQWUseUJBQXlCLGFBQWEsSUFBSSxjQUFjLGVBQWUsYUFBYTtBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIscUJBQXFCO0FBQ3RDO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL3Zpa2FzaHlhZGF2L0RldmVsb3Blci9BbGxnaXRGaWxlcy9Db25mbHV4LVR4bi12aXN1YWxpemVyL25vZGVfbW9kdWxlcy9qcy1jb25mbHV4LXNkay9zcmMvY29udHJhY3QvbWV0aG9kL0Z1bmN0aW9uQ29kZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBhc3NlcnQgfSA9IHJlcXVpcmUoJy4uLy4uL3V0aWwnKTtcbmNvbnN0IGZvcm1hdCA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvZm9ybWF0Jyk7XG5jb25zdCBIZXhTdHJlYW0gPSByZXF1aXJlKCcuLi8uLi91dGlsL0hleFN0cmVhbScpO1xuY29uc3QgeyBmb3JtYXRUeXBlLCBmb3JtYXRGdWxsTmFtZSwgdmFsdWVDb2RlciB9ID0gcmVxdWlyZSgnLi4vYWJpJyk7XG5cbmNsYXNzIEZ1bmN0aW9uQ29kZXIge1xuICAvKipcbiAgICogRnVuY3Rpb24gY29kZXJcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm5hbWVdXG4gICAqIEBwYXJhbSB7YXJyYXl9IFtvcHRpb25zLmlucHV0c11cbiAgICogQHBhcmFtIHthcnJheX0gW29wdGlvbnMub3V0cHV0c11cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnN0YXRlTXV0YWJpbGl0eT0nbm9ucGF5YWJsZSddXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqID4gYWJpID0geyBuYW1lOiAnZnVuYycsIGlucHV0czogW3sgdHlwZTogJ2ludCcgfSwgeyB0eXBlOiAnYm9vbCcgfV0sIG91dHB1dHM6IFt7IHR5cGU6ICdpbnQnIH1dIH1cbiAgICogPiBjb2RlciA9IG5ldyBGdW5jdGlvbkNvZGVyKGFiaSlcbiAgIEZ1bmN0aW9uQ29kZXIge1xuICAgICAgbmFtZTogJ2Z1bmMnLFxuICAgICAgZnVsbE5hbWU6ICdmdW5jKGludDI1NiAsIGJvb2wgKScsXG4gICAgICBpbnB1dHM6IFsgeyB0eXBlOiAnaW50JyB9LCB7IHR5cGU6ICdib29sJyB9IF0sXG4gICAgICBvdXRwdXRzOiBbIHsgdHlwZTogJ2ludCcgfSBdLFxuICAgICAgdHlwZTogJ2Z1bmMoaW50MjU2LGJvb2wpJ1xuICAgIH1cbiAgICovXG4gIGNvbnN0cnVjdG9yKHsgbmFtZSwgaW5wdXRzID0gW10sIG91dHB1dHMgPSBbXSwgc3RhdGVNdXRhYmlsaXR5ID0gJ25vbnBheWFibGUnIH0pIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lOyAvLyBleGFtcGxlOiBcImFkZFwiXG4gICAgdGhpcy5mdWxsTmFtZSA9IGZvcm1hdEZ1bGxOYW1lKHsgbmFtZSwgaW5wdXRzIH0pOyAvLyBleGFtcGxlOiBcImFkZCh1aW50IG51bWJlciwgdWludCBjb3VudClcIlxuICAgIHRoaXMudHlwZSA9IGZvcm1hdFR5cGUoeyBuYW1lLCBpbnB1dHMgfSk7IC8vIGV4YW1wbGU6IFwiYWRkKHVpbnQsdWludClcIlxuICAgIHRoaXMuc2lnbmF0dXJlID0gZm9ybWF0LmtlY2NhazI1Nih0aGlzLnR5cGUpLnNsaWNlKDAsIDEwKTsgLy8gZXhhbXBsZTogXCIweGI4OTY2MzUyXCJcbiAgICB0aGlzLnN0YXRlTXV0YWJpbGl0eSA9IHN0YXRlTXV0YWJpbGl0eTtcblxuICAgIHRoaXMuaW5wdXRDb2RlciA9IHZhbHVlQ29kZXIoeyB0eXBlOiAndHVwbGUnLCBjb21wb25lbnRzOiBpbnB1dHMgfSk7XG4gICAgdGhpcy5vdXRwdXRDb2RlciA9IHZhbHVlQ29kZXIoeyB0eXBlOiAndHVwbGUnLCBjb21wb25lbnRzOiBvdXRwdXRzIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBmdW5jdGlvbiBzaWduYXR1cmUgYnkgYWJpIChqc29uIGludGVyZmFjZSlcbiAgICpcbiAgICogQHBhcmFtIHthcnJheX0gYXJnc1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqID4gYWJpID0geyBuYW1lOiAnZnVuYycsIGlucHV0czogW3sgdHlwZTogJ2ludCcgfSwgeyB0eXBlOiAnYm9vbCcgfV0sIG91dHB1dHM6IFt7IHR5cGU6ICdpbnQnIH1dIH1cbiAgICogPiBjb2RlciA9IG5ldyBGdW5jdGlvbkNvZGVyKGFiaSlcbiAgICogPiBjb2Rlci5lbmNvZGVEYXRhKFsxMDAsIHRydWVdKVxuICAgXCIweDFlZWU3MmMxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA2NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDFcIlxuICAgKi9cbiAgZW5jb2RlRGF0YShhcmdzKSB7XG4gICAgY29uc3QgaGV4ID0gZm9ybWF0LmhleCh0aGlzLmlucHV0Q29kZXIuZW5jb2RlKGFyZ3MpKTtcbiAgICByZXR1cm4gYCR7dGhpcy5zaWduYXR1cmV9JHtoZXguc3Vic3RyaW5nKDIpfWA7XG4gIH1cblxuICAvKipcbiAgICogRGVjb2RlIGRhdGEgaGV4IHdpdGggaW5wdXRzIGJ5IGFiaSAoanNvbiBpbnRlcmZhY2UpXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBoZXggIC0gSGV4IHN0cmluZ1xuICAgKiBAcmV0dXJuIHthcnJheX0gTmFtZWRUdXBsZVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA+IGFiaSA9IHsgbmFtZTogJ2Z1bmMnLCBpbnB1dHM6IFt7IHR5cGU6ICdpbnQnIH0sIHsgdHlwZTogJ2Jvb2wnIH1dLCBvdXRwdXRzOiBbeyB0eXBlOiAnaW50JyB9XSB9XG4gICAqID4gY29kZXIgPSBuZXcgRnVuY3Rpb25Db2RlcihhYmkpXG4gICAqID4gcmVzdWx0ID0gY29kZXIuZGVjb2RlRGF0YSgnMHgxNWZiMjcyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNjQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxJylcbiAgIE5hbWVkVHVwbGUoMCwxKSBbIDEwMG4sIHRydWUgXVxuICAgKiA+IGNvbnNvbGUubG9nKFsuLi5yZXN1bHRdKVxuICAgWyAxMDBuLCB0cnVlIF1cbiAgICogPiBjb25zb2xlLmxvZyhyZXN1bHRbMF0pXG4gICAxMDBcbiAgICogPiBjb25zb2xlLmxvZyhyZXN1bHRbMV0pXG4gICB0cnVlXG4gICAqL1xuICBkZWNvZGVEYXRhKGhleCkge1xuICAgIGNvbnN0IHByZWZpeCA9IGhleC5zbGljZSgwLCB0aGlzLnNpZ25hdHVyZS5sZW5ndGgpO1xuICAgIGFzc2VydChwcmVmaXggPT09IHRoaXMuc2lnbmF0dXJlLCB7XG4gICAgICBtZXNzYWdlOiAnZGVjb2RlRGF0YSB1bmV4cGVjdGVkIHNpZ25hdHVyZScsXG4gICAgICBleHBlY3Q6IHRoaXMuc2lnbmF0dXJlLFxuICAgICAgZ290OiBwcmVmaXgsXG4gICAgICBjb2RlcjogdGhpcy5mdWxsTmFtZSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGRhdGEgPSBoZXguc2xpY2UodGhpcy5zaWduYXR1cmUubGVuZ3RoKTtcbiAgICBjb25zdCBzdHJlYW0gPSBuZXcgSGV4U3RyZWFtKGRhdGEpO1xuICAgIGNvbnN0IHR1cGxlID0gdGhpcy5pbnB1dENvZGVyLmRlY29kZShzdHJlYW0pO1xuICAgIGFzc2VydChzdHJlYW0uZW9mKCksIHtcbiAgICAgIG1lc3NhZ2U6ICdoZXggbGVuZ3RoIHRvbyBsYXJnZScsXG4gICAgICBleHBlY3Q6IGAke3N0cmVhbS5zdHJpbmcubGVuZ3RofWAsXG4gICAgICBnb3Q6IHN0cmVhbS5pbmRleCxcbiAgICAgIGNvZGVyOiB0aGlzLmZ1bGxOYW1lLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHR1cGxlO1xuICB9XG5cbiAgLyoqXG4gICAqIERlY29kZSBoZXggd2l0aCBvdXRwdXRzIGJ5IGFiaSAoanNvbiBpbnRlcmZhY2UpXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBoZXggLSBIZXggc3RyaW5nXG4gICAqIEByZXR1cm4ge2FycmF5fSBOYW1lZFR1cGxlXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqID4gYWJpID0geyBuYW1lOiAnZnVuYycsIGlucHV0czogW3sgdHlwZTogJ2ludCcgfSwgeyB0eXBlOiAnYm9vbCcgfV0sIG91dHB1dHM6IFt7IHR5cGU6ICdpbnQnIH1dIH1cbiAgICogPiBjb2RlciA9IG5ldyBGdW5jdGlvbkNvZGVyKGFiaSlcbiAgICogPiByZXN1bHQgPSBjb2Rlci5kZWNvZGVPdXRwdXRzKCcweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYnKVxuICAgTmFtZWRUdXBsZSgwKSBbIC0xbiBdXG4gICAqID4gY29uc29sZS5sb2coWy4uLnJlc3VsdF0pXG4gICBbLTFuXVxuICAgKiA+IGNvbnNvbGUubG9nKHJlc3VsdFswXSlcbiAgIC0xblxuICAgKi9cbiAgZGVjb2RlT3V0cHV0cyhoZXgpIHtcbiAgICBjb25zdCBzdHJlYW0gPSBuZXcgSGV4U3RyZWFtKGhleCk7XG4gICAgY29uc3QgdHVwbGUgPSB0aGlzLm91dHB1dENvZGVyLmRlY29kZShzdHJlYW0pO1xuXG4gICAgYXNzZXJ0KHN0cmVhbS5lb2YoKSwge1xuICAgICAgbWVzc2FnZTogJ2hleCBsZW5ndGggdG9vIGxhcmdlJyxcbiAgICAgIGV4cGVjdDogYCR7c3RyZWFtLnN0cmluZy5sZW5ndGh9YCxcbiAgICAgIGdvdDogc3RyZWFtLmluZGV4LFxuICAgICAgY29kZXI6IHRoaXMuZnVsbE5hbWUsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdHVwbGUubGVuZ3RoIDw9IDEgPyB0dXBsZVswXSA6IHR1cGxlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb25Db2RlcjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/method/FunctionCoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/method/MethodTransaction.js":
/*!******************************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/method/MethodTransaction.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Transaction = __webpack_require__(/*! ../../Transaction */ \"(ssr)/./node_modules/js-conflux-sdk/src/Transaction.js\");\n\n/**\n * @typedef { import('../../Transaction').TransactionMeta } TransactionMeta\n */\n\nclass MethodTransaction extends Transaction {\n  constructor(options, method) {\n    super(options);\n    Reflect.defineProperty(this, 'method', { value: method }); // XXX: use defineProperty to avoid from JSON.stringify\n  }\n\n  /**\n   * Will send a transaction to the smart contract and execute its method.\n   * set contract.address as `to`,\n   * set contract method encode as `data`.\n   *\n   * > Note: This can alter the smart contract state.\n   *\n   * @param {TransactionMeta} options - See [Transaction](Transaction.md#Transaction.js/Transaction/**constructor**)\n   * @param {string} [password] - See [conflux.sendTransaction](#Conflux.js/Conflux/sendTransaction)\n   * @return {import('../../subscribe/PendingTransaction')} The PendingTransaction object.\n   */\n  sendTransaction(options, ...extra) {\n    return this.method.conflux.cfx.sendTransaction({ ...this, ...options }, ...extra);\n  }\n\n  populateTransaction(options) {\n    return this.method.conflux.cfx.populateTransaction({ ...this, ...options });\n  }\n\n  /**\n   * Executes a message call or transaction and returns the amount of the gas used.\n   * set contract.address as `to`,\n   * set contract method encode as `data`.\n   *\n   * @param {TransactionMeta} options - See [Transaction](Transaction.md#Transaction.js/Transaction/**constructor**)\n   * @param {string|number} epochNumber - See [Conflux.estimateGasAndCollateral](#Conflux.js/estimateGasAndCollateral)\n   * @return {Promise<import('../../rpc/types/formatter').EstimateResult>} The gas used and storage occupied for the simulated call/transaction.\n   */\n  async estimateGasAndCollateral(options, epochNumber) {\n    return this.method.conflux.cfx.estimateGasAndCollateral({ ...this, ...options }, epochNumber);\n  }\n\n  /**\n   * Executes a message call transaction,\n   * set contract.address as `to`,\n   * set contract method encode as `data`.\n   *\n   * > Note: Can not alter the smart contract state.\n   *\n   * @param {TransactionMeta} options - See [Transaction](Transaction.md#Transaction.js/Transaction/**constructor**)\n   * @param {string|number} epochNumber - See [Conflux.call](#Conflux.js/call)\n   * @return {Promise<*>} Decoded contact call return.\n   */\n  async call(options, epochNumber) {\n    const hex = await this.method.conflux.cfx.call({ ...this, ...options }, epochNumber);\n    return this.method.decodeOutputs(hex);\n  }\n\n  request(options, epochNumber) {\n    const methodMeta = this.method.conflux.cfx.call.request({ ...this, ...options }, epochNumber);\n    methodMeta.decoder = this.method.decodeOutputs.bind(this.method);\n    return methodMeta;\n  }\n\n  async then(resolve, reject) {\n    try {\n      return resolve(await this.call());\n    } catch (e) {\n      return reject(e);\n    }\n  }\n\n  async catch(callback) {\n    return this.then(v => v, callback);\n  }\n\n  async finally(callback) {\n    try {\n      return await this;\n    } finally {\n      await callback();\n    }\n  }\n}\n\nmodule.exports = MethodTransaction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L21ldGhvZC9NZXRob2RUcmFuc2FjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0IsbUJBQU8sQ0FBQyxpRkFBbUI7O0FBRS9DO0FBQ0EsY0FBYyw4Q0FBOEM7QUFDNUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLGVBQWUsR0FBRztBQUMvRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsaUJBQWlCO0FBQzlCLGFBQWEsUUFBUTtBQUNyQixjQUFjLDhDQUE4QztBQUM1RDtBQUNBO0FBQ0EscURBQXFELHFCQUFxQjtBQUMxRTs7QUFFQTtBQUNBLHlEQUF5RCxxQkFBcUI7QUFDOUU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsaUJBQWlCO0FBQzlCLGFBQWEsZUFBZTtBQUM1QixjQUFjLDZEQUE2RDtBQUMzRTtBQUNBO0FBQ0EsOERBQThELHFCQUFxQjtBQUNuRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsaUJBQWlCO0FBQzlCLGFBQWEsZUFBZTtBQUM1QixjQUFjLFlBQVk7QUFDMUI7QUFDQTtBQUNBLHFEQUFxRCxxQkFBcUI7QUFDMUU7QUFDQTs7QUFFQTtBQUNBLDhEQUE4RCxxQkFBcUI7QUFDbkY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL3Zpa2FzaHlhZGF2L0RldmVsb3Blci9BbGxnaXRGaWxlcy9Db25mbHV4LVR4bi12aXN1YWxpemVyL25vZGVfbW9kdWxlcy9qcy1jb25mbHV4LXNkay9zcmMvY29udHJhY3QvbWV0aG9kL01ldGhvZFRyYW5zYWN0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFRyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi4vLi4vVHJhbnNhY3Rpb24nKTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnLi4vLi4vVHJhbnNhY3Rpb24nKS5UcmFuc2FjdGlvbk1ldGEgfSBUcmFuc2FjdGlvbk1ldGFcbiAqL1xuXG5jbGFzcyBNZXRob2RUcmFuc2FjdGlvbiBleHRlbmRzIFRyYW5zYWN0aW9uIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucywgbWV0aG9kKSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG4gICAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbWV0aG9kJywgeyB2YWx1ZTogbWV0aG9kIH0pOyAvLyBYWFg6IHVzZSBkZWZpbmVQcm9wZXJ0eSB0byBhdm9pZCBmcm9tIEpTT04uc3RyaW5naWZ5XG4gIH1cblxuICAvKipcbiAgICogV2lsbCBzZW5kIGEgdHJhbnNhY3Rpb24gdG8gdGhlIHNtYXJ0IGNvbnRyYWN0IGFuZCBleGVjdXRlIGl0cyBtZXRob2QuXG4gICAqIHNldCBjb250cmFjdC5hZGRyZXNzIGFzIGB0b2AsXG4gICAqIHNldCBjb250cmFjdCBtZXRob2QgZW5jb2RlIGFzIGBkYXRhYC5cbiAgICpcbiAgICogPiBOb3RlOiBUaGlzIGNhbiBhbHRlciB0aGUgc21hcnQgY29udHJhY3Qgc3RhdGUuXG4gICAqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb25NZXRhfSBvcHRpb25zIC0gU2VlIFtUcmFuc2FjdGlvbl0oVHJhbnNhY3Rpb24ubWQjVHJhbnNhY3Rpb24uanMvVHJhbnNhY3Rpb24vKipjb25zdHJ1Y3RvcioqKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3Bhc3N3b3JkXSAtIFNlZSBbY29uZmx1eC5zZW5kVHJhbnNhY3Rpb25dKCNDb25mbHV4LmpzL0NvbmZsdXgvc2VuZFRyYW5zYWN0aW9uKVxuICAgKiBAcmV0dXJuIHtpbXBvcnQoJy4uLy4uL3N1YnNjcmliZS9QZW5kaW5nVHJhbnNhY3Rpb24nKX0gVGhlIFBlbmRpbmdUcmFuc2FjdGlvbiBvYmplY3QuXG4gICAqL1xuICBzZW5kVHJhbnNhY3Rpb24ob3B0aW9ucywgLi4uZXh0cmEpIHtcbiAgICByZXR1cm4gdGhpcy5tZXRob2QuY29uZmx1eC5jZnguc2VuZFRyYW5zYWN0aW9uKHsgLi4udGhpcywgLi4ub3B0aW9ucyB9LCAuLi5leHRyYSk7XG4gIH1cblxuICBwb3B1bGF0ZVRyYW5zYWN0aW9uKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5tZXRob2QuY29uZmx1eC5jZngucG9wdWxhdGVUcmFuc2FjdGlvbih7IC4uLnRoaXMsIC4uLm9wdGlvbnMgfSk7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZXMgYSBtZXNzYWdlIGNhbGwgb3IgdHJhbnNhY3Rpb24gYW5kIHJldHVybnMgdGhlIGFtb3VudCBvZiB0aGUgZ2FzIHVzZWQuXG4gICAqIHNldCBjb250cmFjdC5hZGRyZXNzIGFzIGB0b2AsXG4gICAqIHNldCBjb250cmFjdCBtZXRob2QgZW5jb2RlIGFzIGBkYXRhYC5cbiAgICpcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbk1ldGF9IG9wdGlvbnMgLSBTZWUgW1RyYW5zYWN0aW9uXShUcmFuc2FjdGlvbi5tZCNUcmFuc2FjdGlvbi5qcy9UcmFuc2FjdGlvbi8qKmNvbnN0cnVjdG9yKiopXG4gICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gZXBvY2hOdW1iZXIgLSBTZWUgW0NvbmZsdXguZXN0aW1hdGVHYXNBbmRDb2xsYXRlcmFsXSgjQ29uZmx1eC5qcy9lc3RpbWF0ZUdhc0FuZENvbGxhdGVyYWwpXG4gICAqIEByZXR1cm4ge1Byb21pc2U8aW1wb3J0KCcuLi8uLi9ycGMvdHlwZXMvZm9ybWF0dGVyJykuRXN0aW1hdGVSZXN1bHQ+fSBUaGUgZ2FzIHVzZWQgYW5kIHN0b3JhZ2Ugb2NjdXBpZWQgZm9yIHRoZSBzaW11bGF0ZWQgY2FsbC90cmFuc2FjdGlvbi5cbiAgICovXG4gIGFzeW5jIGVzdGltYXRlR2FzQW5kQ29sbGF0ZXJhbChvcHRpb25zLCBlcG9jaE51bWJlcikge1xuICAgIHJldHVybiB0aGlzLm1ldGhvZC5jb25mbHV4LmNmeC5lc3RpbWF0ZUdhc0FuZENvbGxhdGVyYWwoeyAuLi50aGlzLCAuLi5vcHRpb25zIH0sIGVwb2NoTnVtYmVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyBhIG1lc3NhZ2UgY2FsbCB0cmFuc2FjdGlvbixcbiAgICogc2V0IGNvbnRyYWN0LmFkZHJlc3MgYXMgYHRvYCxcbiAgICogc2V0IGNvbnRyYWN0IG1ldGhvZCBlbmNvZGUgYXMgYGRhdGFgLlxuICAgKlxuICAgKiA+IE5vdGU6IENhbiBub3QgYWx0ZXIgdGhlIHNtYXJ0IGNvbnRyYWN0IHN0YXRlLlxuICAgKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9uTWV0YX0gb3B0aW9ucyAtIFNlZSBbVHJhbnNhY3Rpb25dKFRyYW5zYWN0aW9uLm1kI1RyYW5zYWN0aW9uLmpzL1RyYW5zYWN0aW9uLyoqY29uc3RydWN0b3IqKilcbiAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBlcG9jaE51bWJlciAtIFNlZSBbQ29uZmx1eC5jYWxsXSgjQ29uZmx1eC5qcy9jYWxsKVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPCo+fSBEZWNvZGVkIGNvbnRhY3QgY2FsbCByZXR1cm4uXG4gICAqL1xuICBhc3luYyBjYWxsKG9wdGlvbnMsIGVwb2NoTnVtYmVyKSB7XG4gICAgY29uc3QgaGV4ID0gYXdhaXQgdGhpcy5tZXRob2QuY29uZmx1eC5jZnguY2FsbCh7IC4uLnRoaXMsIC4uLm9wdGlvbnMgfSwgZXBvY2hOdW1iZXIpO1xuICAgIHJldHVybiB0aGlzLm1ldGhvZC5kZWNvZGVPdXRwdXRzKGhleCk7XG4gIH1cblxuICByZXF1ZXN0KG9wdGlvbnMsIGVwb2NoTnVtYmVyKSB7XG4gICAgY29uc3QgbWV0aG9kTWV0YSA9IHRoaXMubWV0aG9kLmNvbmZsdXguY2Z4LmNhbGwucmVxdWVzdCh7IC4uLnRoaXMsIC4uLm9wdGlvbnMgfSwgZXBvY2hOdW1iZXIpO1xuICAgIG1ldGhvZE1ldGEuZGVjb2RlciA9IHRoaXMubWV0aG9kLmRlY29kZU91dHB1dHMuYmluZCh0aGlzLm1ldGhvZCk7XG4gICAgcmV0dXJuIG1ldGhvZE1ldGE7XG4gIH1cblxuICBhc3luYyB0aGVuKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZShhd2FpdCB0aGlzLmNhbGwoKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHJlamVjdChlKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBjYXRjaChjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLnRoZW4odiA9PiB2LCBjYWxsYmFjayk7XG4gIH1cblxuICBhc3luYyBmaW5hbGx5KGNhbGxiYWNrKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBhd2FpdCBjYWxsYmFjaygpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1ldGhvZFRyYW5zYWN0aW9uO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/method/MethodTransaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/contract/standard/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/contract/standard/index.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("const CRC20_ABI = [\n  'function name() view returns (string)',\n  'function symbol() view returns (string)',\n  'function decimals() view returns (uint8)',\n  'function totalSupply() view returns (uint256)',\n  'function balanceOf(address) view returns (uint256)',\n  'function transfer(address to, uint256 amount)',\n  'function allowance(address owner, address spender) view returns (uint256)',\n  'function approve(address spender, uint256 amount) returns (bool)',\n  'function transferFrom(address sender, address recipient, uint256 amount) returns (bool)',\n  'function increaseAllowance(address spender, uint256 amount) returns (bool)',\n  'function decreaseAllowance(address spender, uint256 amount) returns (bool)',\n  'event Transfer(address indexed from, address indexed to, uint256 amount)',\n  'event Approval(address indexed owner, address indexed spender, uint256 amount)',\n];\n\nconst ERROR_ABI = [\n  'function Error(string)',\n];\n\nmodule.exports = {\n  CRC20_ABI,\n  ERROR_ABI,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L3N0YW5kYXJkL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWthc2h5YWRhdi9EZXZlbG9wZXIvQWxsZ2l0RmlsZXMvQ29uZmx1eC1UeG4tdmlzdWFsaXplci9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2NvbnRyYWN0L3N0YW5kYXJkL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IENSQzIwX0FCSSA9IFtcbiAgJ2Z1bmN0aW9uIG5hbWUoKSB2aWV3IHJldHVybnMgKHN0cmluZyknLFxuICAnZnVuY3Rpb24gc3ltYm9sKCkgdmlldyByZXR1cm5zIChzdHJpbmcpJyxcbiAgJ2Z1bmN0aW9uIGRlY2ltYWxzKCkgdmlldyByZXR1cm5zICh1aW50OCknLFxuICAnZnVuY3Rpb24gdG90YWxTdXBwbHkoKSB2aWV3IHJldHVybnMgKHVpbnQyNTYpJyxcbiAgJ2Z1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzKSB2aWV3IHJldHVybnMgKHVpbnQyNTYpJyxcbiAgJ2Z1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgYW1vdW50KScsXG4gICdmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSB2aWV3IHJldHVybnMgKHVpbnQyNTYpJyxcbiAgJ2Z1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IGFtb3VudCkgcmV0dXJucyAoYm9vbCknLFxuICAnZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3Mgc2VuZGVyLCBhZGRyZXNzIHJlY2lwaWVudCwgdWludDI1NiBhbW91bnQpIHJldHVybnMgKGJvb2wpJyxcbiAgJ2Z1bmN0aW9uIGluY3JlYXNlQWxsb3dhbmNlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiBhbW91bnQpIHJldHVybnMgKGJvb2wpJyxcbiAgJ2Z1bmN0aW9uIGRlY3JlYXNlQWxsb3dhbmNlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiBhbW91bnQpIHJldHVybnMgKGJvb2wpJyxcbiAgJ2V2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgYW1vdW50KScsXG4gICdldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IGFtb3VudCknLFxuXTtcblxuY29uc3QgRVJST1JfQUJJID0gW1xuICAnZnVuY3Rpb24gRXJyb3Ioc3RyaW5nKScsXG5dO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ1JDMjBfQUJJLFxuICBFUlJPUl9BQkksXG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/contract/standard/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/index.js":
/*!**************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const CONST = __webpack_require__(/*! ./CONST */ \"(ssr)/./node_modules/js-conflux-sdk/src/CONST.js\");\nconst ERROR_CODES = __webpack_require__(/*! ./ERROR_CODES */ \"(ssr)/./node_modules/js-conflux-sdk/src/ERROR_CODES.js\");\nconst Conflux = __webpack_require__(/*! ./Conflux */ \"(ssr)/./node_modules/js-conflux-sdk/src/Conflux.js\");\nconst Contract = __webpack_require__(/*! ./contract */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/index.js\");\nconst Wallet = __webpack_require__(/*! ./wallet */ \"(ssr)/./node_modules/js-conflux-sdk/src/wallet/index.js\");\nconst Transaction = __webpack_require__(/*! ./Transaction */ \"(ssr)/./node_modules/js-conflux-sdk/src/Transaction.js\");\nconst Message = __webpack_require__(/*! ./Message */ \"(ssr)/./node_modules/js-conflux-sdk/src/Message.js\");\nconst PersonalMessage = __webpack_require__(/*! ./PersonalMessage */ \"(ssr)/./node_modules/js-conflux-sdk/src/PersonalMessage.js\");\nconst Drip = __webpack_require__(/*! ./Drip */ \"(ssr)/./node_modules/js-conflux-sdk/src/Drip.js\");\nconst providerFactory = __webpack_require__(/*! ./provider */ \"(ssr)/./node_modules/js-conflux-sdk/src/provider/index.js\");\nconst sign = __webpack_require__(/*! ./util/sign */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/sign.js\");\nconst format = __webpack_require__(/*! ./util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\nconst PrivateKeyAccount = __webpack_require__(/*! ./wallet/PrivateKeyAccount */ \"(ssr)/./node_modules/js-conflux-sdk/src/wallet/PrivateKeyAccount.js\");\nconst address = __webpack_require__(/*! ./util/address */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/address.js\");\n\nmodule.exports = {\n  CONST,\n  ERROR_CODES,\n  Conflux,\n  Contract,\n  Wallet,\n  Transaction,\n  Message,\n  PersonalMessage,\n  Drip,\n  providerFactory,\n  sign,\n  format,\n  PrivateKeyAccount,\n  address,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLGNBQWMsbUJBQU8sQ0FBQyxpRUFBUztBQUMvQixvQkFBb0IsbUJBQU8sQ0FBQyw2RUFBZTtBQUMzQyxnQkFBZ0IsbUJBQU8sQ0FBQyxxRUFBVztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyw2RUFBWTtBQUNyQyxlQUFlLG1CQUFPLENBQUMseUVBQVU7QUFDakMsb0JBQW9CLG1CQUFPLENBQUMsNkVBQWU7QUFDM0MsZ0JBQWdCLG1CQUFPLENBQUMscUVBQVc7QUFDbkMsd0JBQXdCLG1CQUFPLENBQUMscUZBQW1CO0FBQ25ELGFBQWEsbUJBQU8sQ0FBQywrREFBUTtBQUM3Qix3QkFBd0IsbUJBQU8sQ0FBQyw2RUFBWTtBQUM1QyxhQUFhLG1CQUFPLENBQUMseUVBQWE7QUFDbEMsZUFBZSxtQkFBTyxDQUFDLDZFQUFlO0FBQ3RDLDBCQUEwQixtQkFBTyxDQUFDLHVHQUE0QjtBQUM5RCxnQkFBZ0IsbUJBQU8sQ0FBQywrRUFBZ0I7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmlrYXNoeWFkYXYvRGV2ZWxvcGVyL0FsbGdpdEZpbGVzL0NvbmZsdXgtVHhuLXZpc3VhbGl6ZXIvbm9kZV9tb2R1bGVzL2pzLWNvbmZsdXgtc2RrL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBDT05TVCA9IHJlcXVpcmUoJy4vQ09OU1QnKTtcbmNvbnN0IEVSUk9SX0NPREVTID0gcmVxdWlyZSgnLi9FUlJPUl9DT0RFUycpO1xuY29uc3QgQ29uZmx1eCA9IHJlcXVpcmUoJy4vQ29uZmx1eCcpO1xuY29uc3QgQ29udHJhY3QgPSByZXF1aXJlKCcuL2NvbnRyYWN0Jyk7XG5jb25zdCBXYWxsZXQgPSByZXF1aXJlKCcuL3dhbGxldCcpO1xuY29uc3QgVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL1RyYW5zYWN0aW9uJyk7XG5jb25zdCBNZXNzYWdlID0gcmVxdWlyZSgnLi9NZXNzYWdlJyk7XG5jb25zdCBQZXJzb25hbE1lc3NhZ2UgPSByZXF1aXJlKCcuL1BlcnNvbmFsTWVzc2FnZScpO1xuY29uc3QgRHJpcCA9IHJlcXVpcmUoJy4vRHJpcCcpO1xuY29uc3QgcHJvdmlkZXJGYWN0b3J5ID0gcmVxdWlyZSgnLi9wcm92aWRlcicpO1xuY29uc3Qgc2lnbiA9IHJlcXVpcmUoJy4vdXRpbC9zaWduJyk7XG5jb25zdCBmb3JtYXQgPSByZXF1aXJlKCcuL3V0aWwvZm9ybWF0Jyk7XG5jb25zdCBQcml2YXRlS2V5QWNjb3VudCA9IHJlcXVpcmUoJy4vd2FsbGV0L1ByaXZhdGVLZXlBY2NvdW50Jyk7XG5jb25zdCBhZGRyZXNzID0gcmVxdWlyZSgnLi91dGlsL2FkZHJlc3MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENPTlNULFxuICBFUlJPUl9DT0RFUyxcbiAgQ29uZmx1eCxcbiAgQ29udHJhY3QsXG4gIFdhbGxldCxcbiAgVHJhbnNhY3Rpb24sXG4gIE1lc3NhZ2UsXG4gIFBlcnNvbmFsTWVzc2FnZSxcbiAgRHJpcCxcbiAgcHJvdmlkZXJGYWN0b3J5LFxuICBzaWduLFxuICBmb3JtYXQsXG4gIFByaXZhdGVLZXlBY2NvdW50LFxuICBhZGRyZXNzLFxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/primitives/AccessList.js":
/*!******************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/primitives/AccessList.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const format = __webpack_require__(/*! ../util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\n\nclass AccessListEntry {\n  constructor(address, storageKeys = []) {\n    this.address = format.hexAddress(address);\n    this.storageKeys = storageKeys.map(format.hex);\n  }\n\n  // encode to buffer for RLP encoding\n  encode() {\n    return [\n      format.hexBuffer(this.address),\n      this.storageKeys.map(val => format.hexBuffer(val)),\n    ];\n  }\n}\n\nclass AccessList {\n  /**\n   *\n   * @param {object[]|array[]} entries\n   */\n  constructor(entries = []) {\n    // initiate AccessListEntry\n    for (const i in entries) {\n      if (Object.hasOwn(entries, i)) {\n        const entry = entries[i];\n        if (Array.isArray(entry)) {\n          entries[i] = new AccessListEntry(entry[0], entry[1]);\n        } else if (typeof entry === 'object') {\n          entries[i] = new AccessListEntry(entry.address, entry.storageKeys);\n        } else {\n          throw new Error('Invalid AccessListEntry');\n        }\n      }\n    }\n    this.entries = entries;\n  }\n\n  encode() {\n    return this.entries.map(entry => entry.encode());\n  }\n}\n\nmodule.exports = {\n  AccessListEntry,\n  AccessList,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3ByaW1pdGl2ZXMvQWNjZXNzTGlzdC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMsOEVBQWdCOztBQUV2QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxrQkFBa0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWthc2h5YWRhdi9EZXZlbG9wZXIvQWxsZ2l0RmlsZXMvQ29uZmx1eC1UeG4tdmlzdWFsaXplci9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3ByaW1pdGl2ZXMvQWNjZXNzTGlzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmb3JtYXQgPSByZXF1aXJlKCcuLi91dGlsL2Zvcm1hdCcpO1xuXG5jbGFzcyBBY2Nlc3NMaXN0RW50cnkge1xuICBjb25zdHJ1Y3RvcihhZGRyZXNzLCBzdG9yYWdlS2V5cyA9IFtdKSB7XG4gICAgdGhpcy5hZGRyZXNzID0gZm9ybWF0LmhleEFkZHJlc3MoYWRkcmVzcyk7XG4gICAgdGhpcy5zdG9yYWdlS2V5cyA9IHN0b3JhZ2VLZXlzLm1hcChmb3JtYXQuaGV4KTtcbiAgfVxuXG4gIC8vIGVuY29kZSB0byBidWZmZXIgZm9yIFJMUCBlbmNvZGluZ1xuICBlbmNvZGUoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIGZvcm1hdC5oZXhCdWZmZXIodGhpcy5hZGRyZXNzKSxcbiAgICAgIHRoaXMuc3RvcmFnZUtleXMubWFwKHZhbCA9PiBmb3JtYXQuaGV4QnVmZmVyKHZhbCkpLFxuICAgIF07XG4gIH1cbn1cblxuY2xhc3MgQWNjZXNzTGlzdCB7XG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdFtdfGFycmF5W119IGVudHJpZXNcbiAgICovXG4gIGNvbnN0cnVjdG9yKGVudHJpZXMgPSBbXSkge1xuICAgIC8vIGluaXRpYXRlIEFjY2Vzc0xpc3RFbnRyeVxuICAgIGZvciAoY29uc3QgaSBpbiBlbnRyaWVzKSB7XG4gICAgICBpZiAoT2JqZWN0Lmhhc093bihlbnRyaWVzLCBpKSkge1xuICAgICAgICBjb25zdCBlbnRyeSA9IGVudHJpZXNbaV07XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGVudHJ5KSkge1xuICAgICAgICAgIGVudHJpZXNbaV0gPSBuZXcgQWNjZXNzTGlzdEVudHJ5KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGVudHJ5ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGVudHJpZXNbaV0gPSBuZXcgQWNjZXNzTGlzdEVudHJ5KGVudHJ5LmFkZHJlc3MsIGVudHJ5LnN0b3JhZ2VLZXlzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgQWNjZXNzTGlzdEVudHJ5Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5lbnRyaWVzID0gZW50cmllcztcbiAgfVxuXG4gIGVuY29kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbnRyaWVzLm1hcChlbnRyeSA9PiBlbnRyeS5lbmNvZGUoKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFjY2Vzc0xpc3RFbnRyeSxcbiAgQWNjZXNzTGlzdCxcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/primitives/AccessList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/provider/BaseProvider.js":
/*!******************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/provider/BaseProvider.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint-disable no-unused-vars */\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst RPCError = __webpack_require__(/*! ./RPCError */ \"(ssr)/./node_modules/js-conflux-sdk/src/provider/RPCError.js\");\n\nclass BaseProvider extends EventEmitter {\n  /**\n\n   * @param {object} [options]\n   * @param {string} options.url - Full json rpc http url\n   * @param {number} [options.timeout=30*1000] - Request time out in ms\n   * @param {number} [options.retry=1] - Retry number\n   * @param {boolean} [options.keepAlive=false] - Whether open the http keep-alive option\n   * @param {object} [options.logger] - Logger with `info` and `error`\n   * @return {BaseProvider}\n   */\n  constructor({\n    url,\n    retry = 1,\n    timeout = 30 * 1000,\n    keepAlive = false,\n    logger = { info: () => undefined, error: () => undefined },\n  }) {\n    super();\n    this.url = url;\n    this.retry = retry;\n    this.timeout = timeout;\n    this.logger = logger;\n    this.keepAlive = keepAlive;\n    const headers = {};\n    if (keepAlive) {\n      headers.Connection = 'Keep-Alive';\n    }\n    this.headers = headers;\n  }\n\n  /**\n   * Gen a random json rpc id.\n   * It is used in `call` method, overwrite it to gen your own id.\n   *\n   * @return {string}\n   */\n  requestId() {\n    return `${Date.now().toString(16)}${Math.random().toString(16).slice(2)}`;\n  }\n\n  /**\n   * @param {any}\n   * @private\n   * @return {Promise<*>}\n   */\n  _request(_any) {\n    throw new Error(`NotImplementError: ${this.constructor.name}.request not implement.`);\n  }\n\n  /**\n   * @param {any[]}\n   * @return {Promise<*>}\n   * @private\n   */\n  _requestBatch(_any) {\n    throw new Error(`NotImplementError: ${this.constructor.name}.requestBatch not implement.`);\n  }\n\n  /**\n   * Call a json rpc method with params\n   *\n   * @param {object} data\n   * @param {string} data.method - Json rpc method name.\n   * @param {array} [data.params] - Json rpc method params.\n   * @return {Promise<*>} Json rpc method return value.\n   *\n   * @example\n   * > await provider.request({method: 'cfx_epochNumber'});\n   * > await provider.request({method: 'cfx_getBlockByHash', params: [blockHash]});\n   */\n  async request({ method, params = [] }) {\n    const startTime = Date.now();\n    const data = { jsonrpc: '2.0', id: this.requestId(), method, params };\n\n    const { result, error } = await this._request(data);\n\n    if (error) {\n      this.logger.error({ data, error, duration: Date.now() - startTime });\n      throw new RPCError(error, { method, params });\n    } else {\n      this.logger.info({ data, result, duration: Date.now() - startTime });\n    }\n\n    return result;\n  }\n\n  /**\n   * Call a json rpc method with params\n   *\n   * @param {string} method - Json rpc method name.\n   * @param {any[]} params - Json rpc method params.\n   * @return {Promise<*>} Json rpc method return value.\n   *\n   * @example\n   * > await provider.call('cfx_epochNumber');\n   * > await provider.call('cfx_getBlockByHash', blockHash);\n   */\n  async call(method, ...params) {\n    return this.request({ method, params });\n  }\n\n  /**\n   * Send a json rpc method request\n   *\n   * @param {string} method - Json rpc method name.\n   * @param {array} [params] - Json rpc method params.\n   * @return {Promise<*>} Json rpc method return value.\n   *\n   * @example\n   * > await provider.send('cfx_epochNumber');\n   * > await provider.send('cfx_getBlockByHash', [blockHash]);\n   */\n  async send(method, params) {\n    return this.request({ method, params });\n  }\n\n  /**\n   * Batch call json rpc methods with params\n   *\n   * @param {object[]} array - Array of object with \"method\" and \"params\"\n   * @return {Promise<Array>}\n   *\n   * @example\n   * > await provider.batch([\n   *   { method: 'cfx_epochNumber' },\n   *   { method: 'cfx_getBalance', params: ['cfxtest:aaawgvnhveawgvnhveawgvnhveawgvnhvey1umfzwp'] },\n   *   { method: 'InValidInput' },\n   * ])\n   [ '0x3b734d', '0x22374d959c622f74728', RPCError: Method not found ]\n   */\n  async batch(array) {\n    if (!array.length) {\n      return [];\n    }\n\n    const startTime = Date.now();\n    const dataArray = array.map(data => ({ jsonrpc: '2.0', id: this.requestId(), ...data }));\n\n    const returnArray = await this._requestBatch(dataArray);\n\n    this.logger.info({ dataArray, returnArray, duration: Date.now() - startTime });\n    return returnArray.map(({ result, error }, i) => (error ? new RPCError(error, array[i]) : result));\n  }\n\n  close() {}\n}\n\nmodule.exports = BaseProvider;\nmodule.exports.RPCError = RPCError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3Byb3ZpZGVyL0Jhc2VQcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLHFCQUFxQixtQkFBTyxDQUFDLHNCQUFRO0FBQ3JDLGlCQUFpQixtQkFBTyxDQUFDLGdGQUFZOztBQUVyQztBQUNBOztBQUVBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFNBQVM7QUFDdEIsYUFBYSxRQUFRO0FBQ3JCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtDQUErQztBQUM5RCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxjQUFjLHdCQUF3QixFQUFFLG9DQUFvQztBQUM1RTs7QUFFQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsMENBQTBDLHNCQUFzQjtBQUNoRTs7QUFFQTtBQUNBLGFBQWE7QUFDYixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHNCQUFzQjtBQUNoRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsT0FBTztBQUNwQixjQUFjLFlBQVk7QUFDMUI7QUFDQTtBQUNBLCtCQUErQiwwQkFBMEI7QUFDekQsK0JBQStCLGtEQUFrRDtBQUNqRjtBQUNBLGtCQUFrQixxQkFBcUI7QUFDdkM7QUFDQSxtQkFBbUI7O0FBRW5CLFlBQVksZ0JBQWdCOztBQUU1QjtBQUNBLDBCQUEwQiwrQ0FBK0M7QUFDekUsa0NBQWtDLGdCQUFnQjtBQUNsRCxNQUFNO0FBQ04seUJBQXlCLGdEQUFnRDtBQUN6RTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLE9BQU87QUFDcEIsY0FBYyxZQUFZO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixnQkFBZ0I7QUFDMUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsT0FBTztBQUNwQixjQUFjLFlBQVk7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGdCQUFnQjtBQUMxQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFVBQVU7QUFDdkIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLFNBQVMsMkJBQTJCO0FBQ3BDLFNBQVMsMEZBQTBGO0FBQ25HLFNBQVMsd0JBQXdCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkNBQTJDLCtDQUErQzs7QUFFMUY7O0FBRUEsdUJBQXVCLDBEQUEwRDtBQUNqRiw4QkFBOEIsZUFBZTtBQUM3Qzs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsdUJBQXVCIiwic291cmNlcyI6WyIvVXNlcnMvdmlrYXNoeWFkYXYvRGV2ZWxvcGVyL0FsbGdpdEZpbGVzL0NvbmZsdXgtVHhuLXZpc3VhbGl6ZXIvbm9kZV9tb2R1bGVzL2pzLWNvbmZsdXgtc2RrL3NyYy9wcm92aWRlci9CYXNlUHJvdmlkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbmNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpO1xuY29uc3QgUlBDRXJyb3IgPSByZXF1aXJlKCcuL1JQQ0Vycm9yJyk7XG5cbmNsYXNzIEJhc2VQcm92aWRlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIC8qKlxuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMudXJsIC0gRnVsbCBqc29uIHJwYyBodHRwIHVybFxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMudGltZW91dD0zMCoxMDAwXSAtIFJlcXVlc3QgdGltZSBvdXQgaW4gbXNcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnJldHJ5PTFdIC0gUmV0cnkgbnVtYmVyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMua2VlcEFsaXZlPWZhbHNlXSAtIFdoZXRoZXIgb3BlbiB0aGUgaHR0cCBrZWVwLWFsaXZlIG9wdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMubG9nZ2VyXSAtIExvZ2dlciB3aXRoIGBpbmZvYCBhbmQgYGVycm9yYFxuICAgKiBAcmV0dXJuIHtCYXNlUHJvdmlkZXJ9XG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgdXJsLFxuICAgIHJldHJ5ID0gMSxcbiAgICB0aW1lb3V0ID0gMzAgKiAxMDAwLFxuICAgIGtlZXBBbGl2ZSA9IGZhbHNlLFxuICAgIGxvZ2dlciA9IHsgaW5mbzogKCkgPT4gdW5kZWZpbmVkLCBlcnJvcjogKCkgPT4gdW5kZWZpbmVkIH0sXG4gIH0pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudXJsID0gdXJsO1xuICAgIHRoaXMucmV0cnkgPSByZXRyeTtcbiAgICB0aGlzLnRpbWVvdXQgPSB0aW1lb3V0O1xuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xuICAgIHRoaXMua2VlcEFsaXZlID0ga2VlcEFsaXZlO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBpZiAoa2VlcEFsaXZlKSB7XG4gICAgICBoZWFkZXJzLkNvbm5lY3Rpb24gPSAnS2VlcC1BbGl2ZSc7XG4gICAgfVxuICAgIHRoaXMuaGVhZGVycyA9IGhlYWRlcnM7XG4gIH1cblxuICAvKipcbiAgICogR2VuIGEgcmFuZG9tIGpzb24gcnBjIGlkLlxuICAgKiBJdCBpcyB1c2VkIGluIGBjYWxsYCBtZXRob2QsIG92ZXJ3cml0ZSBpdCB0byBnZW4geW91ciBvd24gaWQuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHJlcXVlc3RJZCgpIHtcbiAgICByZXR1cm4gYCR7RGF0ZS5ub3coKS50b1N0cmluZygxNil9JHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDE2KS5zbGljZSgyKX1gO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7YW55fVxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPCo+fVxuICAgKi9cbiAgX3JlcXVlc3QoX2FueSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgTm90SW1wbGVtZW50RXJyb3I6ICR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfS5yZXF1ZXN0IG5vdCBpbXBsZW1lbnQuYCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHthbnlbXX1cbiAgICogQHJldHVybiB7UHJvbWlzZTwqPn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZXF1ZXN0QmF0Y2goX2FueSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgTm90SW1wbGVtZW50RXJyb3I6ICR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfS5yZXF1ZXN0QmF0Y2ggbm90IGltcGxlbWVudC5gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsIGEganNvbiBycGMgbWV0aG9kIHdpdGggcGFyYW1zXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhLm1ldGhvZCAtIEpzb24gcnBjIG1ldGhvZCBuYW1lLlxuICAgKiBAcGFyYW0ge2FycmF5fSBbZGF0YS5wYXJhbXNdIC0gSnNvbiBycGMgbWV0aG9kIHBhcmFtcy5cbiAgICogQHJldHVybiB7UHJvbWlzZTwqPn0gSnNvbiBycGMgbWV0aG9kIHJldHVybiB2YWx1ZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogPiBhd2FpdCBwcm92aWRlci5yZXF1ZXN0KHttZXRob2Q6ICdjZnhfZXBvY2hOdW1iZXInfSk7XG4gICAqID4gYXdhaXQgcHJvdmlkZXIucmVxdWVzdCh7bWV0aG9kOiAnY2Z4X2dldEJsb2NrQnlIYXNoJywgcGFyYW1zOiBbYmxvY2tIYXNoXX0pO1xuICAgKi9cbiAgYXN5bmMgcmVxdWVzdCh7IG1ldGhvZCwgcGFyYW1zID0gW10gfSkge1xuICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgY29uc3QgZGF0YSA9IHsganNvbnJwYzogJzIuMCcsIGlkOiB0aGlzLnJlcXVlc3RJZCgpLCBtZXRob2QsIHBhcmFtcyB9O1xuXG4gICAgY29uc3QgeyByZXN1bHQsIGVycm9yIH0gPSBhd2FpdCB0aGlzLl9yZXF1ZXN0KGRhdGEpO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcih7IGRhdGEsIGVycm9yLCBkdXJhdGlvbjogRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSB9KTtcbiAgICAgIHRocm93IG5ldyBSUENFcnJvcihlcnJvciwgeyBtZXRob2QsIHBhcmFtcyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sb2dnZXIuaW5mbyh7IGRhdGEsIHJlc3VsdCwgZHVyYXRpb246IERhdGUubm93KCkgLSBzdGFydFRpbWUgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsIGEganNvbiBycGMgbWV0aG9kIHdpdGggcGFyYW1zXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2QgLSBKc29uIHJwYyBtZXRob2QgbmFtZS5cbiAgICogQHBhcmFtIHthbnlbXX0gcGFyYW1zIC0gSnNvbiBycGMgbWV0aG9kIHBhcmFtcy5cbiAgICogQHJldHVybiB7UHJvbWlzZTwqPn0gSnNvbiBycGMgbWV0aG9kIHJldHVybiB2YWx1ZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogPiBhd2FpdCBwcm92aWRlci5jYWxsKCdjZnhfZXBvY2hOdW1iZXInKTtcbiAgICogPiBhd2FpdCBwcm92aWRlci5jYWxsKCdjZnhfZ2V0QmxvY2tCeUhhc2gnLCBibG9ja0hhc2gpO1xuICAgKi9cbiAgYXN5bmMgY2FsbChtZXRob2QsIC4uLnBhcmFtcykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoeyBtZXRob2QsIHBhcmFtcyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kIGEganNvbiBycGMgbWV0aG9kIHJlcXVlc3RcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZCAtIEpzb24gcnBjIG1ldGhvZCBuYW1lLlxuICAgKiBAcGFyYW0ge2FycmF5fSBbcGFyYW1zXSAtIEpzb24gcnBjIG1ldGhvZCBwYXJhbXMuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8Kj59IEpzb24gcnBjIG1ldGhvZCByZXR1cm4gdmFsdWUuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqID4gYXdhaXQgcHJvdmlkZXIuc2VuZCgnY2Z4X2Vwb2NoTnVtYmVyJyk7XG4gICAqID4gYXdhaXQgcHJvdmlkZXIuc2VuZCgnY2Z4X2dldEJsb2NrQnlIYXNoJywgW2Jsb2NrSGFzaF0pO1xuICAgKi9cbiAgYXN5bmMgc2VuZChtZXRob2QsIHBhcmFtcykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoeyBtZXRob2QsIHBhcmFtcyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCYXRjaCBjYWxsIGpzb24gcnBjIG1ldGhvZHMgd2l0aCBwYXJhbXNcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3RbXX0gYXJyYXkgLSBBcnJheSBvZiBvYmplY3Qgd2l0aCBcIm1ldGhvZFwiIGFuZCBcInBhcmFtc1wiXG4gICAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXk+fVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA+IGF3YWl0IHByb3ZpZGVyLmJhdGNoKFtcbiAgICogICB7IG1ldGhvZDogJ2NmeF9lcG9jaE51bWJlcicgfSxcbiAgICogICB7IG1ldGhvZDogJ2NmeF9nZXRCYWxhbmNlJywgcGFyYW1zOiBbJ2NmeHRlc3Q6YWFhd2d2bmh2ZWF3Z3ZuaHZlYXdndm5odmVhd2d2bmh2ZXkxdW1mendwJ10gfSxcbiAgICogICB7IG1ldGhvZDogJ0luVmFsaWRJbnB1dCcgfSxcbiAgICogXSlcbiAgIFsgJzB4M2I3MzRkJywgJzB4MjIzNzRkOTU5YzYyMmY3NDcyOCcsIFJQQ0Vycm9yOiBNZXRob2Qgbm90IGZvdW5kIF1cbiAgICovXG4gIGFzeW5jIGJhdGNoKGFycmF5KSB7XG4gICAgaWYgKCFhcnJheS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IGRhdGFBcnJheSA9IGFycmF5Lm1hcChkYXRhID0+ICh7IGpzb25ycGM6ICcyLjAnLCBpZDogdGhpcy5yZXF1ZXN0SWQoKSwgLi4uZGF0YSB9KSk7XG5cbiAgICBjb25zdCByZXR1cm5BcnJheSA9IGF3YWl0IHRoaXMuX3JlcXVlc3RCYXRjaChkYXRhQXJyYXkpO1xuXG4gICAgdGhpcy5sb2dnZXIuaW5mbyh7IGRhdGFBcnJheSwgcmV0dXJuQXJyYXksIGR1cmF0aW9uOiBEYXRlLm5vdygpIC0gc3RhcnRUaW1lIH0pO1xuICAgIHJldHVybiByZXR1cm5BcnJheS5tYXAoKHsgcmVzdWx0LCBlcnJvciB9LCBpKSA9PiAoZXJyb3IgPyBuZXcgUlBDRXJyb3IoZXJyb3IsIGFycmF5W2ldKSA6IHJlc3VsdCkpO1xuICB9XG5cbiAgY2xvc2UoKSB7fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJhc2VQcm92aWRlcjtcbm1vZHVsZS5leHBvcnRzLlJQQ0Vycm9yID0gUlBDRXJyb3I7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/provider/BaseProvider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/provider/HttpProvider.js":
/*!******************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/provider/HttpProvider.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const superagent = __webpack_require__(/*! superagent */ \"(ssr)/./node_modules/superagent/lib/node/index.js\");\nconst BaseProvider = __webpack_require__(/*! ./BaseProvider */ \"(ssr)/./node_modules/js-conflux-sdk/src/provider/BaseProvider.js\");\n\n/**\n * Http protocol json rpc provider.\n */\nclass HttpProvider extends BaseProvider {\n  async _doRequest(data) {\n    const { body } = await superagent\n      .post(this.url)\n      .retry(this.retry)\n      .set(this.headers)\n      .send(data)\n      .timeout(this.timeout);\n    return body;\n  }\n\n  async _request(data) {\n    const body = await this._doRequest(data);\n    return body || {};\n  }\n\n  async _requestBatch(dataArray) {\n    const body = await this._doRequest(dataArray);\n    return body || [];\n  }\n}\n\nmodule.exports = HttpProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3Byb3ZpZGVyL0h0dHBQcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxtQkFBbUIsbUJBQU8sQ0FBQyxxRUFBWTtBQUN2QyxxQkFBcUIsbUJBQU8sQ0FBQyx3RkFBZ0I7O0FBRTdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL3Zpa2FzaHlhZGF2L0RldmVsb3Blci9BbGxnaXRGaWxlcy9Db25mbHV4LVR4bi12aXN1YWxpemVyL25vZGVfbW9kdWxlcy9qcy1jb25mbHV4LXNkay9zcmMvcHJvdmlkZXIvSHR0cFByb3ZpZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHN1cGVyYWdlbnQgPSByZXF1aXJlKCdzdXBlcmFnZW50Jyk7XG5jb25zdCBCYXNlUHJvdmlkZXIgPSByZXF1aXJlKCcuL0Jhc2VQcm92aWRlcicpO1xuXG4vKipcbiAqIEh0dHAgcHJvdG9jb2wganNvbiBycGMgcHJvdmlkZXIuXG4gKi9cbmNsYXNzIEh0dHBQcm92aWRlciBleHRlbmRzIEJhc2VQcm92aWRlciB7XG4gIGFzeW5jIF9kb1JlcXVlc3QoZGF0YSkge1xuICAgIGNvbnN0IHsgYm9keSB9ID0gYXdhaXQgc3VwZXJhZ2VudFxuICAgICAgLnBvc3QodGhpcy51cmwpXG4gICAgICAucmV0cnkodGhpcy5yZXRyeSlcbiAgICAgIC5zZXQodGhpcy5oZWFkZXJzKVxuICAgICAgLnNlbmQoZGF0YSlcbiAgICAgIC50aW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgcmV0dXJuIGJvZHk7XG4gIH1cblxuICBhc3luYyBfcmVxdWVzdChkYXRhKSB7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHRoaXMuX2RvUmVxdWVzdChkYXRhKTtcbiAgICByZXR1cm4gYm9keSB8fCB7fTtcbiAgfVxuXG4gIGFzeW5jIF9yZXF1ZXN0QmF0Y2goZGF0YUFycmF5KSB7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHRoaXMuX2RvUmVxdWVzdChkYXRhQXJyYXkpO1xuICAgIHJldHVybiBib2R5IHx8IFtdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSHR0cFByb3ZpZGVyO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/provider/HttpProvider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/provider/RPCError.js":
/*!**************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/provider/RPCError.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { isHexString } = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\nconst format = __webpack_require__(/*! ../util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\n\nclass RPCError extends Error {\n  constructor(object, payload = {}) {\n    supplementErrorInfo(object, payload);\n    super(object);\n    Object.assign(this, object);\n    Object.assign(this, payload);\n  }\n}\n\nmodule.exports = RPCError;\n\nfunction supplementErrorInfo(object, payload) {\n  // If use base32 address with full node before v1.1.1, will encounter this error\n  if (object.message.match('0x prefix is missing')) {\n    object.data = 'You should connect a node with version 1.1.1 or pass a valid hex value';\n    return;\n  }\n  if (object.message === 'Method not found' && payload.method === 'cfx_sendTransaction') {\n    object.message = `${object.message} Can't find 'from' in cfx.wallet, check 'error.data' for detail`;\n    object.data = 'Please use cfx.wallet.addPrivateKey() to add a account before call cfx.sendTransaction()';\n  }\n  // decode hex encoded error message\n  if (isHexString(object.data)) {\n    object.data = format.hexBuffer(object.data).toString();\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3Byb3ZpZGVyL1JQQ0Vycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFBLFFBQVEsY0FBYyxFQUFFLG1CQUFPLENBQUMsc0VBQVM7QUFDekMsZUFBZSxtQkFBTyxDQUFDLDhFQUFnQjs7QUFFdkM7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdCQUFnQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3Zpa2FzaHlhZGF2L0RldmVsb3Blci9BbGxnaXRGaWxlcy9Db25mbHV4LVR4bi12aXN1YWxpemVyL25vZGVfbW9kdWxlcy9qcy1jb25mbHV4LXNkay9zcmMvcHJvdmlkZXIvUlBDRXJyb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBpc0hleFN0cmluZyB9ID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuY29uc3QgZm9ybWF0ID0gcmVxdWlyZSgnLi4vdXRpbC9mb3JtYXQnKTtcblxuY2xhc3MgUlBDRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG9iamVjdCwgcGF5bG9hZCA9IHt9KSB7XG4gICAgc3VwcGxlbWVudEVycm9ySW5mbyhvYmplY3QsIHBheWxvYWQpO1xuICAgIHN1cGVyKG9iamVjdCk7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvYmplY3QpO1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgcGF5bG9hZCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSUENFcnJvcjtcblxuZnVuY3Rpb24gc3VwcGxlbWVudEVycm9ySW5mbyhvYmplY3QsIHBheWxvYWQpIHtcbiAgLy8gSWYgdXNlIGJhc2UzMiBhZGRyZXNzIHdpdGggZnVsbCBub2RlIGJlZm9yZSB2MS4xLjEsIHdpbGwgZW5jb3VudGVyIHRoaXMgZXJyb3JcbiAgaWYgKG9iamVjdC5tZXNzYWdlLm1hdGNoKCcweCBwcmVmaXggaXMgbWlzc2luZycpKSB7XG4gICAgb2JqZWN0LmRhdGEgPSAnWW91IHNob3VsZCBjb25uZWN0IGEgbm9kZSB3aXRoIHZlcnNpb24gMS4xLjEgb3IgcGFzcyBhIHZhbGlkIGhleCB2YWx1ZSc7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChvYmplY3QubWVzc2FnZSA9PT0gJ01ldGhvZCBub3QgZm91bmQnICYmIHBheWxvYWQubWV0aG9kID09PSAnY2Z4X3NlbmRUcmFuc2FjdGlvbicpIHtcbiAgICBvYmplY3QubWVzc2FnZSA9IGAke29iamVjdC5tZXNzYWdlfSBDYW4ndCBmaW5kICdmcm9tJyBpbiBjZngud2FsbGV0LCBjaGVjayAnZXJyb3IuZGF0YScgZm9yIGRldGFpbGA7XG4gICAgb2JqZWN0LmRhdGEgPSAnUGxlYXNlIHVzZSBjZngud2FsbGV0LmFkZFByaXZhdGVLZXkoKSB0byBhZGQgYSBhY2NvdW50IGJlZm9yZSBjYWxsIGNmeC5zZW5kVHJhbnNhY3Rpb24oKSc7XG4gIH1cbiAgLy8gZGVjb2RlIGhleCBlbmNvZGVkIGVycm9yIG1lc3NhZ2VcbiAgaWYgKGlzSGV4U3RyaW5nKG9iamVjdC5kYXRhKSkge1xuICAgIG9iamVjdC5kYXRhID0gZm9ybWF0LmhleEJ1ZmZlcihvYmplY3QuZGF0YSkudG9TdHJpbmcoKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/provider/RPCError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/provider/WebSocketProvider.js":
/*!***********************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/provider/WebSocketProvider.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Websocket = (__webpack_require__(/*! websocket */ \"websocket\").w3cwebsocket);\nconst BaseProvider = __webpack_require__(/*! ./BaseProvider */ \"(ssr)/./node_modules/js-conflux-sdk/src/provider/BaseProvider.js\");\nconst { awaitTimeout } = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\n\n/**\n * Websocket protocol json rpc provider.\n */\nclass WebSocketProvider extends BaseProvider {\n  /**\n   * @param {object} [options] - See [W3CWebSocket](https://github.com/theturtle32/WebSocket-Node/blob/c91a6cb8f0cf896edf0d2d49faa0c9e0a9985172/docs/W3CWebSocket.md)\n   * @param {string} options.url - Full json rpc http url\n   * @param {number} [options.timeout=30*1000] - Request time out in ms\n   * @param {object} [options.logger] - Logger with `info` and `error`\n   * @param {string[]} [options.protocols] - See [w3](https://www.w3.org/TR/websockets/)\n   * @param {string} [options.origin]\n   * @param {object} [options.headers]\n   * @param {object} [options.requestOptions]\n   * @param {object} [options.clientConfig] - See [websocket/lib/WebSocketClient](https://github.com/theturtle32/WebSocket-Node/blob/c91a6cb8f0cf896edf0d2d49faa0c9e0a9985172/docs/WebSocketClient.md)\n   * @param {number} [options.clientConfig.maxReceivedFrameSize=0x100000] - 1MiB max frame size.\n   * @param {number} [options.clientConfig.maxReceivedMessageSize=0x800000] - 8MiB max message size, only applicable if assembleFragments is true\n   * @param {number} [options.clientConfig.closeTimeout=5000] - The number of milliseconds to wait after sending a close frame for an acknowledgement to come back before giving up and just closing the socket.\n   * @return {WebSocketProvider}\n   */\n  constructor(options) {\n    super(options);\n    this.websocketOptions = options;\n\n    this.client = null;\n\n    this.on('message', json => {\n      const data = JSON.parse(json);\n      if (Array.isArray(data)) {\n        data.forEach(each => this._onData(each));\n      } else {\n        this._onData(data);\n      }\n    });\n  }\n\n  _connect({ url, protocols, origin, headers, requestOptions, clientConfig }) {\n    return new Promise((resolve, reject) => {\n      const client = new Websocket(url, protocols, origin, headers, requestOptions, clientConfig);\n      client.onopen = () => resolve(client);\n      client.onerror = e => {\n        this.emit('error', e);\n        reject(new Error(`connect to \"${url}\" failed`));\n      };\n      client.onmessage = ({ data }) => this.emit('message', data);\n      client.onclose = ({ code, reason }) => this.emit('close', code, reason);\n    });\n  }\n\n  _onData(data = {}) {\n    const { id, params: { subscription, result } = {} } = data;\n    if (id) {\n      this.emit(id, data);\n    } else if (subscription) {\n      this.emit(subscription, result);\n    }\n  }\n\n  _awaitId(id) {\n    return new Promise((resolve, reject) => {\n      const onClose = (code, message) => {\n        this.removeAllListeners(id);\n        reject(new Error(message));\n      };\n\n      const onData = data => {\n        this.removeListener('close', onClose);\n        resolve(data);\n      };\n\n      this.once('close', onClose);\n      this.once(id, onData);\n    });\n  }\n\n  async _send(data) {\n    if (this.client === null) { // init\n      this.client = false;\n      try {\n        this.client = await this._connect(this.websocketOptions);\n      } catch (e) {\n        this.client = null;\n        throw e;\n      }\n    }\n\n    while (this.client === false) { // connecting\n      await new Promise(resolve => setTimeout(resolve, 1));\n    }\n\n    return this.client.send(data);\n  }\n\n  async _request(data) {\n    await this._send(JSON.stringify(data));\n\n    return await awaitTimeout(this._awaitId(data.id), this.timeout) || {};\n  }\n\n  async _requestBatch(dataArray) {\n    await this._send(JSON.stringify(dataArray));\n\n    return Promise.all(dataArray.map(async data => {\n      return awaitTimeout(this._awaitId(data.id), this.timeout); // timeout for each request\n    }));\n  }\n\n  async close() {\n    super.close();\n\n    if (this.client === null) { // init\n      return;\n    }\n\n    while (this.client === false) { // connecting\n      await new Promise(resolve => setTimeout(resolve, 1));\n    }\n\n    this.client.close();\n    await new Promise(resolve => this.once('close', resolve));\n    this.client = null;\n  }\n}\n\nmodule.exports = WebSocketProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3Byb3ZpZGVyL1dlYlNvY2tldFByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQixnRUFBaUM7QUFDbkQscUJBQXFCLG1CQUFPLENBQUMsd0ZBQWdCO0FBQzdDLFFBQVEsZUFBZSxFQUFFLG1CQUFPLENBQUMsc0VBQVM7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxVQUFVO0FBQ3ZCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQSxhQUFhLCtEQUErRDtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLElBQUk7QUFDNUM7QUFDQSw0QkFBNEIsTUFBTTtBQUNsQywwQkFBMEIsY0FBYztBQUN4QyxLQUFLO0FBQ0w7O0FBRUEsbUJBQW1CO0FBQ25CLFlBQVksY0FBYyx1QkFBdUIsT0FBTztBQUN4RDtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0NBQW9DO0FBQ3BDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGlFQUFpRTtBQUNqRSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQSxnQ0FBZ0M7QUFDaEM7QUFDQTs7QUFFQSxvQ0FBb0M7QUFDcEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvdmlrYXNoeWFkYXYvRGV2ZWxvcGVyL0FsbGdpdEZpbGVzL0NvbmZsdXgtVHhuLXZpc3VhbGl6ZXIvbm9kZV9tb2R1bGVzL2pzLWNvbmZsdXgtc2RrL3NyYy9wcm92aWRlci9XZWJTb2NrZXRQcm92aWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBXZWJzb2NrZXQgPSByZXF1aXJlKCd3ZWJzb2NrZXQnKS53M2N3ZWJzb2NrZXQ7XG5jb25zdCBCYXNlUHJvdmlkZXIgPSByZXF1aXJlKCcuL0Jhc2VQcm92aWRlcicpO1xuY29uc3QgeyBhd2FpdFRpbWVvdXQgfSA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcblxuLyoqXG4gKiBXZWJzb2NrZXQgcHJvdG9jb2wganNvbiBycGMgcHJvdmlkZXIuXG4gKi9cbmNsYXNzIFdlYlNvY2tldFByb3ZpZGVyIGV4dGVuZHMgQmFzZVByb3ZpZGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBTZWUgW1czQ1dlYlNvY2tldF0oaHR0cHM6Ly9naXRodWIuY29tL3RoZXR1cnRsZTMyL1dlYlNvY2tldC1Ob2RlL2Jsb2IvYzkxYTZjYjhmMGNmODk2ZWRmMGQyZDQ5ZmFhMGM5ZTBhOTk4NTE3Mi9kb2NzL1czQ1dlYlNvY2tldC5tZClcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMudXJsIC0gRnVsbCBqc29uIHJwYyBodHRwIHVybFxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMudGltZW91dD0zMCoxMDAwXSAtIFJlcXVlc3QgdGltZSBvdXQgaW4gbXNcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLmxvZ2dlcl0gLSBMb2dnZXIgd2l0aCBgaW5mb2AgYW5kIGBlcnJvcmBcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gW29wdGlvbnMucHJvdG9jb2xzXSAtIFNlZSBbdzNdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93ZWJzb2NrZXRzLylcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm9yaWdpbl1cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLmhlYWRlcnNdXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5yZXF1ZXN0T3B0aW9uc11cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLmNsaWVudENvbmZpZ10gLSBTZWUgW3dlYnNvY2tldC9saWIvV2ViU29ja2V0Q2xpZW50XShodHRwczovL2dpdGh1Yi5jb20vdGhldHVydGxlMzIvV2ViU29ja2V0LU5vZGUvYmxvYi9jOTFhNmNiOGYwY2Y4OTZlZGYwZDJkNDlmYWEwYzllMGE5OTg1MTcyL2RvY3MvV2ViU29ja2V0Q2xpZW50Lm1kKVxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuY2xpZW50Q29uZmlnLm1heFJlY2VpdmVkRnJhbWVTaXplPTB4MTAwMDAwXSAtIDFNaUIgbWF4IGZyYW1lIHNpemUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5jbGllbnRDb25maWcubWF4UmVjZWl2ZWRNZXNzYWdlU2l6ZT0weDgwMDAwMF0gLSA4TWlCIG1heCBtZXNzYWdlIHNpemUsIG9ubHkgYXBwbGljYWJsZSBpZiBhc3NlbWJsZUZyYWdtZW50cyBpcyB0cnVlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5jbGllbnRDb25maWcuY2xvc2VUaW1lb3V0PTUwMDBdIC0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBhZnRlciBzZW5kaW5nIGEgY2xvc2UgZnJhbWUgZm9yIGFuIGFja25vd2xlZGdlbWVudCB0byBjb21lIGJhY2sgYmVmb3JlIGdpdmluZyB1cCBhbmQganVzdCBjbG9zaW5nIHRoZSBzb2NrZXQuXG4gICAqIEByZXR1cm4ge1dlYlNvY2tldFByb3ZpZGVyfVxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIHRoaXMud2Vic29ja2V0T3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICB0aGlzLmNsaWVudCA9IG51bGw7XG5cbiAgICB0aGlzLm9uKCdtZXNzYWdlJywganNvbiA9PiB7XG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIGRhdGEuZm9yRWFjaChlYWNoID0+IHRoaXMuX29uRGF0YShlYWNoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9vbkRhdGEoZGF0YSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBfY29ubmVjdCh7IHVybCwgcHJvdG9jb2xzLCBvcmlnaW4sIGhlYWRlcnMsIHJlcXVlc3RPcHRpb25zLCBjbGllbnRDb25maWcgfSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBjbGllbnQgPSBuZXcgV2Vic29ja2V0KHVybCwgcHJvdG9jb2xzLCBvcmlnaW4sIGhlYWRlcnMsIHJlcXVlc3RPcHRpb25zLCBjbGllbnRDb25maWcpO1xuICAgICAgY2xpZW50Lm9ub3BlbiA9ICgpID0+IHJlc29sdmUoY2xpZW50KTtcbiAgICAgIGNsaWVudC5vbmVycm9yID0gZSA9PiB7XG4gICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlKTtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgY29ubmVjdCB0byBcIiR7dXJsfVwiIGZhaWxlZGApKTtcbiAgICAgIH07XG4gICAgICBjbGllbnQub25tZXNzYWdlID0gKHsgZGF0YSB9KSA9PiB0aGlzLmVtaXQoJ21lc3NhZ2UnLCBkYXRhKTtcbiAgICAgIGNsaWVudC5vbmNsb3NlID0gKHsgY29kZSwgcmVhc29uIH0pID0+IHRoaXMuZW1pdCgnY2xvc2UnLCBjb2RlLCByZWFzb24pO1xuICAgIH0pO1xuICB9XG5cbiAgX29uRGF0YShkYXRhID0ge30pIHtcbiAgICBjb25zdCB7IGlkLCBwYXJhbXM6IHsgc3Vic2NyaXB0aW9uLCByZXN1bHQgfSA9IHt9IH0gPSBkYXRhO1xuICAgIGlmIChpZCkge1xuICAgICAgdGhpcy5lbWl0KGlkLCBkYXRhKTtcbiAgICB9IGVsc2UgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5lbWl0KHN1YnNjcmlwdGlvbiwgcmVzdWx0KTtcbiAgICB9XG4gIH1cblxuICBfYXdhaXRJZChpZCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBvbkNsb3NlID0gKGNvZGUsIG1lc3NhZ2UpID0+IHtcbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoaWQpO1xuICAgICAgICByZWplY3QobmV3IEVycm9yKG1lc3NhZ2UpKTtcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG9uRGF0YSA9IGRhdGEgPT4ge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uQ2xvc2UpO1xuICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5vbmNlKCdjbG9zZScsIG9uQ2xvc2UpO1xuICAgICAgdGhpcy5vbmNlKGlkLCBvbkRhdGEpO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgX3NlbmQoZGF0YSkge1xuICAgIGlmICh0aGlzLmNsaWVudCA9PT0gbnVsbCkgeyAvLyBpbml0XG4gICAgICB0aGlzLmNsaWVudCA9IGZhbHNlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5jbGllbnQgPSBhd2FpdCB0aGlzLl9jb25uZWN0KHRoaXMud2Vic29ja2V0T3B0aW9ucyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRoaXMuY2xpZW50ID0gbnVsbDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB3aGlsZSAodGhpcy5jbGllbnQgPT09IGZhbHNlKSB7IC8vIGNvbm5lY3RpbmdcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnNlbmQoZGF0YSk7XG4gIH1cblxuICBhc3luYyBfcmVxdWVzdChkYXRhKSB7XG4gICAgYXdhaXQgdGhpcy5fc2VuZChKU09OLnN0cmluZ2lmeShkYXRhKSk7XG5cbiAgICByZXR1cm4gYXdhaXQgYXdhaXRUaW1lb3V0KHRoaXMuX2F3YWl0SWQoZGF0YS5pZCksIHRoaXMudGltZW91dCkgfHwge307XG4gIH1cblxuICBhc3luYyBfcmVxdWVzdEJhdGNoKGRhdGFBcnJheSkge1xuICAgIGF3YWl0IHRoaXMuX3NlbmQoSlNPTi5zdHJpbmdpZnkoZGF0YUFycmF5KSk7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoZGF0YUFycmF5Lm1hcChhc3luYyBkYXRhID0+IHtcbiAgICAgIHJldHVybiBhd2FpdFRpbWVvdXQodGhpcy5fYXdhaXRJZChkYXRhLmlkKSwgdGhpcy50aW1lb3V0KTsgLy8gdGltZW91dCBmb3IgZWFjaCByZXF1ZXN0XG4gICAgfSkpO1xuICB9XG5cbiAgYXN5bmMgY2xvc2UoKSB7XG4gICAgc3VwZXIuY2xvc2UoKTtcblxuICAgIGlmICh0aGlzLmNsaWVudCA9PT0gbnVsbCkgeyAvLyBpbml0XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2hpbGUgKHRoaXMuY2xpZW50ID09PSBmYWxzZSkgeyAvLyBjb25uZWN0aW5nXG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMSkpO1xuICAgIH1cblxuICAgIHRoaXMuY2xpZW50LmNsb3NlKCk7XG4gICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB0aGlzLm9uY2UoJ2Nsb3NlJywgcmVzb2x2ZSkpO1xuICAgIHRoaXMuY2xpZW50ID0gbnVsbDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYlNvY2tldFByb3ZpZGVyO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/provider/WebSocketProvider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/provider/WechatProvider.js":
/*!********************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/provider/WechatProvider.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const BaseProvider = __webpack_require__(/*! ./BaseProvider */ \"(ssr)/./node_modules/js-conflux-sdk/src/provider/BaseProvider.js\");\n\n/**\n * Wechat provider\n */\nclass WechatProvider extends BaseProvider {\n  async _doRequest(data) {\n    return new Promise((resolve, reject) => {\n      let retryCount = this.retry;\n      const sendRequest = () => {\n        wx.request({\n          method: 'POST',\n          url: this.url,\n          header: this.headers,\n          data,\n          timeout: this.timeout,\n          success: res => {\n            resolve(res.data);\n          },\n          fail: () => {\n            if (retryCount > 0) {\n              retryCount -= 1;\n              sendRequest();\n            } else {\n              reject(new Error('SendWechatRequestError'));\n            }\n          },\n        });\n      };\n      //\n      sendRequest();\n    });\n  }\n\n  async _request(data) {\n    const body = await this._doRequest(data);\n    return body || {};\n  }\n\n  async _requestBatch(dataArray) {\n    const body = await this._doRequest(dataArray);\n    return body || [];\n  }\n}\n\nmodule.exports = WechatProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3Byb3ZpZGVyL1dlY2hhdFByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQixtQkFBTyxDQUFDLHdGQUFnQjs7QUFFN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWthc2h5YWRhdi9EZXZlbG9wZXIvQWxsZ2l0RmlsZXMvQ29uZmx1eC1UeG4tdmlzdWFsaXplci9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3Byb3ZpZGVyL1dlY2hhdFByb3ZpZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEJhc2VQcm92aWRlciA9IHJlcXVpcmUoJy4vQmFzZVByb3ZpZGVyJyk7XG5cbi8qKlxuICogV2VjaGF0IHByb3ZpZGVyXG4gKi9cbmNsYXNzIFdlY2hhdFByb3ZpZGVyIGV4dGVuZHMgQmFzZVByb3ZpZGVyIHtcbiAgYXN5bmMgX2RvUmVxdWVzdChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxldCByZXRyeUNvdW50ID0gdGhpcy5yZXRyeTtcbiAgICAgIGNvbnN0IHNlbmRSZXF1ZXN0ID0gKCkgPT4ge1xuICAgICAgICB3eC5yZXF1ZXN0KHtcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICB1cmw6IHRoaXMudXJsLFxuICAgICAgICAgIGhlYWRlcjogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgdGltZW91dDogdGhpcy50aW1lb3V0LFxuICAgICAgICAgIHN1Y2Nlc3M6IHJlcyA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKHJlcy5kYXRhKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZhaWw6ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXRyeUNvdW50ID4gMCkge1xuICAgICAgICAgICAgICByZXRyeUNvdW50IC09IDE7XG4gICAgICAgICAgICAgIHNlbmRSZXF1ZXN0KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdTZW5kV2VjaGF0UmVxdWVzdEVycm9yJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICAgIC8vXG4gICAgICBzZW5kUmVxdWVzdCgpO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgX3JlcXVlc3QoZGF0YSkge1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCB0aGlzLl9kb1JlcXVlc3QoZGF0YSk7XG4gICAgcmV0dXJuIGJvZHkgfHwge307XG4gIH1cblxuICBhc3luYyBfcmVxdWVzdEJhdGNoKGRhdGFBcnJheSkge1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCB0aGlzLl9kb1JlcXVlc3QoZGF0YUFycmF5KTtcbiAgICByZXR1cm4gYm9keSB8fCBbXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFdlY2hhdFByb3ZpZGVyO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/provider/WechatProvider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/provider/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/provider/index.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const lodash = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nconst BaseProvider = __webpack_require__(/*! ./BaseProvider */ \"(ssr)/./node_modules/js-conflux-sdk/src/provider/BaseProvider.js\");\nconst HttpProvider = __webpack_require__(/*! ./HttpProvider */ \"(ssr)/./node_modules/js-conflux-sdk/src/provider/HttpProvider.js\");\nconst WechatProvider = __webpack_require__(/*! ./WechatProvider */ \"(ssr)/./node_modules/js-conflux-sdk/src/provider/WechatProvider.js\");\nconst WebsocketProvider = __webpack_require__(/*! ./WebSocketProvider */ \"(ssr)/./node_modules/js-conflux-sdk/src/provider/WebSocketProvider.js\");\n\n/**\n * @param {object} options\n * @param {string} options.url\n * @param {boolean} [options.useWechatProvider] - Whether use wechat provider.\n * @return {WebsocketProvider|HttpProvider|BaseProvider|WechatProvider}\n *\n * @example\n * > providerFactory()\n BaseProvider {\n    url: undefined,\n    timeout: 300000,\n    logger: { info: [Function: info], error: [Function: error] }\n  }\n * @example\n * > providerFactory({ url: 'http://localhost:12537' })\n HttpProvider {\n    url: 'http://localhost:12537',\n    timeout: 300000,\n    logger: { info: [Function: info], error: [Function: error] }\n  }\n\n * > providerFactory({\n    url: 'http://main.confluxrpc.org',\n    timeout: 60 * 60 * 1000,\n    logger: console,\n  }\n HttpProvider {\n    url: 'http://main.confluxrpc.org',\n    timeout: 3600000,\n    logger: {...}\n  }\n */\nfunction providerFactory({ url, useWechatProvider, ...rest }) {\n  if (!url) {\n    return new BaseProvider(rest); // empty provider\n  }\n\n  if (lodash.startsWith(url, 'http')) {\n    return useWechatProvider ? new WechatProvider({ url, ...rest }) : new HttpProvider({ url, ...rest });\n  }\n\n  if (lodash.startsWith(url, 'ws')) {\n    return new WebsocketProvider({ url, ...rest }); // FIXME: support ws in browser\n  }\n\n  throw new Error('Invalid provider options');\n}\n\nmodule.exports = providerFactory;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3Byb3ZpZGVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLGVBQWUsbUJBQU8sQ0FBQyxxREFBUTtBQUMvQixxQkFBcUIsbUJBQU8sQ0FBQyx3RkFBZ0I7QUFDN0MscUJBQXFCLG1CQUFPLENBQUMsd0ZBQWdCO0FBQzdDLHVCQUF1QixtQkFBTyxDQUFDLDRGQUFrQjtBQUNqRCwwQkFBMEIsbUJBQU8sQ0FBQyxrR0FBcUI7O0FBRXZEO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsdUJBQXVCLCtCQUErQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsMkJBQTJCLGlDQUFpQztBQUM1RDtBQUNBLG1DQUFtQztBQUNuQzs7QUFFQTtBQUNBLG9EQUFvRCxjQUFjLHVCQUF1QixjQUFjO0FBQ3ZHOztBQUVBO0FBQ0EsbUNBQW1DLGNBQWMsR0FBRztBQUNwRDs7QUFFQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvdmlrYXNoeWFkYXYvRGV2ZWxvcGVyL0FsbGdpdEZpbGVzL0NvbmZsdXgtVHhuLXZpc3VhbGl6ZXIvbm9kZV9tb2R1bGVzL2pzLWNvbmZsdXgtc2RrL3NyYy9wcm92aWRlci9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBsb2Rhc2ggPSByZXF1aXJlKCdsb2Rhc2gnKTtcbmNvbnN0IEJhc2VQcm92aWRlciA9IHJlcXVpcmUoJy4vQmFzZVByb3ZpZGVyJyk7XG5jb25zdCBIdHRwUHJvdmlkZXIgPSByZXF1aXJlKCcuL0h0dHBQcm92aWRlcicpO1xuY29uc3QgV2VjaGF0UHJvdmlkZXIgPSByZXF1aXJlKCcuL1dlY2hhdFByb3ZpZGVyJyk7XG5jb25zdCBXZWJzb2NrZXRQcm92aWRlciA9IHJlcXVpcmUoJy4vV2ViU29ja2V0UHJvdmlkZXInKTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMudXJsXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnVzZVdlY2hhdFByb3ZpZGVyXSAtIFdoZXRoZXIgdXNlIHdlY2hhdCBwcm92aWRlci5cbiAqIEByZXR1cm4ge1dlYnNvY2tldFByb3ZpZGVyfEh0dHBQcm92aWRlcnxCYXNlUHJvdmlkZXJ8V2VjaGF0UHJvdmlkZXJ9XG4gKlxuICogQGV4YW1wbGVcbiAqID4gcHJvdmlkZXJGYWN0b3J5KClcbiBCYXNlUHJvdmlkZXIge1xuICAgIHVybDogdW5kZWZpbmVkLFxuICAgIHRpbWVvdXQ6IDMwMDAwMCxcbiAgICBsb2dnZXI6IHsgaW5mbzogW0Z1bmN0aW9uOiBpbmZvXSwgZXJyb3I6IFtGdW5jdGlvbjogZXJyb3JdIH1cbiAgfVxuICogQGV4YW1wbGVcbiAqID4gcHJvdmlkZXJGYWN0b3J5KHsgdXJsOiAnaHR0cDovL2xvY2FsaG9zdDoxMjUzNycgfSlcbiBIdHRwUHJvdmlkZXIge1xuICAgIHVybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6MTI1MzcnLFxuICAgIHRpbWVvdXQ6IDMwMDAwMCxcbiAgICBsb2dnZXI6IHsgaW5mbzogW0Z1bmN0aW9uOiBpbmZvXSwgZXJyb3I6IFtGdW5jdGlvbjogZXJyb3JdIH1cbiAgfVxuXG4gKiA+IHByb3ZpZGVyRmFjdG9yeSh7XG4gICAgdXJsOiAnaHR0cDovL21haW4uY29uZmx1eHJwYy5vcmcnLFxuICAgIHRpbWVvdXQ6IDYwICogNjAgKiAxMDAwLFxuICAgIGxvZ2dlcjogY29uc29sZSxcbiAgfVxuIEh0dHBQcm92aWRlciB7XG4gICAgdXJsOiAnaHR0cDovL21haW4uY29uZmx1eHJwYy5vcmcnLFxuICAgIHRpbWVvdXQ6IDM2MDAwMDAsXG4gICAgbG9nZ2VyOiB7Li4ufVxuICB9XG4gKi9cbmZ1bmN0aW9uIHByb3ZpZGVyRmFjdG9yeSh7IHVybCwgdXNlV2VjaGF0UHJvdmlkZXIsIC4uLnJlc3QgfSkge1xuICBpZiAoIXVybCkge1xuICAgIHJldHVybiBuZXcgQmFzZVByb3ZpZGVyKHJlc3QpOyAvLyBlbXB0eSBwcm92aWRlclxuICB9XG5cbiAgaWYgKGxvZGFzaC5zdGFydHNXaXRoKHVybCwgJ2h0dHAnKSkge1xuICAgIHJldHVybiB1c2VXZWNoYXRQcm92aWRlciA/IG5ldyBXZWNoYXRQcm92aWRlcih7IHVybCwgLi4ucmVzdCB9KSA6IG5ldyBIdHRwUHJvdmlkZXIoeyB1cmwsIC4uLnJlc3QgfSk7XG4gIH1cblxuICBpZiAobG9kYXNoLnN0YXJ0c1dpdGgodXJsLCAnd3MnKSkge1xuICAgIHJldHVybiBuZXcgV2Vic29ja2V0UHJvdmlkZXIoeyB1cmwsIC4uLnJlc3QgfSk7IC8vIEZJWE1FOiBzdXBwb3J0IHdzIGluIGJyb3dzZXJcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBwcm92aWRlciBvcHRpb25zJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHJvdmlkZXJGYWN0b3J5O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/provider/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/rpc/Advanced.js":
/*!*********************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/rpc/Advanced.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Big = __webpack_require__(/*! big.js */ \"(ssr)/./node_modules/big.js/big.mjs\");\nconst CONST = __webpack_require__(/*! ../CONST */ \"(ssr)/./node_modules/js-conflux-sdk/src/CONST.js\");\nconst format = __webpack_require__(/*! ../util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\n\nclass AdvancedRPCUtilities {\n  constructor(conflux) {\n    this.conflux = conflux;\n  }\n\n  /**\n   * First try to use txpool_nextNonce method, if failed use cfx_getNextNonce\n   *\n   * @param {string} address - The address to get nonce\n   * @returns {Promise<BigInt>}\n   */\n  async getNextUsableNonce(address) {\n    address = this.conflux._formatAddress(address);\n    let nonce;\n    try {\n      nonce = await this.conflux.txpool.nextNonce(address);\n    } catch (e) {\n      nonce = await this.conflux.cfx.getNextNonce(address);\n    }\n    return nonce;\n  }\n\n  /**\n   * Get PoS interest rate\n   *\n   * @returns {Promise<string>} PoS interest rate\n   */\n  async getPoSInterestRate() {\n    const RATIO = new Big(0.04);\n    const batchRequest = this.conflux.BatchRequest();\n    batchRequest.add(this.conflux.cfx.getSupplyInfo.request());\n    batchRequest.add(this.conflux.cfx.getPoSEconomics.request());\n    batchRequest.add(this.conflux.cfx.getBalance.request(CONST.ZERO_ADDRESS_HEX));\n    const [\n      { totalCirculating },\n      { totalPosStakingTokens },\n      balanceOfZeroAddress,\n    ] = await batchRequest.execute();\n    const bigTotalStaking = new Big(totalCirculating - balanceOfZeroAddress);\n    const bigTotalPosStakingTokens = new Big(totalPosStakingTokens);\n    const bigRatio = RATIO.div(bigTotalPosStakingTokens.div(bigTotalStaking).sqrt());\n    return bigRatio.toString();\n  }\n\n  /**\n   * A advance method to check whether user's balance is enough to pay one transaction\n   *\n   * @param {Object} options Transaction info\n   * @param {string|number} [epochNumber] Optional epoch number\n   * @returns {Promise<Object>} A object indicate whether user's balance is capable to pay the transaction.\n   * - `BigInt` gasUsed: The gas used.\n   * - `BigInt` gasLimit: The gas limit.\n   * - `BigInt` storageCollateralized: The storage collateralized in Byte.\n   * - `Boolean` isBalanceEnough: indicate balance is enough for gas and storage fee\n   * - `Boolean` isBalanceEnoughForValueAndFee: indicate balance is enough for gas and storage fee plus value\n   * - `Boolean` willPayCollateral: false if the transaction is eligible for storage collateral sponsorship, true otherwise\n   * - `Boolean` willPayTxFee: false if the transaction is eligible for gas sponsorship, true otherwise\n   */\n  async estimateGasAndCollateralAdvance(options, epochNumber) {\n    const estimateResult = await this.conflux.cfx.estimateGasAndCollateral(options, epochNumber);\n    if (!options.from) {\n      throw new Error('Can not check balance without `from`');\n    }\n    options = this.conflux._formatCallTx(options);\n    const gasPrice = format.bigInt(options.gasPrice || BigInt(1));\n    const txValue = format.bigInt(options.value || BigInt(0));\n    const gasFee = gasPrice * estimateResult.gasLimit;\n    const storageFee = estimateResult.storageCollateralized * (BigInt(1e18) / BigInt(1024));\n    const balance = await this.conflux.cfx.getBalance(options.from);\n    estimateResult.balance = balance;\n    if (!options.to) {\n      estimateResult.willPayCollateral = true;\n      estimateResult.willPayTxFee = true;\n      estimateResult.isBalanceEnough = balance > (gasFee + storageFee);\n      estimateResult.isBalanceEnoughForValueAndFee = balance > (gasFee + storageFee + txValue);\n    } else {\n      const checkResult = await this.conflux.cfx.checkBalanceAgainstTransaction(\n        options.from,\n        options.to,\n        estimateResult.gasLimit,\n        gasPrice,\n        estimateResult.storageCollateralized,\n        epochNumber,\n      );\n      Object.assign(estimateResult, checkResult);\n      let totalValue = txValue;\n      totalValue += checkResult.willPayTxFee ? gasFee : BigInt(0);\n      totalValue += checkResult.willPayCollateral ? storageFee : BigInt(0);\n      estimateResult.isBalanceEnoughForValueAndFee = balance > totalValue;\n    }\n    return estimateResult;\n  }\n}\n\nmodule.exports = AdvancedRPCUtilities;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3JwYy9BZHZhbmNlZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLG1CQUFPLENBQUMsbURBQVE7QUFDNUIsY0FBYyxtQkFBTyxDQUFDLGtFQUFVO0FBQ2hDLGVBQWUsbUJBQU8sQ0FBQyw4RUFBZ0I7O0FBRXZDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGtCQUFrQjtBQUMxQixRQUFRLHVCQUF1QjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxlQUFlO0FBQzVCLGVBQWUsaUJBQWlCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWthc2h5YWRhdi9EZXZlbG9wZXIvQWxsZ2l0RmlsZXMvQ29uZmx1eC1UeG4tdmlzdWFsaXplci9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3JwYy9BZHZhbmNlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBCaWcgPSByZXF1aXJlKCdiaWcuanMnKTtcbmNvbnN0IENPTlNUID0gcmVxdWlyZSgnLi4vQ09OU1QnKTtcbmNvbnN0IGZvcm1hdCA9IHJlcXVpcmUoJy4uL3V0aWwvZm9ybWF0Jyk7XG5cbmNsYXNzIEFkdmFuY2VkUlBDVXRpbGl0aWVzIHtcbiAgY29uc3RydWN0b3IoY29uZmx1eCkge1xuICAgIHRoaXMuY29uZmx1eCA9IGNvbmZsdXg7XG4gIH1cblxuICAvKipcbiAgICogRmlyc3QgdHJ5IHRvIHVzZSB0eHBvb2xfbmV4dE5vbmNlIG1ldGhvZCwgaWYgZmFpbGVkIHVzZSBjZnhfZ2V0TmV4dE5vbmNlXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyZXNzIC0gVGhlIGFkZHJlc3MgdG8gZ2V0IG5vbmNlXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEJpZ0ludD59XG4gICAqL1xuICBhc3luYyBnZXROZXh0VXNhYmxlTm9uY2UoYWRkcmVzcykge1xuICAgIGFkZHJlc3MgPSB0aGlzLmNvbmZsdXguX2Zvcm1hdEFkZHJlc3MoYWRkcmVzcyk7XG4gICAgbGV0IG5vbmNlO1xuICAgIHRyeSB7XG4gICAgICBub25jZSA9IGF3YWl0IHRoaXMuY29uZmx1eC50eHBvb2wubmV4dE5vbmNlKGFkZHJlc3MpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIG5vbmNlID0gYXdhaXQgdGhpcy5jb25mbHV4LmNmeC5nZXROZXh0Tm9uY2UoYWRkcmVzcyk7XG4gICAgfVxuICAgIHJldHVybiBub25jZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgUG9TIGludGVyZXN0IHJhdGVcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gUG9TIGludGVyZXN0IHJhdGVcbiAgICovXG4gIGFzeW5jIGdldFBvU0ludGVyZXN0UmF0ZSgpIHtcbiAgICBjb25zdCBSQVRJTyA9IG5ldyBCaWcoMC4wNCk7XG4gICAgY29uc3QgYmF0Y2hSZXF1ZXN0ID0gdGhpcy5jb25mbHV4LkJhdGNoUmVxdWVzdCgpO1xuICAgIGJhdGNoUmVxdWVzdC5hZGQodGhpcy5jb25mbHV4LmNmeC5nZXRTdXBwbHlJbmZvLnJlcXVlc3QoKSk7XG4gICAgYmF0Y2hSZXF1ZXN0LmFkZCh0aGlzLmNvbmZsdXguY2Z4LmdldFBvU0Vjb25vbWljcy5yZXF1ZXN0KCkpO1xuICAgIGJhdGNoUmVxdWVzdC5hZGQodGhpcy5jb25mbHV4LmNmeC5nZXRCYWxhbmNlLnJlcXVlc3QoQ09OU1QuWkVST19BRERSRVNTX0hFWCkpO1xuICAgIGNvbnN0IFtcbiAgICAgIHsgdG90YWxDaXJjdWxhdGluZyB9LFxuICAgICAgeyB0b3RhbFBvc1N0YWtpbmdUb2tlbnMgfSxcbiAgICAgIGJhbGFuY2VPZlplcm9BZGRyZXNzLFxuICAgIF0gPSBhd2FpdCBiYXRjaFJlcXVlc3QuZXhlY3V0ZSgpO1xuICAgIGNvbnN0IGJpZ1RvdGFsU3Rha2luZyA9IG5ldyBCaWcodG90YWxDaXJjdWxhdGluZyAtIGJhbGFuY2VPZlplcm9BZGRyZXNzKTtcbiAgICBjb25zdCBiaWdUb3RhbFBvc1N0YWtpbmdUb2tlbnMgPSBuZXcgQmlnKHRvdGFsUG9zU3Rha2luZ1Rva2Vucyk7XG4gICAgY29uc3QgYmlnUmF0aW8gPSBSQVRJTy5kaXYoYmlnVG90YWxQb3NTdGFraW5nVG9rZW5zLmRpdihiaWdUb3RhbFN0YWtpbmcpLnNxcnQoKSk7XG4gICAgcmV0dXJuIGJpZ1JhdGlvLnRvU3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICogQSBhZHZhbmNlIG1ldGhvZCB0byBjaGVjayB3aGV0aGVyIHVzZXIncyBiYWxhbmNlIGlzIGVub3VnaCB0byBwYXkgb25lIHRyYW5zYWN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIFRyYW5zYWN0aW9uIGluZm9cbiAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBbZXBvY2hOdW1iZXJdIE9wdGlvbmFsIGVwb2NoIG51bWJlclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBBIG9iamVjdCBpbmRpY2F0ZSB3aGV0aGVyIHVzZXIncyBiYWxhbmNlIGlzIGNhcGFibGUgdG8gcGF5IHRoZSB0cmFuc2FjdGlvbi5cbiAgICogLSBgQmlnSW50YCBnYXNVc2VkOiBUaGUgZ2FzIHVzZWQuXG4gICAqIC0gYEJpZ0ludGAgZ2FzTGltaXQ6IFRoZSBnYXMgbGltaXQuXG4gICAqIC0gYEJpZ0ludGAgc3RvcmFnZUNvbGxhdGVyYWxpemVkOiBUaGUgc3RvcmFnZSBjb2xsYXRlcmFsaXplZCBpbiBCeXRlLlxuICAgKiAtIGBCb29sZWFuYCBpc0JhbGFuY2VFbm91Z2g6IGluZGljYXRlIGJhbGFuY2UgaXMgZW5vdWdoIGZvciBnYXMgYW5kIHN0b3JhZ2UgZmVlXG4gICAqIC0gYEJvb2xlYW5gIGlzQmFsYW5jZUVub3VnaEZvclZhbHVlQW5kRmVlOiBpbmRpY2F0ZSBiYWxhbmNlIGlzIGVub3VnaCBmb3IgZ2FzIGFuZCBzdG9yYWdlIGZlZSBwbHVzIHZhbHVlXG4gICAqIC0gYEJvb2xlYW5gIHdpbGxQYXlDb2xsYXRlcmFsOiBmYWxzZSBpZiB0aGUgdHJhbnNhY3Rpb24gaXMgZWxpZ2libGUgZm9yIHN0b3JhZ2UgY29sbGF0ZXJhbCBzcG9uc29yc2hpcCwgdHJ1ZSBvdGhlcndpc2VcbiAgICogLSBgQm9vbGVhbmAgd2lsbFBheVR4RmVlOiBmYWxzZSBpZiB0aGUgdHJhbnNhY3Rpb24gaXMgZWxpZ2libGUgZm9yIGdhcyBzcG9uc29yc2hpcCwgdHJ1ZSBvdGhlcndpc2VcbiAgICovXG4gIGFzeW5jIGVzdGltYXRlR2FzQW5kQ29sbGF0ZXJhbEFkdmFuY2Uob3B0aW9ucywgZXBvY2hOdW1iZXIpIHtcbiAgICBjb25zdCBlc3RpbWF0ZVJlc3VsdCA9IGF3YWl0IHRoaXMuY29uZmx1eC5jZnguZXN0aW1hdGVHYXNBbmRDb2xsYXRlcmFsKG9wdGlvbnMsIGVwb2NoTnVtYmVyKTtcbiAgICBpZiAoIW9wdGlvbnMuZnJvbSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gbm90IGNoZWNrIGJhbGFuY2Ugd2l0aG91dCBgZnJvbWAnKTtcbiAgICB9XG4gICAgb3B0aW9ucyA9IHRoaXMuY29uZmx1eC5fZm9ybWF0Q2FsbFR4KG9wdGlvbnMpO1xuICAgIGNvbnN0IGdhc1ByaWNlID0gZm9ybWF0LmJpZ0ludChvcHRpb25zLmdhc1ByaWNlIHx8IEJpZ0ludCgxKSk7XG4gICAgY29uc3QgdHhWYWx1ZSA9IGZvcm1hdC5iaWdJbnQob3B0aW9ucy52YWx1ZSB8fCBCaWdJbnQoMCkpO1xuICAgIGNvbnN0IGdhc0ZlZSA9IGdhc1ByaWNlICogZXN0aW1hdGVSZXN1bHQuZ2FzTGltaXQ7XG4gICAgY29uc3Qgc3RvcmFnZUZlZSA9IGVzdGltYXRlUmVzdWx0LnN0b3JhZ2VDb2xsYXRlcmFsaXplZCAqIChCaWdJbnQoMWUxOCkgLyBCaWdJbnQoMTAyNCkpO1xuICAgIGNvbnN0IGJhbGFuY2UgPSBhd2FpdCB0aGlzLmNvbmZsdXguY2Z4LmdldEJhbGFuY2Uob3B0aW9ucy5mcm9tKTtcbiAgICBlc3RpbWF0ZVJlc3VsdC5iYWxhbmNlID0gYmFsYW5jZTtcbiAgICBpZiAoIW9wdGlvbnMudG8pIHtcbiAgICAgIGVzdGltYXRlUmVzdWx0LndpbGxQYXlDb2xsYXRlcmFsID0gdHJ1ZTtcbiAgICAgIGVzdGltYXRlUmVzdWx0LndpbGxQYXlUeEZlZSA9IHRydWU7XG4gICAgICBlc3RpbWF0ZVJlc3VsdC5pc0JhbGFuY2VFbm91Z2ggPSBiYWxhbmNlID4gKGdhc0ZlZSArIHN0b3JhZ2VGZWUpO1xuICAgICAgZXN0aW1hdGVSZXN1bHQuaXNCYWxhbmNlRW5vdWdoRm9yVmFsdWVBbmRGZWUgPSBiYWxhbmNlID4gKGdhc0ZlZSArIHN0b3JhZ2VGZWUgKyB0eFZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY2hlY2tSZXN1bHQgPSBhd2FpdCB0aGlzLmNvbmZsdXguY2Z4LmNoZWNrQmFsYW5jZUFnYWluc3RUcmFuc2FjdGlvbihcbiAgICAgICAgb3B0aW9ucy5mcm9tLFxuICAgICAgICBvcHRpb25zLnRvLFxuICAgICAgICBlc3RpbWF0ZVJlc3VsdC5nYXNMaW1pdCxcbiAgICAgICAgZ2FzUHJpY2UsXG4gICAgICAgIGVzdGltYXRlUmVzdWx0LnN0b3JhZ2VDb2xsYXRlcmFsaXplZCxcbiAgICAgICAgZXBvY2hOdW1iZXIsXG4gICAgICApO1xuICAgICAgT2JqZWN0LmFzc2lnbihlc3RpbWF0ZVJlc3VsdCwgY2hlY2tSZXN1bHQpO1xuICAgICAgbGV0IHRvdGFsVmFsdWUgPSB0eFZhbHVlO1xuICAgICAgdG90YWxWYWx1ZSArPSBjaGVja1Jlc3VsdC53aWxsUGF5VHhGZWUgPyBnYXNGZWUgOiBCaWdJbnQoMCk7XG4gICAgICB0b3RhbFZhbHVlICs9IGNoZWNrUmVzdWx0LndpbGxQYXlDb2xsYXRlcmFsID8gc3RvcmFnZUZlZSA6IEJpZ0ludCgwKTtcbiAgICAgIGVzdGltYXRlUmVzdWx0LmlzQmFsYW5jZUVub3VnaEZvclZhbHVlQW5kRmVlID0gYmFsYW5jZSA+IHRvdGFsVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBlc3RpbWF0ZVJlc3VsdDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFkdmFuY2VkUlBDVXRpbGl0aWVzO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/rpc/Advanced.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/rpc/BatchRequester.js":
/*!***************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/rpc/BatchRequester.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const RPCError = __webpack_require__(/*! ../provider/RPCError */ \"(ssr)/./node_modules/js-conflux-sdk/src/provider/RPCError.js\");\nconst Transaction = __webpack_require__(/*! ../Transaction */ \"(ssr)/./node_modules/js-conflux-sdk/src/Transaction.js\");\nconst format = __webpack_require__(/*! ../util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\n\nconst SEND_TX_METHOD = 'cfx_sendTransaction';\nconst SEND_RAW_TX_METHOD = 'cfx_sendRawTransaction';\n\nclass BatchRequester {\n  /**\n   * BatchRequester constructor.\n   *\n   * @param {import('../Conflux').Conflux} conflux - A Conflux instance\n   */\n  constructor(conflux) {\n    this.conflux = conflux;\n    this.requests = [];\n    this.decoders = [];\n    this.accountNextNonces = {};\n    this.accountUsedNonces = {};\n  }\n\n  /**\n   * Add RPC method request to batch builder\n   * @param {object} A - request meta info object, include 'request' and 'decoder'\n   * @param {object} A.request - JSON-RPC request object, include `method` and `params` array\n   * @param {function} A.decoder - Response decoder\n   * @example\n   * Low level example:\n   * batchRequester.add({\n   *  \"request\": {\n   *    \"method\": \"cfx_getStatus\",\n   *    \"params\": []\n   *  },\n   *  \"decoder\": decoderFunction\n   * });\n   *\n   * Use RPC method's request method to build request:\n   * batchRequester.add(conflux.cfx.getBalance.request('cfxtest:aasm4c231py7j34fghntcfkdt2nm9xv1tu6jd3r1s7'));\n   */\n  add({ request, decoder = any => any }) {\n    this.requests.push(request);\n    this.decoders.push(decoder);\n  }\n\n  addTransaction(txOption) {\n    this.add({\n      request: {\n        method: SEND_TX_METHOD,\n        params: [txOption],\n      },\n    });\n  }\n\n  /**\n   * Clear Batch requester's requests and decoders\n   */\n  clear() {\n    this.requests = [];\n    this.decoders = [];\n    this.accountNextNonces = {};\n    this.accountUsedNonces = {};\n  }\n\n  /**\n   * Batch send the RPC requests, retrive the responses and decode\n   * @returns {Array}\n   * @example await batchRequester.execute();\n   */\n  async execute() {\n    // prepare transaction nonce and sign it\n    const _requests = [];\n    await this._prepareTxCommonInfo();\n    await this._prepareTxNonce();\n    await this._prepareGasAndStorage();\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < this.requests.length; i++) {\n      const req = this.requests[i];\n\n      if (\n        req.method === SEND_TX_METHOD\n        && req.params[0]\n        && req.params[0].from\n        && this.conflux.wallet.has(req.params[0].from)\n      ) {\n        // sign transaction\n        const from = req.params[0].from;\n        const account = await this.conflux.wallet.get(`${from}`);\n        const signedTx = await account.signTransaction(req.params[0]);\n        // change method to cfx_sendRawTransaction\n        req.method = SEND_RAW_TX_METHOD;\n        req.params[0] = signedTx.serialize();\n      }\n\n      _requests[i] = req;\n    }\n\n    // decode response\n    const results = await this.conflux.provider.batch(_requests);\n    return results.map((data, i) => {\n      if (data instanceof RPCError) { // If is error direct return\n        return data;\n      }\n      return this.decoders[i](data);\n    });\n  }\n\n  async _prepareTxNonce() {\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < this.requests.length; i++) {\n      const req = this.requests[i];\n\n      if (req.method === SEND_RAW_TX_METHOD) {\n        const _tx = Transaction.decodeRaw(req.params[0]);\n        this._markNonceUsed(_tx.from, _tx.nonce);\n      }\n\n      if (\n        req.method === SEND_TX_METHOD\n        && req.params[0]\n        && req.params[0].from\n        && this.conflux.wallet.has(req.params[0].from)\n      ) {\n        // prepare nonce\n        const from = req.params[0].from;\n        let _nonce = req.params[0].nonce;\n        if (!_nonce || this._isNonceUsed(from, _nonce)) {\n          _nonce = await this._getNextNonce(from);\n          req.params[0].nonce = _nonce;\n        }\n        this._markNonceUsed(from, _nonce);\n      }\n    }\n  }\n\n  async _prepareTxCommonInfo() {\n    const txCommon = await this._getTxCommonInfo();\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < this.requests.length; i++) {\n      const req = this.requests[i];\n\n      if (req.method === SEND_TX_METHOD && req.params[0]) {\n        if (!req.params[0].gasPrice) {\n          req.params[0].gasPrice = txCommon.gasPrice;\n        }\n\n        if (!req.params[0].chainId) {\n          req.params[0].chainId = txCommon.chainId;\n        }\n\n        if (!req.params[0].epochHeight) {\n          req.params[0].epochHeight = txCommon.epochHeight;\n        }\n      }\n    }\n  }\n\n  async _prepareGasAndStorage() {\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < this.requests.length; i++) {\n      const req = this.requests[i];\n\n      if (req.method === SEND_TX_METHOD && req.params[0]) {\n        if (!req.params[0].gas || !req.params[0].storageLimit) {\n          const {\n            gasLimit,\n            storageCollateralized,\n          } = await this.conflux.cfx.estimateGasAndCollateral(req.params[0]);\n          req.params[0].gas = gasLimit;\n          req.params[0].storageLimit = storageCollateralized;\n        }\n      }\n    }\n  }\n\n  _markNonceUsed(from, nonce) {\n    from = format.address(from, this.conflux.networkId);\n    nonce = format.bigUInt(nonce);\n\n    if (!this.accountUsedNonces[from]) {\n      this.accountUsedNonces[from] = {};\n    }\n    this.accountUsedNonces[from][nonce] = true;\n  }\n\n  _isNonceUsed(from, nonce) {\n    from = format.address(from, this.conflux.networkId);\n    nonce = format.bigUInt(nonce);\n\n    return this.accountUsedNonces[from] && this.accountUsedNonces[from][nonce];\n  }\n\n  async _getTxCommonInfo() {\n    const epochHeight = await this.conflux.cfx.epochNumber();\n    const gasPrice = await this.conflux.cfx.gasPrice();\n    return {\n      epochHeight,\n      gasPrice,\n      chainId: this.conflux.networkId,\n    };\n  }\n\n  async _getNextNonce(from) {\n    let _nonce = this.accountNextNonces[from];\n    if (!_nonce) {\n      _nonce = await this.conflux.advanced.getNextUsableNonce(from);\n    }\n    //\n    while (this.accountUsedNonces[from] && this.accountUsedNonces[from][_nonce]) {\n      _nonce += BigInt(1);\n    }\n\n    this.accountNextNonces[from] = _nonce + BigInt(1); // update next nonce\n\n    return _nonce;\n  }\n}\n\nmodule.exports = BatchRequester;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/rpc/BatchRequester.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/rpc/cfx.js":
/*!****************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/rpc/cfx.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const RPCMethodFactory = __webpack_require__(/*! ./index */ \"(ssr)/./node_modules/js-conflux-sdk/src/rpc/index.js\");\nconst format = __webpack_require__(/*! ../util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\nconst cfxFormat = __webpack_require__(/*! ./types/formatter */ \"(ssr)/./node_modules/js-conflux-sdk/src/rpc/types/formatter.js\");\nconst addressUtil = __webpack_require__(/*! ../util/address */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/address.js\");\nconst CONST = __webpack_require__(/*! ../CONST */ \"(ssr)/./node_modules/js-conflux-sdk/src/CONST.js\");\nconst { assert } = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\nconst { decodeCfxAddress, ADDRESS_TYPES } = __webpack_require__(/*! ../util/address */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/address.js\");\nconst PendingTransaction = __webpack_require__(/*! ../subscribe/PendingTransaction */ \"(ssr)/./node_modules/js-conflux-sdk/src/subscribe/PendingTransaction.js\");\nconst Contract = __webpack_require__(/*! ../contract */ \"(ssr)/./node_modules/js-conflux-sdk/src/contract/index.js\");\nconst RPCTypes = __webpack_require__(/*! ./types/index */ \"(ssr)/./node_modules/js-conflux-sdk/src/rpc/types/index.js\");\n\n/**\n * @typedef { import('../Transaction').TransactionMeta } TransactionMeta\n */\nclass CFX extends RPCMethodFactory {\n  constructor(conflux) {\n    super(conflux);\n    this.conflux = conflux;\n    this._formatAddress = conflux._formatAddress.bind(conflux);\n    // add RPC methods\n    super.addMethods(this.methods());\n    // decorate methods;\n    this.sendRawTransaction = this._decoratePendingTransaction(this.sendRawTransaction);\n    this.sendTransaction = this._decoratePendingTransaction(this.sendTransaction);\n    this.call = this._addRequestBuilderToCall();\n    this.estimateGasAndCollateral = this._addRequestBuilderToEstimate();\n  }\n\n  methods() {\n    const formatAddressWithNetworkId = this._formatAddress;\n    return [\n      {\n        method: 'cfx_clientVersion',\n      },\n      {\n        method: 'cfx_getSupplyInfo',\n        requestFormatters: [\n          format.epochNumberOrUndefined,\n        ],\n        responseFormatter: cfxFormat.supplyInfo,\n      },\n      {\n        method: 'cfx_getStatus',\n        responseFormatter: cfxFormat.status,\n      },\n      {\n        method: 'cfx_gasPrice',\n        alias: 'getGasPrice',\n        responseFormatter: format.bigUInt,\n      },\n      {\n        method: 'cfx_maxPriorityFeePerGas',\n        responseFormatter: format.bigUInt,\n      },\n      {\n        method: 'cfx_getFeeBurnt',\n        requestFormatters: [\n          format.epochNumberOrUndefined,\n        ],\n        responseFormatter: format.bigUInt,\n      },\n      {\n        method: 'cfx_feeHistory',\n        requestFormatters: [\n          format.bigUIntHex,\n          format.epochNumber,\n          format.any, // f64 array\n        ],\n        responseFormatter: cfxFormat.feeHistory,\n      },\n      {\n        method: 'cfx_getInterestRate',\n        requestFormatters: [\n          format.epochNumberOrUndefined,\n        ],\n        responseFormatter: format.bigUInt,\n      },\n      {\n        method: 'cfx_getAccumulateInterestRate',\n        requestFormatters: [\n          format.epochNumberOrUndefined,\n        ],\n        responseFormatter: format.bigUInt,\n      },\n      {\n        method: 'cfx_getAccount',\n        requestFormatters: [\n          formatAddressWithNetworkId,\n          format.epochNumberOrUndefined,\n        ],\n        responseFormatter: data => new RPCTypes.Account(data),\n      },\n      {\n        method: 'cfx_getBalance',\n        requestFormatters: [\n          formatAddressWithNetworkId,\n          format.epochNumberOrBlockHash,\n        ],\n        responseFormatter: format.bigUInt,\n      },\n      {\n        method: 'cfx_getStakingBalance',\n        requestFormatters: [\n          formatAddressWithNetworkId,\n          format.epochNumberOrUndefined,\n        ],\n        responseFormatter: format.bigUInt,\n      },\n      {\n        method: 'cfx_getNextNonce',\n        requestFormatters: [\n          formatAddressWithNetworkId,\n          format.epochNumberOrBlockHash,\n        ],\n        responseFormatter: format.bigUInt,\n      },\n      {\n        method: 'cfx_getAdmin',\n        requestFormatters: [\n          formatAddressWithNetworkId,\n          format.epochNumberOrUndefined,\n        ],\n      },\n      {\n        method: 'cfx_getVoteList',\n        requestFormatters: [\n          formatAddressWithNetworkId,\n          format.epochNumberOrUndefined,\n        ],\n        responseFormatter: cfxFormat.voteList,\n      },\n      {\n        method: 'cfx_getDepositList',\n        requestFormatters: [\n          formatAddressWithNetworkId,\n          format.epochNumberOrUndefined,\n        ],\n        responseFormatter: cfxFormat.depositList,\n      },\n      {\n        method: 'cfx_epochNumber',\n        alias: 'getEpochNumber',\n        requestFormatters: [\n          format.epochNumberOrUndefined,\n        ],\n        responseFormatter: format.uInt,\n      },\n      {\n        method: 'cfx_getBlockByEpochNumber',\n        requestFormatters: [\n          format.epochNumber,\n          format.boolean, // TODO default false\n        ],\n        responseFormatter: cfxFormat.block.$or(null),\n      },\n      {\n        method: 'cfx_getBlockByBlockNumber',\n        requestFormatters: [\n          format.bigUIntHex,\n          format.boolean,\n        ],\n        responseFormatter: cfxFormat.block.$or(null),\n      },\n      {\n        method: 'cfx_getBlocksByEpoch',\n        alias: 'getBlocksByEpochNumber',\n        requestFormatters: [\n          format.epochNumber,\n        ],\n      },\n      {\n        method: 'cfx_getBlockRewardInfo',\n        requestFormatters: [\n          format.epochNumber,\n        ],\n        responseFormatter: cfxFormat.rewardInfo,\n      },\n      {\n        method: 'cfx_getBestBlockHash',\n      },\n      {\n        method: 'cfx_getBlockByHash',\n        requestFormatters: [\n          format.blockHash,\n          format.boolean,\n        ],\n        responseFormatter: cfxFormat.block.$or(null),\n      },\n      {\n        method: 'cfx_getBlockByHashWithPivotAssumption',\n        requestFormatters: [\n          format.blockHash,\n          format.blockHash,\n          format.epochNumber,\n        ],\n        responseFormatter: cfxFormat.block,\n      },\n      {\n        method: 'cfx_getConfirmationRiskByHash',\n        requestFormatters: [\n          format.blockHash,\n        ],\n        responseFormatter: format.fixed64.$or(null),\n      },\n      {\n        method: 'cfx_getTransactionByHash',\n        requestFormatters: [\n          format.transactionHash,\n        ],\n        responseFormatter: cfxFormat.transaction.$or(null),\n      },\n      {\n        method: 'cfx_getTransactionReceipt',\n        requestFormatters: [\n          format.transactionHash,\n        ],\n        responseFormatter: cfxFormat.receipt.$or(null),\n      },\n      {\n        method: 'cfx_sendRawTransaction',\n        requestFormatters: [\n          format.hex,\n        ],\n      },\n      {\n        method: 'cfx_getCode',\n        requestFormatters: [\n          formatAddressWithNetworkId,\n          format.epochNumberOrBlockHash,\n        ],\n        responseFormatter: format.any,\n      },\n      {\n        method: 'cfx_getStorageAt',\n        requestFormatters: [\n          formatAddressWithNetworkId,\n          format.hex64,\n          format.epochNumberOrBlockHash,\n        ],\n      },\n      {\n        method: 'cfx_getStorageRoot',\n        requestFormatters: [\n          formatAddressWithNetworkId,\n          format.epochNumberOrUndefined,\n        ],\n      },\n      {\n        method: 'cfx_getSponsorInfo',\n        requestFormatters: [\n          formatAddressWithNetworkId,\n          format.epochNumberOrUndefined,\n        ],\n        responseFormatter: cfxFormat.sponsorInfo,\n      },\n      {\n        method: 'cfx_getAccountPendingInfo',\n        requestFormatters: [\n          formatAddressWithNetworkId,\n        ],\n        responseFormatter: cfxFormat.accountPendingInfo,\n      },\n      {\n        method: 'cfx_getAccountPendingTransactions',\n        requestFormatters: [\n          formatAddressWithNetworkId,\n          format.bigUIntHex.$or(undefined),\n          format.bigUIntHex.$or(undefined),\n        ],\n        responseFormatter: cfxFormat.accountPendingTransactions,\n      },\n      {\n        method: 'cfx_getCollateralForStorage',\n        requestFormatters: [\n          formatAddressWithNetworkId,\n          format.epochNumberOrUndefined,\n        ],\n        responseFormatter: format.bigUInt,\n      },\n      {\n        method: 'cfx_checkBalanceAgainstTransaction',\n        requestFormatters: [\n          formatAddressWithNetworkId,\n          formatAddressWithNetworkId,\n          format.bigUIntHex,\n          format.bigUIntHex,\n          format.bigUIntHex,\n          format.epochNumberOrUndefined,\n        ],\n        responseFormatter: format.any,\n      },\n      /* {\n        method: 'cfx_call',\n        requestFormatters: [\n          this.conflux._formatCallTx,\n          format.epochNumberOrUndefined,\n        ],\n        responseFormatter: format.any, // TODO catch exception and decode error\n      },\n      {\n        method: 'cfx_estimateGasAndCollateral',\n        requestFormatters: [\n          this.conflux._formatCallTx,\n          format.epochNumberOrUndefined,\n        ],\n        responseFormatter: cfxFormat.estimate,\n      }, */\n      {\n        method: 'cfx_getLogs',\n        beforeHook(options) {\n          if (options.blockHashes !== undefined && (options.fromEpoch !== undefined || options.toEpoch !== undefined)) {\n            throw new Error('OverrideError, do not use `blockHashes` with `fromEpoch` or `toEpoch`, cause only `blockHashes` will take effect');\n          }\n        },\n        requestFormatters: [\n          this.conflux._formatGetLogs.bind(this.conflux),\n        ],\n        responseFormatter: cfxFormat.logs,\n      },\n      {\n        method: 'cfx_getPoSEconomics',\n        requestFormatters: [\n          format.epochNumberOrUndefined,\n        ],\n        responseFormatter: cfxFormat.posEconomics,\n      },\n      {\n        method: 'cfx_getParamsFromVote',\n        requestFormatters: [\n          format.epochNumberOrUndefined,\n        ],\n        responseFormatter: cfxFormat.voteParamsInfo,\n      },\n      {\n        method: 'cfx_getCollateralInfo',\n        requestFormatters: [\n          format.epochNumberOrUndefined,\n        ],\n        responseFormatter: cfxFormat.collateralInfo,\n      },\n      {\n        method: 'cfx_newFilter',\n        requestFormatters: [\n          format.getLogs,\n        ],\n      },\n      {\n        method: 'cfx_newBlockFilter',\n      },\n      {\n        method: 'cfx_newPendingTransactionFilter',\n      },\n      {\n        method: 'cfx_getFilterChanges',\n        requestFormatters: [\n          format.hex32,\n        ],\n        responseFormatter: cfxFormat.logs.$or(format([format.hex64])),\n      },\n      {\n        method: 'cfx_getFilterLogs',\n        requestFormatters: [\n          format.hex32,\n        ],\n        responseFormatter: cfxFormat.logs,\n      },\n      {\n        method: 'cfx_uninstallFilter',\n        requestFormatters: [\n          format.hex32,\n        ],\n      },\n      {\n        method: 'cfx_getEpochReceipts',\n        debug: true,\n        requestFormatters: [\n          format.epochNumberOrBlockHash,\n          format.boolean.$or(undefined),\n        ],\n        responseFormatter: cfxFormat.epochReceipts,\n      },\n      {\n        method: 'debug_getTransactionsByEpoch',\n        debug: true,\n        requestFormatters: [\n          format.bigUIntHex,\n        ],\n        responseFormatter: format([format.wrapTransaction]),\n      },\n      {\n        method: 'debug_getTransactionsByBlock',\n        debug: true,\n        requestFormatters: [\n          format.blockHash,\n        ],\n        responseFormatter: format([format.wrapTransaction]),\n      },\n      {\n        method: 'debug_getEpochReceiptProofByTransaction',\n        debug: true,\n        requestFormatters: [\n          format.transactionHash,\n        ],\n      },\n    ];\n  }\n\n  _decoratePendingTransaction(func) {\n    const cfx = this;\n    return function (...args) {\n      return new PendingTransaction(cfx, func.bind(this), args);\n    };\n  }\n\n  _addRequestBuilderToCall() {\n    const self = this;\n\n    async function wrapper(options, epochNumber) {\n      return self._call(options, epochNumber);\n    }\n\n    wrapper.request = function (options, epochNumber) {\n      return {\n        request: {\n          method: 'cfx_call',\n          params: [\n            self.conflux._formatCallTx(options),\n            format.epochNumberOrBlockHash(epochNumber),\n          ],\n        },\n      };\n    };\n\n    return wrapper;\n  }\n\n  _addRequestBuilderToEstimate() {\n    const self = this;\n\n    async function wrapper(options, epochNumber) {\n      return self._estimateGasAndCollateral(options, epochNumber);\n    }\n\n    wrapper.request = function (options, epochNumber) {\n      return {\n        request: {\n          method: 'cfx_estimateGasAndCollateral',\n          params: [\n            self.conflux._formatCallTx(options),\n            format.epochNumber.$or(undefined)(epochNumber),\n          ],\n        },\n        decoder: cfxFormat.estimate,\n      };\n    };\n\n    return wrapper;\n  }\n\n  /**\n   * Auto populate transaction info (chainId, epochNumber, nonce, gas, gasPrice, storageLimit)\n   *\n   * @param {TransactionMeta} options transaction info\n   * @returns {Promise<TransactionMeta>} Polulated complete transaction\n   */\n  async populateTransaction(options) {\n    const {\n      defaultGasPrice,\n    } = this.conflux;\n\n    options.from = this._formatAddress(options.from);\n\n    if (options.nonce === undefined) {\n      options.nonce = await this.conflux.advanced.getNextUsableNonce(options.from);\n    }\n\n    if (options.chainId === undefined) {\n      options.chainId = this.conflux.networkId;\n    }\n\n    if (options.chainId === undefined) {\n      const status = await this.getStatus();\n      options.chainId = status.chainId;\n    }\n\n    if (options.epochHeight === undefined) {\n      options.epochHeight = await this.epochNumber();\n    }\n\n    if (options.gasPrice && (options.maxFeePerGas || options.maxPriorityFeePerGas)) {\n      throw new Error('`gasPrice` should not be set with `maxFeePerGas` or `maxPriorityFeePerGas`');\n    }\n\n    // auto detect transaction type\n    let baseFeePerGas;\n    if (options.type === undefined) {\n      const block = await this.getBlockByEpochNumber(options.epochHeight, false);\n      baseFeePerGas = block.baseFeePerGas;\n\n      const pre1559Type = options.accessList ? CONST.TRANSACTION_TYPE_EIP2930 : CONST.TRANSACTION_TYPE_LEGACY;\n      options.type = baseFeePerGas ? CONST.TRANSACTION_TYPE_EIP1559 : pre1559Type;\n    }\n\n    if (options.gas === undefined || options.storageLimit === undefined) {\n      let gas;\n      let storageLimit;\n\n      const isToUser = options.to && addressUtil.isValidCfxAddress(options.to) && decodeCfxAddress(options.to).type === ADDRESS_TYPES.USER;\n      if (isToUser && !options.data && !options.accessList) {\n        gas = CONST.TRANSACTION_GAS;\n        storageLimit = CONST.TRANSACTION_STORAGE_LIMIT;\n      } else {\n        const { gasUsed, storageCollateralized } = await this.estimateGasAndCollateral(options);\n        gas = gasUsed;\n        storageLimit = storageCollateralized;\n      }\n\n      if (options.gas === undefined) {\n        options.gas = gas;\n      }\n\n      if (options.storageLimit === undefined) {\n        options.storageLimit = storageLimit;\n      }\n    }\n\n    // auto fill gasPrice\n    if (options.type === CONST.TRANSACTION_TYPE_LEGACY || options.type === CONST.TRANSACTION_TYPE_EIP2930) {\n      if (options.gasPrice === undefined) {\n        if (defaultGasPrice === undefined) {\n          const gasPrice = await this.gasPrice();\n          options.gasPrice = Number(gasPrice) === 0 ? CONST.MIN_GAS_PRICE : gasPrice;\n        } else {\n          options.gasPrice = defaultGasPrice;\n        }\n      }\n      options.maxFeePerGas = undefined;\n      options.maxPriorityFeePerGas = undefined;\n    }\n    // auto fill maxPriorityFeePerGas and maxFeePerGas\n    if (options.type === CONST.TRANSACTION_TYPE_EIP1559) {\n      if (options.gasPrice) {\n        options.maxFeePerGas = options.gasPrice;\n        options.maxPriorityFeePerGas = options.gasPrice;\n        options.gasPrice = undefined;\n      }\n\n      if (!options.maxPriorityFeePerGas) {\n        options.maxPriorityFeePerGas = await this.maxPriorityFeePerGas();\n      }\n\n      if (!options.maxFeePerGas) {\n        if (!baseFeePerGas) {\n          const block = await this.getBlockByEpochNumber(options.epochHeight, false);\n          baseFeePerGas = block.baseFeePerGas;\n        }\n\n        options.maxFeePerGas = options.maxPriorityFeePerGas + baseFeePerGas * BigInt(2);\n      }\n\n      if (options.maxFeePerGas < options.maxPriorityFeePerGas) {\n        throw new Error('`maxFeePerGas` should not be less than `maxPriorityFeePerGas`');\n      }\n    }\n\n    return options;\n  }\n\n  /**\n   * Auto populate transaction and sign it with `from` 's privateKey in wallet\n   *\n   * @param {TransactionMeta} options transaction info\n   * @returns {Promise<string>} Hex encoded raw transaction\n   */\n  async populateAndSignTransaction(options) {\n    await this.populateTransaction(options);\n    const account = await this.conflux.wallet.get(`${options.from}`);\n    const signedTx = await account.signTransaction(options);\n    return signedTx.serialize();\n  }\n\n  /**\n   * Auto populate transaction\n   * if from's privateKey is in wallet, directly sign and encode it then send the rawTransaction with `cfx_sendRawTransaction` method\n   * if not, sent the transaction with `cfx_sendTransaction` method\n   *\n   * @param {TransactionMeta} options transaction info\n   * @param {string} [password] Optional password to unlock account in fullnode\n   * @return {Promise<string>} Transaction hash\n   */\n  async sendTransaction(options, ...extra) {\n    if (this.conflux.wallet.has(`${options.from}`)) {\n      const rawTx = await this.populateAndSignTransaction(options);\n      return this.sendRawTransaction(rawTx);\n    }\n\n    return this.conflux.request({\n      method: 'cfx_sendTransaction',\n      params: [\n        this.conflux._formatCallTx(options),\n        ...extra,\n      ],\n    });\n  }\n\n  /**\n   * Get epoch's receipt through pivot block's hash\n   *\n   * @param {string} pivotBlockHash Hash of pivot block\n   * @returns {Promise<Array>} All receipts of one epoch\n   */\n  async getEpochReceiptsByPivotBlockHash(pivotBlockHash, ...extra) {\n    const result = await this.conflux.request({\n      method: 'cfx_getEpochReceipts',\n      params: [\n        {\n          blockHash: pivotBlockHash,\n          requirePivot: true,\n        },\n        ...extra,\n      ],\n    });\n    return cfxFormat.epochReceipts(result);\n  }\n\n  /**\n   * Virtually call a contract, return the output data.\n   *\n   * @param {TransactionMeta} options - See [Transaction](#Transaction.js/Transaction/**constructor**)\n   * @param {string|number} [epochNumber='latest_state'] - See [format.epochNumber](#util/format.js/format/(static)epochNumber)\n   * @return {Promise<string>} The output data.\n   */\n  async _call(options, epochNumber) {\n    try {\n      if (options.to && addressUtil.hasNetworkPrefix(options.to) && this.conflux.networkId) {\n        const {\n          netId,\n          // type,\n        } = addressUtil.decodeCfxAddress(options.to);\n        // check target address's networkId with current RPC's networkId\n        assert(netId === this.conflux.networkId, '`to` address\\'s networkId is not match current RPC\\'s networkId');\n        // check target contract is exist\n        /* if (type === ADDRESS_TYPES.CONTRACT) {\n          const code = await this.getCode(options.to);\n          assert(code !== '0x', 'Contract not exist!');\n        } */\n      }\n\n      return await this.conflux.request({\n        method: 'cfx_call',\n        params: [\n          this.conflux._formatCallTx(options),\n          format.epochNumber.$or(undefined)(epochNumber),\n        ],\n      });\n    } catch (e) {\n      throw Contract.decodeError(e);\n    }\n  }\n\n  /**\n   * Virtually call a contract, return the estimate gas used and storage collateralized.\n   *\n   * @param {TransactionMeta} options - See [Transaction](#Transaction.js/Transaction/**constructor**)\n   * @param {string|number} [epochNumber='latest_state'] - See [format.epochNumber](#util/format.js/format/(static)epochNumber)\n   * @return {Promise<import('./types/formatter').EstimateResult>} A estimate result object:\n   * - `BigInt` gasUsed: The gas used.\n   * - `BigInt` gasLimit: The gas limit.\n   * - `BigInt` storageCollateralized: The storage collateralized in Byte.\n   */\n  async _estimateGasAndCollateral(options, epochNumber) {\n    try {\n      const result = await this.conflux.request({\n        method: 'cfx_estimateGasAndCollateral',\n        params: [\n          this.conflux._formatCallTx(options),\n          format.epochNumber.$or(undefined)(epochNumber),\n        ],\n      });\n      return cfxFormat.estimate(result);\n    } catch (e) {\n      throw Contract.decodeError(e);\n    }\n  }\n}\n\nmodule.exports = CFX;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3JwYy9jZnguanMiLCJtYXBwaW5ncyI6IkFBQUEseUJBQXlCLG1CQUFPLENBQUMscUVBQVM7QUFDMUMsZUFBZSxtQkFBTyxDQUFDLDhFQUFnQjtBQUN2QyxrQkFBa0IsbUJBQU8sQ0FBQyx5RkFBbUI7QUFDN0Msb0JBQW9CLG1CQUFPLENBQUMsZ0ZBQWlCO0FBQzdDLGNBQWMsbUJBQU8sQ0FBQyxrRUFBVTtBQUNoQyxRQUFRLFNBQVMsRUFBRSxtQkFBTyxDQUFDLHNFQUFTO0FBQ3BDLFFBQVEsa0NBQWtDLEVBQUUsbUJBQU8sQ0FBQyxnRkFBaUI7QUFDckUsMkJBQTJCLG1CQUFPLENBQUMsZ0hBQWlDO0FBQ3BFLGlCQUFpQixtQkFBTyxDQUFDLDhFQUFhO0FBQ3RDLGlCQUFpQixtQkFBTyxDQUFDLGlGQUFlOztBQUV4QztBQUNBLGNBQWMsMkNBQTJDO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGlCQUFpQjtBQUM5QixlQUFlLDBCQUEwQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07O0FBRU47O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixnQkFBZ0IsaUNBQWlDO0FBQ2pEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGlCQUFpQjtBQUM5QixlQUFlLGlCQUFpQjtBQUNoQztBQUNBO0FBQ0E7QUFDQSxxREFBcUQsYUFBYTtBQUNsRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsaUJBQWlCO0FBQzlCLGFBQWEsUUFBUTtBQUNyQixjQUFjLGlCQUFpQjtBQUMvQjtBQUNBO0FBQ0EsbUNBQW1DLGFBQWE7QUFDaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsZUFBZSxnQkFBZ0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxpQkFBaUI7QUFDOUIsYUFBYSxlQUFlO0FBQzVCLGNBQWMsaUJBQWlCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGlCQUFpQjtBQUM5QixhQUFhLGVBQWU7QUFDNUIsY0FBYyxxREFBcUQ7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvdmlrYXNoeWFkYXYvRGV2ZWxvcGVyL0FsbGdpdEZpbGVzL0NvbmZsdXgtVHhuLXZpc3VhbGl6ZXIvbm9kZV9tb2R1bGVzL2pzLWNvbmZsdXgtc2RrL3NyYy9ycGMvY2Z4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJQQ01ldGhvZEZhY3RvcnkgPSByZXF1aXJlKCcuL2luZGV4Jyk7XG5jb25zdCBmb3JtYXQgPSByZXF1aXJlKCcuLi91dGlsL2Zvcm1hdCcpO1xuY29uc3QgY2Z4Rm9ybWF0ID0gcmVxdWlyZSgnLi90eXBlcy9mb3JtYXR0ZXInKTtcbmNvbnN0IGFkZHJlc3NVdGlsID0gcmVxdWlyZSgnLi4vdXRpbC9hZGRyZXNzJyk7XG5jb25zdCBDT05TVCA9IHJlcXVpcmUoJy4uL0NPTlNUJyk7XG5jb25zdCB7IGFzc2VydCB9ID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuY29uc3QgeyBkZWNvZGVDZnhBZGRyZXNzLCBBRERSRVNTX1RZUEVTIH0gPSByZXF1aXJlKCcuLi91dGlsL2FkZHJlc3MnKTtcbmNvbnN0IFBlbmRpbmdUcmFuc2FjdGlvbiA9IHJlcXVpcmUoJy4uL3N1YnNjcmliZS9QZW5kaW5nVHJhbnNhY3Rpb24nKTtcbmNvbnN0IENvbnRyYWN0ID0gcmVxdWlyZSgnLi4vY29udHJhY3QnKTtcbmNvbnN0IFJQQ1R5cGVzID0gcmVxdWlyZSgnLi90eXBlcy9pbmRleCcpO1xuXG4vKipcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KCcuLi9UcmFuc2FjdGlvbicpLlRyYW5zYWN0aW9uTWV0YSB9IFRyYW5zYWN0aW9uTWV0YVxuICovXG5jbGFzcyBDRlggZXh0ZW5kcyBSUENNZXRob2RGYWN0b3J5IHtcbiAgY29uc3RydWN0b3IoY29uZmx1eCkge1xuICAgIHN1cGVyKGNvbmZsdXgpO1xuICAgIHRoaXMuY29uZmx1eCA9IGNvbmZsdXg7XG4gICAgdGhpcy5fZm9ybWF0QWRkcmVzcyA9IGNvbmZsdXguX2Zvcm1hdEFkZHJlc3MuYmluZChjb25mbHV4KTtcbiAgICAvLyBhZGQgUlBDIG1ldGhvZHNcbiAgICBzdXBlci5hZGRNZXRob2RzKHRoaXMubWV0aG9kcygpKTtcbiAgICAvLyBkZWNvcmF0ZSBtZXRob2RzO1xuICAgIHRoaXMuc2VuZFJhd1RyYW5zYWN0aW9uID0gdGhpcy5fZGVjb3JhdGVQZW5kaW5nVHJhbnNhY3Rpb24odGhpcy5zZW5kUmF3VHJhbnNhY3Rpb24pO1xuICAgIHRoaXMuc2VuZFRyYW5zYWN0aW9uID0gdGhpcy5fZGVjb3JhdGVQZW5kaW5nVHJhbnNhY3Rpb24odGhpcy5zZW5kVHJhbnNhY3Rpb24pO1xuICAgIHRoaXMuY2FsbCA9IHRoaXMuX2FkZFJlcXVlc3RCdWlsZGVyVG9DYWxsKCk7XG4gICAgdGhpcy5lc3RpbWF0ZUdhc0FuZENvbGxhdGVyYWwgPSB0aGlzLl9hZGRSZXF1ZXN0QnVpbGRlclRvRXN0aW1hdGUoKTtcbiAgfVxuXG4gIG1ldGhvZHMoKSB7XG4gICAgY29uc3QgZm9ybWF0QWRkcmVzc1dpdGhOZXR3b3JrSWQgPSB0aGlzLl9mb3JtYXRBZGRyZXNzO1xuICAgIHJldHVybiBbXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ2NmeF9jbGllbnRWZXJzaW9uJyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ2NmeF9nZXRTdXBwbHlJbmZvJyxcbiAgICAgICAgcmVxdWVzdEZvcm1hdHRlcnM6IFtcbiAgICAgICAgICBmb3JtYXQuZXBvY2hOdW1iZXJPclVuZGVmaW5lZCxcbiAgICAgICAgXSxcbiAgICAgICAgcmVzcG9uc2VGb3JtYXR0ZXI6IGNmeEZvcm1hdC5zdXBwbHlJbmZvLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnY2Z4X2dldFN0YXR1cycsXG4gICAgICAgIHJlc3BvbnNlRm9ybWF0dGVyOiBjZnhGb3JtYXQuc3RhdHVzLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnY2Z4X2dhc1ByaWNlJyxcbiAgICAgICAgYWxpYXM6ICdnZXRHYXNQcmljZScsXG4gICAgICAgIHJlc3BvbnNlRm9ybWF0dGVyOiBmb3JtYXQuYmlnVUludCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ2NmeF9tYXhQcmlvcml0eUZlZVBlckdhcycsXG4gICAgICAgIHJlc3BvbnNlRm9ybWF0dGVyOiBmb3JtYXQuYmlnVUludCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ2NmeF9nZXRGZWVCdXJudCcsXG4gICAgICAgIHJlcXVlc3RGb3JtYXR0ZXJzOiBbXG4gICAgICAgICAgZm9ybWF0LmVwb2NoTnVtYmVyT3JVbmRlZmluZWQsXG4gICAgICAgIF0sXG4gICAgICAgIHJlc3BvbnNlRm9ybWF0dGVyOiBmb3JtYXQuYmlnVUludCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ2NmeF9mZWVIaXN0b3J5JyxcbiAgICAgICAgcmVxdWVzdEZvcm1hdHRlcnM6IFtcbiAgICAgICAgICBmb3JtYXQuYmlnVUludEhleCxcbiAgICAgICAgICBmb3JtYXQuZXBvY2hOdW1iZXIsXG4gICAgICAgICAgZm9ybWF0LmFueSwgLy8gZjY0IGFycmF5XG4gICAgICAgIF0sXG4gICAgICAgIHJlc3BvbnNlRm9ybWF0dGVyOiBjZnhGb3JtYXQuZmVlSGlzdG9yeSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ2NmeF9nZXRJbnRlcmVzdFJhdGUnLFxuICAgICAgICByZXF1ZXN0Rm9ybWF0dGVyczogW1xuICAgICAgICAgIGZvcm1hdC5lcG9jaE51bWJlck9yVW5kZWZpbmVkLFxuICAgICAgICBdLFxuICAgICAgICByZXNwb25zZUZvcm1hdHRlcjogZm9ybWF0LmJpZ1VJbnQsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdjZnhfZ2V0QWNjdW11bGF0ZUludGVyZXN0UmF0ZScsXG4gICAgICAgIHJlcXVlc3RGb3JtYXR0ZXJzOiBbXG4gICAgICAgICAgZm9ybWF0LmVwb2NoTnVtYmVyT3JVbmRlZmluZWQsXG4gICAgICAgIF0sXG4gICAgICAgIHJlc3BvbnNlRm9ybWF0dGVyOiBmb3JtYXQuYmlnVUludCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ2NmeF9nZXRBY2NvdW50JyxcbiAgICAgICAgcmVxdWVzdEZvcm1hdHRlcnM6IFtcbiAgICAgICAgICBmb3JtYXRBZGRyZXNzV2l0aE5ldHdvcmtJZCxcbiAgICAgICAgICBmb3JtYXQuZXBvY2hOdW1iZXJPclVuZGVmaW5lZCxcbiAgICAgICAgXSxcbiAgICAgICAgcmVzcG9uc2VGb3JtYXR0ZXI6IGRhdGEgPT4gbmV3IFJQQ1R5cGVzLkFjY291bnQoZGF0YSksXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdjZnhfZ2V0QmFsYW5jZScsXG4gICAgICAgIHJlcXVlc3RGb3JtYXR0ZXJzOiBbXG4gICAgICAgICAgZm9ybWF0QWRkcmVzc1dpdGhOZXR3b3JrSWQsXG4gICAgICAgICAgZm9ybWF0LmVwb2NoTnVtYmVyT3JCbG9ja0hhc2gsXG4gICAgICAgIF0sXG4gICAgICAgIHJlc3BvbnNlRm9ybWF0dGVyOiBmb3JtYXQuYmlnVUludCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ2NmeF9nZXRTdGFraW5nQmFsYW5jZScsXG4gICAgICAgIHJlcXVlc3RGb3JtYXR0ZXJzOiBbXG4gICAgICAgICAgZm9ybWF0QWRkcmVzc1dpdGhOZXR3b3JrSWQsXG4gICAgICAgICAgZm9ybWF0LmVwb2NoTnVtYmVyT3JVbmRlZmluZWQsXG4gICAgICAgIF0sXG4gICAgICAgIHJlc3BvbnNlRm9ybWF0dGVyOiBmb3JtYXQuYmlnVUludCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ2NmeF9nZXROZXh0Tm9uY2UnLFxuICAgICAgICByZXF1ZXN0Rm9ybWF0dGVyczogW1xuICAgICAgICAgIGZvcm1hdEFkZHJlc3NXaXRoTmV0d29ya0lkLFxuICAgICAgICAgIGZvcm1hdC5lcG9jaE51bWJlck9yQmxvY2tIYXNoLFxuICAgICAgICBdLFxuICAgICAgICByZXNwb25zZUZvcm1hdHRlcjogZm9ybWF0LmJpZ1VJbnQsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdjZnhfZ2V0QWRtaW4nLFxuICAgICAgICByZXF1ZXN0Rm9ybWF0dGVyczogW1xuICAgICAgICAgIGZvcm1hdEFkZHJlc3NXaXRoTmV0d29ya0lkLFxuICAgICAgICAgIGZvcm1hdC5lcG9jaE51bWJlck9yVW5kZWZpbmVkLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnY2Z4X2dldFZvdGVMaXN0JyxcbiAgICAgICAgcmVxdWVzdEZvcm1hdHRlcnM6IFtcbiAgICAgICAgICBmb3JtYXRBZGRyZXNzV2l0aE5ldHdvcmtJZCxcbiAgICAgICAgICBmb3JtYXQuZXBvY2hOdW1iZXJPclVuZGVmaW5lZCxcbiAgICAgICAgXSxcbiAgICAgICAgcmVzcG9uc2VGb3JtYXR0ZXI6IGNmeEZvcm1hdC52b3RlTGlzdCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ2NmeF9nZXREZXBvc2l0TGlzdCcsXG4gICAgICAgIHJlcXVlc3RGb3JtYXR0ZXJzOiBbXG4gICAgICAgICAgZm9ybWF0QWRkcmVzc1dpdGhOZXR3b3JrSWQsXG4gICAgICAgICAgZm9ybWF0LmVwb2NoTnVtYmVyT3JVbmRlZmluZWQsXG4gICAgICAgIF0sXG4gICAgICAgIHJlc3BvbnNlRm9ybWF0dGVyOiBjZnhGb3JtYXQuZGVwb3NpdExpc3QsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdjZnhfZXBvY2hOdW1iZXInLFxuICAgICAgICBhbGlhczogJ2dldEVwb2NoTnVtYmVyJyxcbiAgICAgICAgcmVxdWVzdEZvcm1hdHRlcnM6IFtcbiAgICAgICAgICBmb3JtYXQuZXBvY2hOdW1iZXJPclVuZGVmaW5lZCxcbiAgICAgICAgXSxcbiAgICAgICAgcmVzcG9uc2VGb3JtYXR0ZXI6IGZvcm1hdC51SW50LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnY2Z4X2dldEJsb2NrQnlFcG9jaE51bWJlcicsXG4gICAgICAgIHJlcXVlc3RGb3JtYXR0ZXJzOiBbXG4gICAgICAgICAgZm9ybWF0LmVwb2NoTnVtYmVyLFxuICAgICAgICAgIGZvcm1hdC5ib29sZWFuLCAvLyBUT0RPIGRlZmF1bHQgZmFsc2VcbiAgICAgICAgXSxcbiAgICAgICAgcmVzcG9uc2VGb3JtYXR0ZXI6IGNmeEZvcm1hdC5ibG9jay4kb3IobnVsbCksXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdjZnhfZ2V0QmxvY2tCeUJsb2NrTnVtYmVyJyxcbiAgICAgICAgcmVxdWVzdEZvcm1hdHRlcnM6IFtcbiAgICAgICAgICBmb3JtYXQuYmlnVUludEhleCxcbiAgICAgICAgICBmb3JtYXQuYm9vbGVhbixcbiAgICAgICAgXSxcbiAgICAgICAgcmVzcG9uc2VGb3JtYXR0ZXI6IGNmeEZvcm1hdC5ibG9jay4kb3IobnVsbCksXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdjZnhfZ2V0QmxvY2tzQnlFcG9jaCcsXG4gICAgICAgIGFsaWFzOiAnZ2V0QmxvY2tzQnlFcG9jaE51bWJlcicsXG4gICAgICAgIHJlcXVlc3RGb3JtYXR0ZXJzOiBbXG4gICAgICAgICAgZm9ybWF0LmVwb2NoTnVtYmVyLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnY2Z4X2dldEJsb2NrUmV3YXJkSW5mbycsXG4gICAgICAgIHJlcXVlc3RGb3JtYXR0ZXJzOiBbXG4gICAgICAgICAgZm9ybWF0LmVwb2NoTnVtYmVyLFxuICAgICAgICBdLFxuICAgICAgICByZXNwb25zZUZvcm1hdHRlcjogY2Z4Rm9ybWF0LnJld2FyZEluZm8sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdjZnhfZ2V0QmVzdEJsb2NrSGFzaCcsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdjZnhfZ2V0QmxvY2tCeUhhc2gnLFxuICAgICAgICByZXF1ZXN0Rm9ybWF0dGVyczogW1xuICAgICAgICAgIGZvcm1hdC5ibG9ja0hhc2gsXG4gICAgICAgICAgZm9ybWF0LmJvb2xlYW4sXG4gICAgICAgIF0sXG4gICAgICAgIHJlc3BvbnNlRm9ybWF0dGVyOiBjZnhGb3JtYXQuYmxvY2suJG9yKG51bGwpLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnY2Z4X2dldEJsb2NrQnlIYXNoV2l0aFBpdm90QXNzdW1wdGlvbicsXG4gICAgICAgIHJlcXVlc3RGb3JtYXR0ZXJzOiBbXG4gICAgICAgICAgZm9ybWF0LmJsb2NrSGFzaCxcbiAgICAgICAgICBmb3JtYXQuYmxvY2tIYXNoLFxuICAgICAgICAgIGZvcm1hdC5lcG9jaE51bWJlcixcbiAgICAgICAgXSxcbiAgICAgICAgcmVzcG9uc2VGb3JtYXR0ZXI6IGNmeEZvcm1hdC5ibG9jayxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ2NmeF9nZXRDb25maXJtYXRpb25SaXNrQnlIYXNoJyxcbiAgICAgICAgcmVxdWVzdEZvcm1hdHRlcnM6IFtcbiAgICAgICAgICBmb3JtYXQuYmxvY2tIYXNoLFxuICAgICAgICBdLFxuICAgICAgICByZXNwb25zZUZvcm1hdHRlcjogZm9ybWF0LmZpeGVkNjQuJG9yKG51bGwpLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnY2Z4X2dldFRyYW5zYWN0aW9uQnlIYXNoJyxcbiAgICAgICAgcmVxdWVzdEZvcm1hdHRlcnM6IFtcbiAgICAgICAgICBmb3JtYXQudHJhbnNhY3Rpb25IYXNoLFxuICAgICAgICBdLFxuICAgICAgICByZXNwb25zZUZvcm1hdHRlcjogY2Z4Rm9ybWF0LnRyYW5zYWN0aW9uLiRvcihudWxsKSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ2NmeF9nZXRUcmFuc2FjdGlvblJlY2VpcHQnLFxuICAgICAgICByZXF1ZXN0Rm9ybWF0dGVyczogW1xuICAgICAgICAgIGZvcm1hdC50cmFuc2FjdGlvbkhhc2gsXG4gICAgICAgIF0sXG4gICAgICAgIHJlc3BvbnNlRm9ybWF0dGVyOiBjZnhGb3JtYXQucmVjZWlwdC4kb3IobnVsbCksXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdjZnhfc2VuZFJhd1RyYW5zYWN0aW9uJyxcbiAgICAgICAgcmVxdWVzdEZvcm1hdHRlcnM6IFtcbiAgICAgICAgICBmb3JtYXQuaGV4LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnY2Z4X2dldENvZGUnLFxuICAgICAgICByZXF1ZXN0Rm9ybWF0dGVyczogW1xuICAgICAgICAgIGZvcm1hdEFkZHJlc3NXaXRoTmV0d29ya0lkLFxuICAgICAgICAgIGZvcm1hdC5lcG9jaE51bWJlck9yQmxvY2tIYXNoLFxuICAgICAgICBdLFxuICAgICAgICByZXNwb25zZUZvcm1hdHRlcjogZm9ybWF0LmFueSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ2NmeF9nZXRTdG9yYWdlQXQnLFxuICAgICAgICByZXF1ZXN0Rm9ybWF0dGVyczogW1xuICAgICAgICAgIGZvcm1hdEFkZHJlc3NXaXRoTmV0d29ya0lkLFxuICAgICAgICAgIGZvcm1hdC5oZXg2NCxcbiAgICAgICAgICBmb3JtYXQuZXBvY2hOdW1iZXJPckJsb2NrSGFzaCxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ2NmeF9nZXRTdG9yYWdlUm9vdCcsXG4gICAgICAgIHJlcXVlc3RGb3JtYXR0ZXJzOiBbXG4gICAgICAgICAgZm9ybWF0QWRkcmVzc1dpdGhOZXR3b3JrSWQsXG4gICAgICAgICAgZm9ybWF0LmVwb2NoTnVtYmVyT3JVbmRlZmluZWQsXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdjZnhfZ2V0U3BvbnNvckluZm8nLFxuICAgICAgICByZXF1ZXN0Rm9ybWF0dGVyczogW1xuICAgICAgICAgIGZvcm1hdEFkZHJlc3NXaXRoTmV0d29ya0lkLFxuICAgICAgICAgIGZvcm1hdC5lcG9jaE51bWJlck9yVW5kZWZpbmVkLFxuICAgICAgICBdLFxuICAgICAgICByZXNwb25zZUZvcm1hdHRlcjogY2Z4Rm9ybWF0LnNwb25zb3JJbmZvLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnY2Z4X2dldEFjY291bnRQZW5kaW5nSW5mbycsXG4gICAgICAgIHJlcXVlc3RGb3JtYXR0ZXJzOiBbXG4gICAgICAgICAgZm9ybWF0QWRkcmVzc1dpdGhOZXR3b3JrSWQsXG4gICAgICAgIF0sXG4gICAgICAgIHJlc3BvbnNlRm9ybWF0dGVyOiBjZnhGb3JtYXQuYWNjb3VudFBlbmRpbmdJbmZvLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnY2Z4X2dldEFjY291bnRQZW5kaW5nVHJhbnNhY3Rpb25zJyxcbiAgICAgICAgcmVxdWVzdEZvcm1hdHRlcnM6IFtcbiAgICAgICAgICBmb3JtYXRBZGRyZXNzV2l0aE5ldHdvcmtJZCxcbiAgICAgICAgICBmb3JtYXQuYmlnVUludEhleC4kb3IodW5kZWZpbmVkKSxcbiAgICAgICAgICBmb3JtYXQuYmlnVUludEhleC4kb3IodW5kZWZpbmVkKSxcbiAgICAgICAgXSxcbiAgICAgICAgcmVzcG9uc2VGb3JtYXR0ZXI6IGNmeEZvcm1hdC5hY2NvdW50UGVuZGluZ1RyYW5zYWN0aW9ucyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ2NmeF9nZXRDb2xsYXRlcmFsRm9yU3RvcmFnZScsXG4gICAgICAgIHJlcXVlc3RGb3JtYXR0ZXJzOiBbXG4gICAgICAgICAgZm9ybWF0QWRkcmVzc1dpdGhOZXR3b3JrSWQsXG4gICAgICAgICAgZm9ybWF0LmVwb2NoTnVtYmVyT3JVbmRlZmluZWQsXG4gICAgICAgIF0sXG4gICAgICAgIHJlc3BvbnNlRm9ybWF0dGVyOiBmb3JtYXQuYmlnVUludCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ2NmeF9jaGVja0JhbGFuY2VBZ2FpbnN0VHJhbnNhY3Rpb24nLFxuICAgICAgICByZXF1ZXN0Rm9ybWF0dGVyczogW1xuICAgICAgICAgIGZvcm1hdEFkZHJlc3NXaXRoTmV0d29ya0lkLFxuICAgICAgICAgIGZvcm1hdEFkZHJlc3NXaXRoTmV0d29ya0lkLFxuICAgICAgICAgIGZvcm1hdC5iaWdVSW50SGV4LFxuICAgICAgICAgIGZvcm1hdC5iaWdVSW50SGV4LFxuICAgICAgICAgIGZvcm1hdC5iaWdVSW50SGV4LFxuICAgICAgICAgIGZvcm1hdC5lcG9jaE51bWJlck9yVW5kZWZpbmVkLFxuICAgICAgICBdLFxuICAgICAgICByZXNwb25zZUZvcm1hdHRlcjogZm9ybWF0LmFueSxcbiAgICAgIH0sXG4gICAgICAvKiB7XG4gICAgICAgIG1ldGhvZDogJ2NmeF9jYWxsJyxcbiAgICAgICAgcmVxdWVzdEZvcm1hdHRlcnM6IFtcbiAgICAgICAgICB0aGlzLmNvbmZsdXguX2Zvcm1hdENhbGxUeCxcbiAgICAgICAgICBmb3JtYXQuZXBvY2hOdW1iZXJPclVuZGVmaW5lZCxcbiAgICAgICAgXSxcbiAgICAgICAgcmVzcG9uc2VGb3JtYXR0ZXI6IGZvcm1hdC5hbnksIC8vIFRPRE8gY2F0Y2ggZXhjZXB0aW9uIGFuZCBkZWNvZGUgZXJyb3JcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ2NmeF9lc3RpbWF0ZUdhc0FuZENvbGxhdGVyYWwnLFxuICAgICAgICByZXF1ZXN0Rm9ybWF0dGVyczogW1xuICAgICAgICAgIHRoaXMuY29uZmx1eC5fZm9ybWF0Q2FsbFR4LFxuICAgICAgICAgIGZvcm1hdC5lcG9jaE51bWJlck9yVW5kZWZpbmVkLFxuICAgICAgICBdLFxuICAgICAgICByZXNwb25zZUZvcm1hdHRlcjogY2Z4Rm9ybWF0LmVzdGltYXRlLFxuICAgICAgfSwgKi9cbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnY2Z4X2dldExvZ3MnLFxuICAgICAgICBiZWZvcmVIb29rKG9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAob3B0aW9ucy5ibG9ja0hhc2hlcyAhPT0gdW5kZWZpbmVkICYmIChvcHRpb25zLmZyb21FcG9jaCAhPT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMudG9FcG9jaCAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPdmVycmlkZUVycm9yLCBkbyBub3QgdXNlIGBibG9ja0hhc2hlc2Agd2l0aCBgZnJvbUVwb2NoYCBvciBgdG9FcG9jaGAsIGNhdXNlIG9ubHkgYGJsb2NrSGFzaGVzYCB3aWxsIHRha2UgZWZmZWN0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXF1ZXN0Rm9ybWF0dGVyczogW1xuICAgICAgICAgIHRoaXMuY29uZmx1eC5fZm9ybWF0R2V0TG9ncy5iaW5kKHRoaXMuY29uZmx1eCksXG4gICAgICAgIF0sXG4gICAgICAgIHJlc3BvbnNlRm9ybWF0dGVyOiBjZnhGb3JtYXQubG9ncyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ2NmeF9nZXRQb1NFY29ub21pY3MnLFxuICAgICAgICByZXF1ZXN0Rm9ybWF0dGVyczogW1xuICAgICAgICAgIGZvcm1hdC5lcG9jaE51bWJlck9yVW5kZWZpbmVkLFxuICAgICAgICBdLFxuICAgICAgICByZXNwb25zZUZvcm1hdHRlcjogY2Z4Rm9ybWF0LnBvc0Vjb25vbWljcyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ2NmeF9nZXRQYXJhbXNGcm9tVm90ZScsXG4gICAgICAgIHJlcXVlc3RGb3JtYXR0ZXJzOiBbXG4gICAgICAgICAgZm9ybWF0LmVwb2NoTnVtYmVyT3JVbmRlZmluZWQsXG4gICAgICAgIF0sXG4gICAgICAgIHJlc3BvbnNlRm9ybWF0dGVyOiBjZnhGb3JtYXQudm90ZVBhcmFtc0luZm8sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdjZnhfZ2V0Q29sbGF0ZXJhbEluZm8nLFxuICAgICAgICByZXF1ZXN0Rm9ybWF0dGVyczogW1xuICAgICAgICAgIGZvcm1hdC5lcG9jaE51bWJlck9yVW5kZWZpbmVkLFxuICAgICAgICBdLFxuICAgICAgICByZXNwb25zZUZvcm1hdHRlcjogY2Z4Rm9ybWF0LmNvbGxhdGVyYWxJbmZvLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnY2Z4X25ld0ZpbHRlcicsXG4gICAgICAgIHJlcXVlc3RGb3JtYXR0ZXJzOiBbXG4gICAgICAgICAgZm9ybWF0LmdldExvZ3MsXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdjZnhfbmV3QmxvY2tGaWx0ZXInLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnY2Z4X25ld1BlbmRpbmdUcmFuc2FjdGlvbkZpbHRlcicsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdjZnhfZ2V0RmlsdGVyQ2hhbmdlcycsXG4gICAgICAgIHJlcXVlc3RGb3JtYXR0ZXJzOiBbXG4gICAgICAgICAgZm9ybWF0LmhleDMyLFxuICAgICAgICBdLFxuICAgICAgICByZXNwb25zZUZvcm1hdHRlcjogY2Z4Rm9ybWF0LmxvZ3MuJG9yKGZvcm1hdChbZm9ybWF0LmhleDY0XSkpLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnY2Z4X2dldEZpbHRlckxvZ3MnLFxuICAgICAgICByZXF1ZXN0Rm9ybWF0dGVyczogW1xuICAgICAgICAgIGZvcm1hdC5oZXgzMixcbiAgICAgICAgXSxcbiAgICAgICAgcmVzcG9uc2VGb3JtYXR0ZXI6IGNmeEZvcm1hdC5sb2dzLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnY2Z4X3VuaW5zdGFsbEZpbHRlcicsXG4gICAgICAgIHJlcXVlc3RGb3JtYXR0ZXJzOiBbXG4gICAgICAgICAgZm9ybWF0LmhleDMyLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnY2Z4X2dldEVwb2NoUmVjZWlwdHMnLFxuICAgICAgICBkZWJ1ZzogdHJ1ZSxcbiAgICAgICAgcmVxdWVzdEZvcm1hdHRlcnM6IFtcbiAgICAgICAgICBmb3JtYXQuZXBvY2hOdW1iZXJPckJsb2NrSGFzaCxcbiAgICAgICAgICBmb3JtYXQuYm9vbGVhbi4kb3IodW5kZWZpbmVkKSxcbiAgICAgICAgXSxcbiAgICAgICAgcmVzcG9uc2VGb3JtYXR0ZXI6IGNmeEZvcm1hdC5lcG9jaFJlY2VpcHRzLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnZGVidWdfZ2V0VHJhbnNhY3Rpb25zQnlFcG9jaCcsXG4gICAgICAgIGRlYnVnOiB0cnVlLFxuICAgICAgICByZXF1ZXN0Rm9ybWF0dGVyczogW1xuICAgICAgICAgIGZvcm1hdC5iaWdVSW50SGV4LFxuICAgICAgICBdLFxuICAgICAgICByZXNwb25zZUZvcm1hdHRlcjogZm9ybWF0KFtmb3JtYXQud3JhcFRyYW5zYWN0aW9uXSksXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdkZWJ1Z19nZXRUcmFuc2FjdGlvbnNCeUJsb2NrJyxcbiAgICAgICAgZGVidWc6IHRydWUsXG4gICAgICAgIHJlcXVlc3RGb3JtYXR0ZXJzOiBbXG4gICAgICAgICAgZm9ybWF0LmJsb2NrSGFzaCxcbiAgICAgICAgXSxcbiAgICAgICAgcmVzcG9uc2VGb3JtYXR0ZXI6IGZvcm1hdChbZm9ybWF0LndyYXBUcmFuc2FjdGlvbl0pLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnZGVidWdfZ2V0RXBvY2hSZWNlaXB0UHJvb2ZCeVRyYW5zYWN0aW9uJyxcbiAgICAgICAgZGVidWc6IHRydWUsXG4gICAgICAgIHJlcXVlc3RGb3JtYXR0ZXJzOiBbXG4gICAgICAgICAgZm9ybWF0LnRyYW5zYWN0aW9uSGFzaCxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgXTtcbiAgfVxuXG4gIF9kZWNvcmF0ZVBlbmRpbmdUcmFuc2FjdGlvbihmdW5jKSB7XG4gICAgY29uc3QgY2Z4ID0gdGhpcztcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgIHJldHVybiBuZXcgUGVuZGluZ1RyYW5zYWN0aW9uKGNmeCwgZnVuYy5iaW5kKHRoaXMpLCBhcmdzKTtcbiAgICB9O1xuICB9XG5cbiAgX2FkZFJlcXVlc3RCdWlsZGVyVG9DYWxsKCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgYXN5bmMgZnVuY3Rpb24gd3JhcHBlcihvcHRpb25zLCBlcG9jaE51bWJlcikge1xuICAgICAgcmV0dXJuIHNlbGYuX2NhbGwob3B0aW9ucywgZXBvY2hOdW1iZXIpO1xuICAgIH1cblxuICAgIHdyYXBwZXIucmVxdWVzdCA9IGZ1bmN0aW9uIChvcHRpb25zLCBlcG9jaE51bWJlcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVxdWVzdDoge1xuICAgICAgICAgIG1ldGhvZDogJ2NmeF9jYWxsJyxcbiAgICAgICAgICBwYXJhbXM6IFtcbiAgICAgICAgICAgIHNlbGYuY29uZmx1eC5fZm9ybWF0Q2FsbFR4KG9wdGlvbnMpLFxuICAgICAgICAgICAgZm9ybWF0LmVwb2NoTnVtYmVyT3JCbG9ja0hhc2goZXBvY2hOdW1iZXIpLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH07XG5cbiAgICByZXR1cm4gd3JhcHBlcjtcbiAgfVxuXG4gIF9hZGRSZXF1ZXN0QnVpbGRlclRvRXN0aW1hdGUoKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBhc3luYyBmdW5jdGlvbiB3cmFwcGVyKG9wdGlvbnMsIGVwb2NoTnVtYmVyKSB7XG4gICAgICByZXR1cm4gc2VsZi5fZXN0aW1hdGVHYXNBbmRDb2xsYXRlcmFsKG9wdGlvbnMsIGVwb2NoTnVtYmVyKTtcbiAgICB9XG5cbiAgICB3cmFwcGVyLnJlcXVlc3QgPSBmdW5jdGlvbiAob3B0aW9ucywgZXBvY2hOdW1iZXIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlcXVlc3Q6IHtcbiAgICAgICAgICBtZXRob2Q6ICdjZnhfZXN0aW1hdGVHYXNBbmRDb2xsYXRlcmFsJyxcbiAgICAgICAgICBwYXJhbXM6IFtcbiAgICAgICAgICAgIHNlbGYuY29uZmx1eC5fZm9ybWF0Q2FsbFR4KG9wdGlvbnMpLFxuICAgICAgICAgICAgZm9ybWF0LmVwb2NoTnVtYmVyLiRvcih1bmRlZmluZWQpKGVwb2NoTnVtYmVyKSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICBkZWNvZGVyOiBjZnhGb3JtYXQuZXN0aW1hdGUsXG4gICAgICB9O1xuICAgIH07XG5cbiAgICByZXR1cm4gd3JhcHBlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdXRvIHBvcHVsYXRlIHRyYW5zYWN0aW9uIGluZm8gKGNoYWluSWQsIGVwb2NoTnVtYmVyLCBub25jZSwgZ2FzLCBnYXNQcmljZSwgc3RvcmFnZUxpbWl0KVxuICAgKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9uTWV0YX0gb3B0aW9ucyB0cmFuc2FjdGlvbiBpbmZvXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFRyYW5zYWN0aW9uTWV0YT59IFBvbHVsYXRlZCBjb21wbGV0ZSB0cmFuc2FjdGlvblxuICAgKi9cbiAgYXN5bmMgcG9wdWxhdGVUcmFuc2FjdGlvbihvcHRpb25zKSB7XG4gICAgY29uc3Qge1xuICAgICAgZGVmYXVsdEdhc1ByaWNlLFxuICAgIH0gPSB0aGlzLmNvbmZsdXg7XG5cbiAgICBvcHRpb25zLmZyb20gPSB0aGlzLl9mb3JtYXRBZGRyZXNzKG9wdGlvbnMuZnJvbSk7XG5cbiAgICBpZiAob3B0aW9ucy5ub25jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBvcHRpb25zLm5vbmNlID0gYXdhaXQgdGhpcy5jb25mbHV4LmFkdmFuY2VkLmdldE5leHRVc2FibGVOb25jZShvcHRpb25zLmZyb20pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmNoYWluSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgb3B0aW9ucy5jaGFpbklkID0gdGhpcy5jb25mbHV4Lm5ldHdvcmtJZDtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jaGFpbklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHN0YXR1cyA9IGF3YWl0IHRoaXMuZ2V0U3RhdHVzKCk7XG4gICAgICBvcHRpb25zLmNoYWluSWQgPSBzdGF0dXMuY2hhaW5JZDtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5lcG9jaEhlaWdodCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBvcHRpb25zLmVwb2NoSGVpZ2h0ID0gYXdhaXQgdGhpcy5lcG9jaE51bWJlcigpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmdhc1ByaWNlICYmIChvcHRpb25zLm1heEZlZVBlckdhcyB8fCBvcHRpb25zLm1heFByaW9yaXR5RmVlUGVyR2FzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgZ2FzUHJpY2VgIHNob3VsZCBub3QgYmUgc2V0IHdpdGggYG1heEZlZVBlckdhc2Agb3IgYG1heFByaW9yaXR5RmVlUGVyR2FzYCcpO1xuICAgIH1cblxuICAgIC8vIGF1dG8gZGV0ZWN0IHRyYW5zYWN0aW9uIHR5cGVcbiAgICBsZXQgYmFzZUZlZVBlckdhcztcbiAgICBpZiAob3B0aW9ucy50eXBlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IGJsb2NrID0gYXdhaXQgdGhpcy5nZXRCbG9ja0J5RXBvY2hOdW1iZXIob3B0aW9ucy5lcG9jaEhlaWdodCwgZmFsc2UpO1xuICAgICAgYmFzZUZlZVBlckdhcyA9IGJsb2NrLmJhc2VGZWVQZXJHYXM7XG5cbiAgICAgIGNvbnN0IHByZTE1NTlUeXBlID0gb3B0aW9ucy5hY2Nlc3NMaXN0ID8gQ09OU1QuVFJBTlNBQ1RJT05fVFlQRV9FSVAyOTMwIDogQ09OU1QuVFJBTlNBQ1RJT05fVFlQRV9MRUdBQ1k7XG4gICAgICBvcHRpb25zLnR5cGUgPSBiYXNlRmVlUGVyR2FzID8gQ09OU1QuVFJBTlNBQ1RJT05fVFlQRV9FSVAxNTU5IDogcHJlMTU1OVR5cGU7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZ2FzID09PSB1bmRlZmluZWQgfHwgb3B0aW9ucy5zdG9yYWdlTGltaXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbGV0IGdhcztcbiAgICAgIGxldCBzdG9yYWdlTGltaXQ7XG5cbiAgICAgIGNvbnN0IGlzVG9Vc2VyID0gb3B0aW9ucy50byAmJiBhZGRyZXNzVXRpbC5pc1ZhbGlkQ2Z4QWRkcmVzcyhvcHRpb25zLnRvKSAmJiBkZWNvZGVDZnhBZGRyZXNzKG9wdGlvbnMudG8pLnR5cGUgPT09IEFERFJFU1NfVFlQRVMuVVNFUjtcbiAgICAgIGlmIChpc1RvVXNlciAmJiAhb3B0aW9ucy5kYXRhICYmICFvcHRpb25zLmFjY2Vzc0xpc3QpIHtcbiAgICAgICAgZ2FzID0gQ09OU1QuVFJBTlNBQ1RJT05fR0FTO1xuICAgICAgICBzdG9yYWdlTGltaXQgPSBDT05TVC5UUkFOU0FDVElPTl9TVE9SQUdFX0xJTUlUO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgeyBnYXNVc2VkLCBzdG9yYWdlQ29sbGF0ZXJhbGl6ZWQgfSA9IGF3YWl0IHRoaXMuZXN0aW1hdGVHYXNBbmRDb2xsYXRlcmFsKG9wdGlvbnMpO1xuICAgICAgICBnYXMgPSBnYXNVc2VkO1xuICAgICAgICBzdG9yYWdlTGltaXQgPSBzdG9yYWdlQ29sbGF0ZXJhbGl6ZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmdhcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9wdGlvbnMuZ2FzID0gZ2FzO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5zdG9yYWdlTGltaXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvcHRpb25zLnN0b3JhZ2VMaW1pdCA9IHN0b3JhZ2VMaW1pdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBhdXRvIGZpbGwgZ2FzUHJpY2VcbiAgICBpZiAob3B0aW9ucy50eXBlID09PSBDT05TVC5UUkFOU0FDVElPTl9UWVBFX0xFR0FDWSB8fCBvcHRpb25zLnR5cGUgPT09IENPTlNULlRSQU5TQUNUSU9OX1RZUEVfRUlQMjkzMCkge1xuICAgICAgaWYgKG9wdGlvbnMuZ2FzUHJpY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoZGVmYXVsdEdhc1ByaWNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25zdCBnYXNQcmljZSA9IGF3YWl0IHRoaXMuZ2FzUHJpY2UoKTtcbiAgICAgICAgICBvcHRpb25zLmdhc1ByaWNlID0gTnVtYmVyKGdhc1ByaWNlKSA9PT0gMCA/IENPTlNULk1JTl9HQVNfUFJJQ0UgOiBnYXNQcmljZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcHRpb25zLmdhc1ByaWNlID0gZGVmYXVsdEdhc1ByaWNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvcHRpb25zLm1heEZlZVBlckdhcyA9IHVuZGVmaW5lZDtcbiAgICAgIG9wdGlvbnMubWF4UHJpb3JpdHlGZWVQZXJHYXMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8vIGF1dG8gZmlsbCBtYXhQcmlvcml0eUZlZVBlckdhcyBhbmQgbWF4RmVlUGVyR2FzXG4gICAgaWYgKG9wdGlvbnMudHlwZSA9PT0gQ09OU1QuVFJBTlNBQ1RJT05fVFlQRV9FSVAxNTU5KSB7XG4gICAgICBpZiAob3B0aW9ucy5nYXNQcmljZSkge1xuICAgICAgICBvcHRpb25zLm1heEZlZVBlckdhcyA9IG9wdGlvbnMuZ2FzUHJpY2U7XG4gICAgICAgIG9wdGlvbnMubWF4UHJpb3JpdHlGZWVQZXJHYXMgPSBvcHRpb25zLmdhc1ByaWNlO1xuICAgICAgICBvcHRpb25zLmdhc1ByaWNlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW9wdGlvbnMubWF4UHJpb3JpdHlGZWVQZXJHYXMpIHtcbiAgICAgICAgb3B0aW9ucy5tYXhQcmlvcml0eUZlZVBlckdhcyA9IGF3YWl0IHRoaXMubWF4UHJpb3JpdHlGZWVQZXJHYXMoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFvcHRpb25zLm1heEZlZVBlckdhcykge1xuICAgICAgICBpZiAoIWJhc2VGZWVQZXJHYXMpIHtcbiAgICAgICAgICBjb25zdCBibG9jayA9IGF3YWl0IHRoaXMuZ2V0QmxvY2tCeUVwb2NoTnVtYmVyKG9wdGlvbnMuZXBvY2hIZWlnaHQsIGZhbHNlKTtcbiAgICAgICAgICBiYXNlRmVlUGVyR2FzID0gYmxvY2suYmFzZUZlZVBlckdhcztcbiAgICAgICAgfVxuXG4gICAgICAgIG9wdGlvbnMubWF4RmVlUGVyR2FzID0gb3B0aW9ucy5tYXhQcmlvcml0eUZlZVBlckdhcyArIGJhc2VGZWVQZXJHYXMgKiBCaWdJbnQoMik7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLm1heEZlZVBlckdhcyA8IG9wdGlvbnMubWF4UHJpb3JpdHlGZWVQZXJHYXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgbWF4RmVlUGVyR2FzYCBzaG91bGQgbm90IGJlIGxlc3MgdGhhbiBgbWF4UHJpb3JpdHlGZWVQZXJHYXNgJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogQXV0byBwb3B1bGF0ZSB0cmFuc2FjdGlvbiBhbmQgc2lnbiBpdCB3aXRoIGBmcm9tYCAncyBwcml2YXRlS2V5IGluIHdhbGxldFxuICAgKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9uTWV0YX0gb3B0aW9ucyB0cmFuc2FjdGlvbiBpbmZvXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IEhleCBlbmNvZGVkIHJhdyB0cmFuc2FjdGlvblxuICAgKi9cbiAgYXN5bmMgcG9wdWxhdGVBbmRTaWduVHJhbnNhY3Rpb24ob3B0aW9ucykge1xuICAgIGF3YWl0IHRoaXMucG9wdWxhdGVUcmFuc2FjdGlvbihvcHRpb25zKTtcbiAgICBjb25zdCBhY2NvdW50ID0gYXdhaXQgdGhpcy5jb25mbHV4LndhbGxldC5nZXQoYCR7b3B0aW9ucy5mcm9tfWApO1xuICAgIGNvbnN0IHNpZ25lZFR4ID0gYXdhaXQgYWNjb3VudC5zaWduVHJhbnNhY3Rpb24ob3B0aW9ucyk7XG4gICAgcmV0dXJuIHNpZ25lZFR4LnNlcmlhbGl6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEF1dG8gcG9wdWxhdGUgdHJhbnNhY3Rpb25cbiAgICogaWYgZnJvbSdzIHByaXZhdGVLZXkgaXMgaW4gd2FsbGV0LCBkaXJlY3RseSBzaWduIGFuZCBlbmNvZGUgaXQgdGhlbiBzZW5kIHRoZSByYXdUcmFuc2FjdGlvbiB3aXRoIGBjZnhfc2VuZFJhd1RyYW5zYWN0aW9uYCBtZXRob2RcbiAgICogaWYgbm90LCBzZW50IHRoZSB0cmFuc2FjdGlvbiB3aXRoIGBjZnhfc2VuZFRyYW5zYWN0aW9uYCBtZXRob2RcbiAgICpcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbk1ldGF9IG9wdGlvbnMgdHJhbnNhY3Rpb24gaW5mb1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW3Bhc3N3b3JkXSBPcHRpb25hbCBwYXNzd29yZCB0byB1bmxvY2sgYWNjb3VudCBpbiBmdWxsbm9kZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59IFRyYW5zYWN0aW9uIGhhc2hcbiAgICovXG4gIGFzeW5jIHNlbmRUcmFuc2FjdGlvbihvcHRpb25zLCAuLi5leHRyYSkge1xuICAgIGlmICh0aGlzLmNvbmZsdXgud2FsbGV0LmhhcyhgJHtvcHRpb25zLmZyb219YCkpIHtcbiAgICAgIGNvbnN0IHJhd1R4ID0gYXdhaXQgdGhpcy5wb3B1bGF0ZUFuZFNpZ25UcmFuc2FjdGlvbihvcHRpb25zKTtcbiAgICAgIHJldHVybiB0aGlzLnNlbmRSYXdUcmFuc2FjdGlvbihyYXdUeCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY29uZmx1eC5yZXF1ZXN0KHtcbiAgICAgIG1ldGhvZDogJ2NmeF9zZW5kVHJhbnNhY3Rpb24nLFxuICAgICAgcGFyYW1zOiBbXG4gICAgICAgIHRoaXMuY29uZmx1eC5fZm9ybWF0Q2FsbFR4KG9wdGlvbnMpLFxuICAgICAgICAuLi5leHRyYSxcbiAgICAgIF0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGVwb2NoJ3MgcmVjZWlwdCB0aHJvdWdoIHBpdm90IGJsb2NrJ3MgaGFzaFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGl2b3RCbG9ja0hhc2ggSGFzaCBvZiBwaXZvdCBibG9ja1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxBcnJheT59IEFsbCByZWNlaXB0cyBvZiBvbmUgZXBvY2hcbiAgICovXG4gIGFzeW5jIGdldEVwb2NoUmVjZWlwdHNCeVBpdm90QmxvY2tIYXNoKHBpdm90QmxvY2tIYXNoLCAuLi5leHRyYSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuY29uZmx1eC5yZXF1ZXN0KHtcbiAgICAgIG1ldGhvZDogJ2NmeF9nZXRFcG9jaFJlY2VpcHRzJyxcbiAgICAgIHBhcmFtczogW1xuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tIYXNoOiBwaXZvdEJsb2NrSGFzaCxcbiAgICAgICAgICByZXF1aXJlUGl2b3Q6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIC4uLmV4dHJhLFxuICAgICAgXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY2Z4Rm9ybWF0LmVwb2NoUmVjZWlwdHMocmVzdWx0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWaXJ0dWFsbHkgY2FsbCBhIGNvbnRyYWN0LCByZXR1cm4gdGhlIG91dHB1dCBkYXRhLlxuICAgKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9uTWV0YX0gb3B0aW9ucyAtIFNlZSBbVHJhbnNhY3Rpb25dKCNUcmFuc2FjdGlvbi5qcy9UcmFuc2FjdGlvbi8qKmNvbnN0cnVjdG9yKiopXG4gICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gW2Vwb2NoTnVtYmVyPSdsYXRlc3Rfc3RhdGUnXSAtIFNlZSBbZm9ybWF0LmVwb2NoTnVtYmVyXSgjdXRpbC9mb3JtYXQuanMvZm9ybWF0LyhzdGF0aWMpZXBvY2hOdW1iZXIpXG4gICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0gVGhlIG91dHB1dCBkYXRhLlxuICAgKi9cbiAgYXN5bmMgX2NhbGwob3B0aW9ucywgZXBvY2hOdW1iZXIpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKG9wdGlvbnMudG8gJiYgYWRkcmVzc1V0aWwuaGFzTmV0d29ya1ByZWZpeChvcHRpb25zLnRvKSAmJiB0aGlzLmNvbmZsdXgubmV0d29ya0lkKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBuZXRJZCxcbiAgICAgICAgICAvLyB0eXBlLFxuICAgICAgICB9ID0gYWRkcmVzc1V0aWwuZGVjb2RlQ2Z4QWRkcmVzcyhvcHRpb25zLnRvKTtcbiAgICAgICAgLy8gY2hlY2sgdGFyZ2V0IGFkZHJlc3MncyBuZXR3b3JrSWQgd2l0aCBjdXJyZW50IFJQQydzIG5ldHdvcmtJZFxuICAgICAgICBhc3NlcnQobmV0SWQgPT09IHRoaXMuY29uZmx1eC5uZXR3b3JrSWQsICdgdG9gIGFkZHJlc3NcXCdzIG5ldHdvcmtJZCBpcyBub3QgbWF0Y2ggY3VycmVudCBSUENcXCdzIG5ldHdvcmtJZCcpO1xuICAgICAgICAvLyBjaGVjayB0YXJnZXQgY29udHJhY3QgaXMgZXhpc3RcbiAgICAgICAgLyogaWYgKHR5cGUgPT09IEFERFJFU1NfVFlQRVMuQ09OVFJBQ1QpIHtcbiAgICAgICAgICBjb25zdCBjb2RlID0gYXdhaXQgdGhpcy5nZXRDb2RlKG9wdGlvbnMudG8pO1xuICAgICAgICAgIGFzc2VydChjb2RlICE9PSAnMHgnLCAnQ29udHJhY3Qgbm90IGV4aXN0IScpO1xuICAgICAgICB9ICovXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbmZsdXgucmVxdWVzdCh7XG4gICAgICAgIG1ldGhvZDogJ2NmeF9jYWxsJyxcbiAgICAgICAgcGFyYW1zOiBbXG4gICAgICAgICAgdGhpcy5jb25mbHV4Ll9mb3JtYXRDYWxsVHgob3B0aW9ucyksXG4gICAgICAgICAgZm9ybWF0LmVwb2NoTnVtYmVyLiRvcih1bmRlZmluZWQpKGVwb2NoTnVtYmVyKSxcbiAgICAgICAgXSxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IENvbnRyYWN0LmRlY29kZUVycm9yKGUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBWaXJ0dWFsbHkgY2FsbCBhIGNvbnRyYWN0LCByZXR1cm4gdGhlIGVzdGltYXRlIGdhcyB1c2VkIGFuZCBzdG9yYWdlIGNvbGxhdGVyYWxpemVkLlxuICAgKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9uTWV0YX0gb3B0aW9ucyAtIFNlZSBbVHJhbnNhY3Rpb25dKCNUcmFuc2FjdGlvbi5qcy9UcmFuc2FjdGlvbi8qKmNvbnN0cnVjdG9yKiopXG4gICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gW2Vwb2NoTnVtYmVyPSdsYXRlc3Rfc3RhdGUnXSAtIFNlZSBbZm9ybWF0LmVwb2NoTnVtYmVyXSgjdXRpbC9mb3JtYXQuanMvZm9ybWF0LyhzdGF0aWMpZXBvY2hOdW1iZXIpXG4gICAqIEByZXR1cm4ge1Byb21pc2U8aW1wb3J0KCcuL3R5cGVzL2Zvcm1hdHRlcicpLkVzdGltYXRlUmVzdWx0Pn0gQSBlc3RpbWF0ZSByZXN1bHQgb2JqZWN0OlxuICAgKiAtIGBCaWdJbnRgIGdhc1VzZWQ6IFRoZSBnYXMgdXNlZC5cbiAgICogLSBgQmlnSW50YCBnYXNMaW1pdDogVGhlIGdhcyBsaW1pdC5cbiAgICogLSBgQmlnSW50YCBzdG9yYWdlQ29sbGF0ZXJhbGl6ZWQ6IFRoZSBzdG9yYWdlIGNvbGxhdGVyYWxpemVkIGluIEJ5dGUuXG4gICAqL1xuICBhc3luYyBfZXN0aW1hdGVHYXNBbmRDb2xsYXRlcmFsKG9wdGlvbnMsIGVwb2NoTnVtYmVyKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuY29uZmx1eC5yZXF1ZXN0KHtcbiAgICAgICAgbWV0aG9kOiAnY2Z4X2VzdGltYXRlR2FzQW5kQ29sbGF0ZXJhbCcsXG4gICAgICAgIHBhcmFtczogW1xuICAgICAgICAgIHRoaXMuY29uZmx1eC5fZm9ybWF0Q2FsbFR4KG9wdGlvbnMpLFxuICAgICAgICAgIGZvcm1hdC5lcG9jaE51bWJlci4kb3IodW5kZWZpbmVkKShlcG9jaE51bWJlciksXG4gICAgICAgIF0sXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjZnhGb3JtYXQuZXN0aW1hdGUocmVzdWx0KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBDb250cmFjdC5kZWNvZGVFcnJvcihlKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDRlg7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/rpc/cfx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/rpc/index.js":
/*!******************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/rpc/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const format = __webpack_require__(/*! ../util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\nconst { rpcPatch } = __webpack_require__(/*! ./rpcPatch */ \"(ssr)/./node_modules/js-conflux-sdk/src/rpc/rpcPatch.js\");\n\nclass RPCMethodFactory {\n  constructor(conflux, methods = []) {\n    this.conflux = conflux;\n    this.addMethods(methods);\n  }\n\n  addMethods(methods) {\n    for (const methodMeta of methods) {\n      rpcPatch(methodMeta);\n      const method = methodMeta.method.split('_')[1];\n      this[method] = this.createRPCMethod(methodMeta);\n      // create method alias\n      if (methodMeta.alias) {\n        this[methodMeta.alias] = this[method];\n      }\n    }\n  }\n\n  createRPCMethod({ method, requestFormatters = [], responseFormatter = format.any, beforeHook }) {\n    async function rpcMethod(...args) {\n      let result;\n      let paramsVerified = false;\n      try {\n        if (beforeHook) {\n          beforeHook(...args);\n        }\n        const params = Array.from(args).map((arg, i) => (requestFormatters[i] ? requestFormatters[i](arg) : arg));\n        paramsVerified = true;\n        result = await this.conflux.request({ method, params });\n        return responseFormatter(result);\n      } catch (error) {\n        error.rpcMethod = method;\n        error.paramsVerified = paramsVerified;\n        error.rpcParams = args;\n        // if rpc result is not null, means params normalization and rpc call is successful\n        error.rpcResult = result;\n        throw error;\n      }\n    }\n\n    rpcMethod.request = function (...args) {\n      let paramsVerified = false;\n      try {\n        const params = Array.from(args).map((arg, i) => (requestFormatters[i] ? requestFormatters[i](arg) : arg));\n        paramsVerified = true;\n        return {\n          request: {\n            method,\n            params,\n          },\n          decoder: responseFormatter,\n        };\n      } catch (error) {\n        error.rpcMethod = method;\n        error.rpcParams = args;\n        error.paramsVerified = paramsVerified;\n        throw error;\n      }\n    };\n\n    return rpcMethod;\n  }\n}\n\nmodule.exports = RPCMethodFactory;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3JwYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMsOEVBQWdCO0FBQ3ZDLFFBQVEsV0FBVyxFQUFFLG1CQUFPLENBQUMsMkVBQVk7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsNEVBQTRFO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxnQkFBZ0I7QUFDOUQ7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvdmlrYXNoeWFkYXYvRGV2ZWxvcGVyL0FsbGdpdEZpbGVzL0NvbmZsdXgtVHhuLXZpc3VhbGl6ZXIvbm9kZV9tb2R1bGVzL2pzLWNvbmZsdXgtc2RrL3NyYy9ycGMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZm9ybWF0ID0gcmVxdWlyZSgnLi4vdXRpbC9mb3JtYXQnKTtcbmNvbnN0IHsgcnBjUGF0Y2ggfSA9IHJlcXVpcmUoJy4vcnBjUGF0Y2gnKTtcblxuY2xhc3MgUlBDTWV0aG9kRmFjdG9yeSB7XG4gIGNvbnN0cnVjdG9yKGNvbmZsdXgsIG1ldGhvZHMgPSBbXSkge1xuICAgIHRoaXMuY29uZmx1eCA9IGNvbmZsdXg7XG4gICAgdGhpcy5hZGRNZXRob2RzKG1ldGhvZHMpO1xuICB9XG5cbiAgYWRkTWV0aG9kcyhtZXRob2RzKSB7XG4gICAgZm9yIChjb25zdCBtZXRob2RNZXRhIG9mIG1ldGhvZHMpIHtcbiAgICAgIHJwY1BhdGNoKG1ldGhvZE1ldGEpO1xuICAgICAgY29uc3QgbWV0aG9kID0gbWV0aG9kTWV0YS5tZXRob2Quc3BsaXQoJ18nKVsxXTtcbiAgICAgIHRoaXNbbWV0aG9kXSA9IHRoaXMuY3JlYXRlUlBDTWV0aG9kKG1ldGhvZE1ldGEpO1xuICAgICAgLy8gY3JlYXRlIG1ldGhvZCBhbGlhc1xuICAgICAgaWYgKG1ldGhvZE1ldGEuYWxpYXMpIHtcbiAgICAgICAgdGhpc1ttZXRob2RNZXRhLmFsaWFzXSA9IHRoaXNbbWV0aG9kXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjcmVhdGVSUENNZXRob2QoeyBtZXRob2QsIHJlcXVlc3RGb3JtYXR0ZXJzID0gW10sIHJlc3BvbnNlRm9ybWF0dGVyID0gZm9ybWF0LmFueSwgYmVmb3JlSG9vayB9KSB7XG4gICAgYXN5bmMgZnVuY3Rpb24gcnBjTWV0aG9kKC4uLmFyZ3MpIHtcbiAgICAgIGxldCByZXN1bHQ7XG4gICAgICBsZXQgcGFyYW1zVmVyaWZpZWQgPSBmYWxzZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChiZWZvcmVIb29rKSB7XG4gICAgICAgICAgYmVmb3JlSG9vayguLi5hcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJhbXMgPSBBcnJheS5mcm9tKGFyZ3MpLm1hcCgoYXJnLCBpKSA9PiAocmVxdWVzdEZvcm1hdHRlcnNbaV0gPyByZXF1ZXN0Rm9ybWF0dGVyc1tpXShhcmcpIDogYXJnKSk7XG4gICAgICAgIHBhcmFtc1ZlcmlmaWVkID0gdHJ1ZTtcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgdGhpcy5jb25mbHV4LnJlcXVlc3QoeyBtZXRob2QsIHBhcmFtcyB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlRm9ybWF0dGVyKHJlc3VsdCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBlcnJvci5ycGNNZXRob2QgPSBtZXRob2Q7XG4gICAgICAgIGVycm9yLnBhcmFtc1ZlcmlmaWVkID0gcGFyYW1zVmVyaWZpZWQ7XG4gICAgICAgIGVycm9yLnJwY1BhcmFtcyA9IGFyZ3M7XG4gICAgICAgIC8vIGlmIHJwYyByZXN1bHQgaXMgbm90IG51bGwsIG1lYW5zIHBhcmFtcyBub3JtYWxpemF0aW9uIGFuZCBycGMgY2FsbCBpcyBzdWNjZXNzZnVsXG4gICAgICAgIGVycm9yLnJwY1Jlc3VsdCA9IHJlc3VsdDtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcnBjTWV0aG9kLnJlcXVlc3QgPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgbGV0IHBhcmFtc1ZlcmlmaWVkID0gZmFsc2U7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBwYXJhbXMgPSBBcnJheS5mcm9tKGFyZ3MpLm1hcCgoYXJnLCBpKSA9PiAocmVxdWVzdEZvcm1hdHRlcnNbaV0gPyByZXF1ZXN0Rm9ybWF0dGVyc1tpXShhcmcpIDogYXJnKSk7XG4gICAgICAgIHBhcmFtc1ZlcmlmaWVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICByZXF1ZXN0OiB7XG4gICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkZWNvZGVyOiByZXNwb25zZUZvcm1hdHRlcixcbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGVycm9yLnJwY01ldGhvZCA9IG1ldGhvZDtcbiAgICAgICAgZXJyb3IucnBjUGFyYW1zID0gYXJncztcbiAgICAgICAgZXJyb3IucGFyYW1zVmVyaWZpZWQgPSBwYXJhbXNWZXJpZmllZDtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBycGNNZXRob2Q7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSUENNZXRob2RGYWN0b3J5O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/rpc/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/rpc/pos.js":
/*!****************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/rpc/pos.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const RPCMethodFactory = __webpack_require__(/*! ./index */ \"(ssr)/./node_modules/js-conflux-sdk/src/rpc/index.js\");\nconst format = __webpack_require__(/*! ../util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\n\nconst LATEST_COMMITTED = 'latest_committed';\nconst LATEST_VOTED = 'latest_voted';\n\nformat.posBlockNumber = format.bigUIntHex\n  .$or(LATEST_COMMITTED)\n  .$or(LATEST_VOTED);\n\n/**\n * @typedef {Object} PivotDecision\n * @property {number} height\n * @property {string} blockHash\n */\nformat.decision = format({\n  height: format.uInt,\n});\n\n/**\n * PoS status\n * @typedef {Object} PoSStatus\n * @property {number} latestCommitted\n * @property {number} epoch\n * @property {number} latestVoted\n * @property {number} latestTxNumber\n * @property {PivotDecision} pivotDecision\n */\nformat.posStatus = format({\n  latestCommitted: format.uInt,\n  epoch: format.uInt,\n  pivotDecision: format.decision,\n  latestTxNumber: format.uInt,\n  latestVoted: format.uInt.$or(null),\n});\n\n/**\n * @typedef {Object} VotePowerState\n * @property {number} endBlockNumber\n * @property {number} power\n */\nformat.posVotePowerState = format({\n  endBlockNumber: format.uInt,\n  power: format.uInt,\n});\n\n/**\n * @typedef {Object} PoSAccountStatus\n * @property {number} availableVotes\n * @property {number} forfeited\n * @property {VotePowerState[]} inQueue\n * @property {VotePowerState[]} outQueue\n * @property {number} locked\n * @property {number} unlocked\n * @property {number|null} forceRetired\n */\n\n/**\n * @typedef {Object} PoSAccount\n * @property {number} blockNumber\n * @property {PoSAccountStatus} status\n */\nformat.posAccount = format({\n  blockNumber: format.uInt,\n  status: {\n    availableVotes: format.uInt,\n    forfeited: format.uInt,\n    forceRetired: format.uInt.$or(null),\n    inQueue: [format.posVotePowerState],\n    locked: format.uInt,\n    outQueue: [format.posVotePowerState],\n    unlocked: format.uInt,\n  },\n});\n\nformat.txPayload = format({\n  targetTerm: format.uInt,\n}).$or({\n  votingPower: format.uInt,\n}).$or({\n  height: format.uInt,\n});\n\n/**\n * @typedef {Object} PoSTransaction\n * @property {string} hash\n * @property {string} blockHash\n * @property {string} from\n * @property {string} status\n * @property {string} type\n * @property {number} number\n * @property {number|null} timestamp\n * @property {number|null} blockNumber\n * @property {*} payload\n */\nformat.posTransaction = format({\n  number: format.uInt,\n  timestamp: format.uInt.$or(null),\n  blockNumber: format.uInt.$or(null),\n  payload: format.txPayload.$or(null),\n}).$or(null);\n\n/**\n * @typedef {Object} Signature\n * @property {number} votes\n * @property {string} account\n */\n\n/**\n * @typedef {Object} PoSBlock\n * @property {number} epoch\n * @property {number} height\n * @property {PivotDecision} pivotDecision\n * @property {number} round\n * @property {number} timestamp\n * @property {number} lastTxNumber\n * @property {Signature} signatures\n */\nformat.posBlock = format({\n  epoch: format.uInt,\n  height: format.uInt,\n  pivotDecision: format.decision.$or(null),\n  round: format.uInt,\n  timestamp: format.uInt,\n  lastTxNumber: format.uInt,\n  signatures: [format({ votes: format.uInt })],\n}).$or(null);\n\n/**\n * @typedef {Object} CommitteeNode\n * @property {number} votingPower\n * @property {string} address\n */\nformat.committeeNode = format({\n  votingPower: format.uInt,\n});\n\n/**\n * @typedef {Object} Election\n * @property {boolean} isFinalized\n * @property {number} startBlockNumber\n * @property {CommitteeNode[]} topElectingNodes\n */\nformat.election = format({\n  startBlockNumber: format.uInt,\n  topElectingNodes: [format.committeeNode],\n});\n\n/**\n * @typedef {Object} CurrentCommittee\n * @property {number} epochNumber\n * @property {number} quorumVotingPower\n * @property {number} totalVotingPower\n * @property {CommitteeNode[]} nodes\n */\n\n/**\n * @typedef {Object} PoSCommittee\n * @property {CurrentCommittee} currentCommittee\n * @property {Election[]} elections\n */\nformat.committee = format({\n  currentCommittee: {\n    epochNumber: format.uInt,\n    quorumVotingPower: format.uInt,\n    totalVotingPower: format.uInt,\n    nodes: [format.committeeNode],\n  },\n  elections: [format.election],\n});\n\n/**\n * @typedef {Object} PoSReward\n * @property {number} reward\n * @property {string} posAddress\n * @property {string} powAddress\n */\n\n/**\n * @typedef {Object} PoSEpochRewards\n * @property {string} powEpochHash\n * @property {PoSReward[]} accountRewards\n */\nformat.rewardsByEpoch = format({\n  accountRewards: format([format({\n    reward: format.bigUInt,\n  })]).$or(null),\n}).$or(null);\n\nformat.epochState = format.any;\n\nformat.ledgerInfoWithSignatures = format.any;\n\n/**\n * Class contains pos RPC methods\n * For the detail meaning of fields, please refer to the PoS RPC document:\n * @class\n */\nclass PoS extends RPCMethodFactory {\n  /**\n   * Create PoS instance\n   * @param {import('../Conflux').Conflux} conflux The Conflux object\n   * @return {PoS} The PoS instance\n   */\n  constructor(conflux) {\n    super(conflux, PoS.methods());\n    this.conflux = conflux;\n  }\n\n  static methods() {\n    return [\n      /**\n       * @instance\n       * @async\n       * @name getStatus\n       * @return {Promise<PoSStatus>} PoS status object\n       * @example\n       * await conflux.pos.getStatus();\n       * // {\n       * //   epoch: 138,\n       * //   latestCommitted: 8235,\n       * //   latestTxNumber: '0xa5e2',\n       * //   latestVoted: 8238,\n       * //   pivotDecision: {\n       * //     blockHash: '0x97625d04ece6fe322ae38010ac877447927b4d5963af7eaea7db9befb615e510',\n       * //     height: 394020\n       * //   }\n       * // }\n       */\n      {\n        method: 'pos_getStatus',\n        responseFormatter: format.posStatus,\n      },\n      /**\n       * @instance\n       * @async\n       * @name getAccount\n       * @param {Hash} account Account address\n       * @param {number|hex} [blockNumber] Optional block number\n       * @return {Promise<PoSAccount>}\n       * @example\n       * await conflux.pos.getAccount('0x0f0ccf5ee5276b102316acb3943a2750085f85ac7b94bdbf9d8901f03a7d7cc3');\n       * {\n       *   address: '0x0f0ccf5ee5276b102316acb3943a2750085f85ac7b94bdbf9d8901f03a7d7cc3',\n       *   blockNumber: 8240,\n       *   status: {\n       *     availableVotes: 1525,\n       *     forceRetired: null,\n       *     forfeited: 0,\n       *     inQueue: [],\n       *     locked: 1525,\n       *     outQueue: [],\n       *     unlocked: 1\n       *   }\n       * }\n       */\n      {\n        method: 'pos_getAccount',\n        requestFormatters: [\n          format.hex64,\n          format.posBlockNumber.$or(undefined),\n        ],\n        responseFormatter: format.posAccount,\n      },\n      {\n        method: 'pos_getAccountByPowAddress',\n        requestFormatters: [\n          format.address,\n          format.posBlockNumber.$or(undefined),\n        ],\n        responseFormatter: format.posAccount,\n      },\n      /**\n       * @instance\n       * @async\n       * @name getBlockByHash\n       * @param {string} hash The hash of PoS block\n       * @return {Promise<PoSBlock>}\n       * @example\n       * await conflux.pos.getBlockByHash('0x97625d04ece6fe322ae38010ac877447927b4d5963af7eaea7db9befb615e510');\n       */\n      {\n        method: 'pos_getBlockByHash',\n        requestFormatters: [\n          format.hex64,\n        ],\n        responseFormatter: format.posBlock,\n      },\n      /**\n       * @instance\n       * @async\n       * @name getBlockByNumber\n       * @param {number|hex} blockNumber The number of PoS block\n       * @return {Promise<PoSBlock>}\n       * @example\n       * await conflux.pos.getBlockByNumber(8235);\n       * {\n       *   epoch: 138,\n       *   hash: '0x1daf5443b7556cc39c3d4fe5e208fa77c3f5c053ea4bd637f5e43dfa7f0a95cb',\n       *   height: 8235,\n       *   miner: '0x0f0ccf5ee5276b102316acb3943a2750085f85ac7b94bdbf9d8901f03a7d7cc3',\n       *   lastTxNumber: 42467,\n       *   parentHash: '0x308699b307c81906ab97cbf213532c196f2d718f4641266aa444209349d9e31c',\n       *   pivotDecision: {\n       *     blockHash: '0x97625d04ece6fe322ae38010ac877447927b4d5963af7eaea7db9befb615e510',\n       *     height: 394020\n       *   },\n       *   round: 15,\n       *   signatures: [\n       *     {\n       *       account: '0x00f7c03318f8c4a7c6ae432e124b4a0474e973139a87f9ea6ae3efba66af7d8a',\n       *       votes: 3\n       *     }\n       *   ],\n       *   timestamp: 1638340165169041\n       * }\n       */\n      {\n        method: 'pos_getBlockByNumber',\n        requestFormatters: [\n          format.posBlockNumber,\n        ],\n        responseFormatter: format.posBlock,\n      },\n      /**\n       * @instance\n       * @async\n       * @name getCommittee\n       * @param {number|hex} [blockNumber] Optional block number\n       * @return {Promise<PoSCommittee>}\n       * @example\n       * await conflux.pos.getCommittee();\n       * {\n       *   currentCommittee: {\n       *     epochNumber: 138,\n       *     nodes: [\n       *      {\n       *       address: \"0xf92d8504fad118ddb5cf475180f5bcffaa967a9f9fa9c3c899ff9ad0de99694a\",\n       *       votingPower: 3\n       *      }\n       *     ],\n       *     quorumVotingPower: 199,\n       *     totalVotingPower: 297\n       *   },\n       *   elections: [\n       *     {\n       *       isFinalized: false,\n       *       startBlockNumber: 8280,\n       *       topElectingNodes: [\n       *         {\n       *           address: \"0x0f0ccf5ee5276b102316acb3943a2750085f85ac7b94bdbf9d8901f03a7d7cc3\",\n       *           votingPower: 3\n       *         }\n       *       ]\n       *     },\n       *     {\n       *       isFinalized: false,\n       *       startBlockNumber: 8340,\n       *       topElectingNodes: []\n       *     }\n       *   ]\n       * }\n       */\n      {\n        method: 'pos_getCommittee',\n        requestFormatters: [\n          format.posBlockNumber.$or(undefined),\n        ],\n        responseFormatter: format.committee,\n      },\n      /**\n       * @instance\n       * @async\n       * @name getTransactionByNumber\n       * @param {number|string} txNumber The number of transaction\n       * @return {Promise<PoSTransaction>}\n       * @example\n       * await conflux.pos.getTransactionByNumber(8235);\n       * {\n       *   blockHash: '0xe684e88981b7ffe14741a2274e7b65b89ae2e133ebdd783d71ddeeacb4e957d6',\n       *   blockNumber: 8243,\n       *   from: '0x0000000000000000000000000000000000000000000000000000000000000000',\n       *   hash: '0xaa92222b6a20342285ed56de2b77a05a6c1a9a3e4750e4952af8f908f7316b5d',\n       *   number: 42480,\n       *   payload: null,\n       *   status: 'Executed',\n       *   timestamp: 1638340649662468,\n       *   type: 'BlockMetadata'\n       * }\n       */\n      {\n        method: 'pos_getTransactionByNumber',\n        requestFormatters: [\n          format.bigUIntHex,\n        ],\n        responseFormatter: format.posTransaction,\n      },\n      /**\n       * @instance\n       * @async\n       * @method getRewardsByEpoch\n       * @name getRewardsByEpoch\n       * @param {number|string} epoch A PoS epoch number\n       * @return {Promise<PoSEpochRewards>}\n       * @example\n       * await conflux.pos.getRewardsByEpoch(138);\n       * {\n       *   accountRewards: [\n       *     {\n       *       posAddress: '0x83ca56dd7b9d1222fff48565ed0261f42a17099061d905f9e743f89574dbd8e0',\n       *       powAddress: 'NET8888:TYPE.USER:AAKFSH1RUYS4P040J5M7DJRJBGMX9ZV7HAJTFN2DKP',\n       *       reward: 605265415757735647n\n       *     },\n       *     ... 122 more items\n       *   ],\n       *   powEpochHash: '0xd634c0a71c6197a6fad9f80439b31b4c7191b3ee42335b1548dad1160f7f628c'\n       * }\n       */\n      {\n        method: 'pos_getRewardsByEpoch',\n        requestFormatters: [\n          format.bigUIntHex,\n        ],\n        responseFormatter: format.rewardsByEpoch,\n      },\n      {\n        method: 'pos_getConsensusBlocks',\n        requestFormatters: [\n        ],\n        responseFormatter: format([format.posBlock]),\n      },\n      {\n        method: 'pos_getEpochState',\n        requestFormatters: [\n          format.bigUIntHex,\n        ],\n        responseFormatter: format.epochState,\n      },\n      {\n        method: 'pos_getLedgerInfoByEpoch',\n        requestFormatters: [\n          format.bigUIntHex,\n        ],\n        responseFormatter: format.ledgerInfoWithSignatures.$or(undefined),\n      },\n      {\n        method: 'pos_getLedgerInfoByBlockNumber',\n        requestFormatters: [\n          format.posBlockNumber,\n        ],\n        responseFormatter: format.ledgerInfoWithSignatures.$or(undefined),\n      },\n      {\n        method: 'pos_getLedgerInfoByEpochAndRound',\n        requestFormatters: [\n          format.bigUIntHex,\n          format.bigUIntHex,\n        ],\n        responseFormatter: format.ledgerInfoWithSignatures.$or(undefined),\n      },\n      {\n        method: 'pos_getLedgerInfosByEpoch',\n        requestFormatters: [\n          format.bigUIntHex,\n        ],\n        responseFormatter: format([format.ledgerInfoWithSignatures]),\n      },\n    ];\n  }\n}\n\nmodule.exports = PoS;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/rpc/pos.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/rpc/rpcPatch.js":
/*!*********************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/rpc/rpcPatch.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("/**\n * Give a chance to change the RPC behavior.\n * For example, you may want to use a different responseFormatter for traceBlock.\n * @param rpcDef\n */\n\n// eslint-disable-next-line no-unused-vars\nfunction emptyPatchRPCMethod(rpcDef) {\n  // const { method, requestFormatters, responseFormatter } = rpcDef;\n}\n\nlet rpcPatch = emptyPatchRPCMethod;\n\n// set it before initializing a new Conflux instance.\nfunction setPRCMethodPatch(fn) {\n  rpcPatch = fn;\n}\n\nmodule.exports = { rpcPatch, setPRCMethodPatch };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3JwYy9ycGNQYXRjaC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLCtDQUErQztBQUM1RDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWthc2h5YWRhdi9EZXZlbG9wZXIvQWxsZ2l0RmlsZXMvQ29uZmx1eC1UeG4tdmlzdWFsaXplci9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3JwYy9ycGNQYXRjaC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdpdmUgYSBjaGFuY2UgdG8gY2hhbmdlIHRoZSBSUEMgYmVoYXZpb3IuXG4gKiBGb3IgZXhhbXBsZSwgeW91IG1heSB3YW50IHRvIHVzZSBhIGRpZmZlcmVudCByZXNwb25zZUZvcm1hdHRlciBmb3IgdHJhY2VCbG9jay5cbiAqIEBwYXJhbSBycGNEZWZcbiAqL1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbmZ1bmN0aW9uIGVtcHR5UGF0Y2hSUENNZXRob2QocnBjRGVmKSB7XG4gIC8vIGNvbnN0IHsgbWV0aG9kLCByZXF1ZXN0Rm9ybWF0dGVycywgcmVzcG9uc2VGb3JtYXR0ZXIgfSA9IHJwY0RlZjtcbn1cblxubGV0IHJwY1BhdGNoID0gZW1wdHlQYXRjaFJQQ01ldGhvZDtcblxuLy8gc2V0IGl0IGJlZm9yZSBpbml0aWFsaXppbmcgYSBuZXcgQ29uZmx1eCBpbnN0YW5jZS5cbmZ1bmN0aW9uIHNldFBSQ01ldGhvZFBhdGNoKGZuKSB7XG4gIHJwY1BhdGNoID0gZm47XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBycGNQYXRjaCwgc2V0UFJDTWV0aG9kUGF0Y2ggfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/rpc/rpcPatch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/rpc/trace.js":
/*!******************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/rpc/trace.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const RPCMethodFactory = __webpack_require__(/*! ./index */ \"(ssr)/./node_modules/js-conflux-sdk/src/rpc/index.js\");\nconst format = __webpack_require__(/*! ../util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\n\n/**\n * @typedef {Object} ActionCall\n * @prop {string} space\n * @prop {string} from\n * @prop {string} to\n * @prop {BigInt} value\n * @prop {string} callType\n * @prop {string} input\n * @prop {BigInt} gas\n */\nformat.actionCall = format({\n  space: format.any,\n  from: format.any,\n  to: format.any,\n  input: format.any,\n  callType: format.any,\n  value: format.bigUInt,\n  gas: format.bigUInt,\n});\n\n/**\n * @typedef {Object} ActionCallResult\n * @prop {string} space\n * @prop {string} returnData\n * @prop {BigInt} gasLeft\n */\nformat.actionCallResult = format({\n  outcome: format.any,\n  returnData: format.any,\n  gasLeft: format.bigUInt,\n});\n\n/**\n * @typedef {Object} ActionCreate\n * @prop {string} space\n * @prop {string} from\n * @prop {string} init\n * @prop {BigInt} value\n * @prop {BigInt} gas\n * @prop {string} createType\n */\nformat.actionCreate = format({\n  space: format.any,\n  from: format.any,\n  value: format.bigUInt,\n  gas: format.bigUInt,\n  init: format.any,\n  createType: format.any,\n});\n\n/**\n * @typedef {Object} ActionCreateResult\n * @prop {string} outcome\n * @prop {string} returnData\n * @prop {BigInt} gasLeft\n * @prop {string} addr\n */\nformat.actionCreateResult = format({\n  outcome: format.any,\n  addr: format.any,\n  gasLeft: format.bigUInt,\n  returnData: format.any,\n});\n\n/**\n * @typedef {Object} ActionInternal\n * @prop {string} from\n * @prop {string} to\n * @prop {string} fromPocket\n * @prop {string} toPocket\n * @prop {BigInt} value\n * @prop {string} fromSpace\n * @prop {string} toSpace\n */\nformat.actionInternalTrace = format({\n  from: format.any,\n  fromPocket: format.any,\n  fromSpace: format.any,\n  to: format.any,\n  toPocket: format.any,\n  toSpace: format.any,\n  value: format.bigUInt,\n});\n\n/**\n * @typedef {ActionCall|ActionCallResult|ActionCreate|ActionCreateResult|ActionInternal} Action\n */\n\n/**\n * @typedef {Object} Trace\n * @prop {Action} action\n * @prop {number} epochNumber\n * @prop {string} epochHash\n * @prop {string} blockHash\n * @prop {string} transactionHash\n * @prop {string} transactionPosition\n * @prop {string} type\n * @prop {boolean} valid\n */\nformat.action = format({\n  action: {\n    from: format.any,\n    to: format.any,\n    fromPocket: format.any,\n    toPocket: format.any,\n    space: format.any, // From conflux v2.0, create/call trace will have this field\n    fromSpace: format.any, // From conflux v2.0, internal_transfer_action will have this field\n    toSpace: format.any, // From conflux v2.0, internal_transfer_action will have this field\n    value: format.bigUInt,\n    gas: format.bigUInt,\n    gasLeft: format.bigUInt,\n    input: format.hex,\n    init: format.hex,\n    returnData: format.hex,\n    callType: format.any,\n    createType: format.any,\n    outcome: format.any,\n    addr: format.any,\n  },\n  epochNumber: format.uInt,\n  epochHash: format.hex,\n  blockHash: format.hex,\n  transactionHash: format.hex,\n  transactionPosition: format.uInt,\n  type: format.any,\n  valid: format.any,\n}, { pick: true });\n\n// only used in block traces\nformat.txTraces = format({\n  traces: [format.action],\n  transactionPosition: format.uInt,\n});\n\nformat.blockTraces = format({\n  transactionTraces: [format.txTraces],\n  epochNumber: format.uInt,\n}).$or(null);\n\n// trace array\nformat.traces = format([format.action]).$or(null);\n\n/**\n * @typedef {object} TraceFilter\n * @property {number} [fromEpoch]\n * @property {number} [toEpoch]\n * @property {string|string[]} [fromAddress]\n * @property {string|string[]} [toAddress]\n * @property {string[]} [blockHashes]\n * @property {number} [after]\n * @property {number} [count]\n * @property {string[]|string} [actionTypes]\n */\nformat.traceFilter = format({\n  fromEpoch: format.epochNumber.$or(null),\n  toEpoch: format.epochNumber.$or(null),\n  blockHashes: format([format.blockHash]).$or(null),\n  after: format.bigUIntHex.$or(null),\n  count: format.bigUIntHex.$or(null),\n  actionTypes: format([format.any]).$or(null),\n});\n\nclass Trace extends RPCMethodFactory {\n  constructor(conflux) {\n    super(conflux, Trace.methods());\n    this.conflux = conflux;\n  }\n\n  static methods() {\n    return [\n      {\n        method: 'trace_block',\n        alias: 'traceBlock',\n        requestFormatters: [\n          format.blockHash,\n        ],\n        responseFormatter: format.blockTraces,\n      },\n      {\n        method: 'trace_transaction',\n        alias: 'traceTransaction',\n        requestFormatters: [\n          format.transactionHash,\n        ],\n        responseFormatter: format.traces,\n      },\n      {\n        method: 'trace_filter',\n        alias: 'traceFilter',\n        requestFormatters: [\n          format.traceFilter,\n        ],\n        responseFormatter: format.traces,\n      },\n      {\n        method: 'trace_epoch',\n        alias: 'traceEpoch',\n        requestFormatters: [\n          format.epochNumber,\n        ],\n      },\n    ];\n  }\n}\n\nmodule.exports = Trace;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/rpc/trace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/rpc/txpool.js":
/*!*******************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/rpc/txpool.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const RPCMethodFactory = __webpack_require__(/*! ./index */ \"(ssr)/./node_modules/js-conflux-sdk/src/rpc/index.js\");\nconst format = __webpack_require__(/*! ../util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\n\n/**\n * Class contains txpool RPC methods\n * @class\n */\nclass TxPool extends RPCMethodFactory {\n  /**\n   * TxPool constructor.\n   * @param {import('../Conflux').Conflux} conflux A Conflux instance\n   * @return {TxPool} The TxPool instance\n   */\n  constructor(conflux) {\n    super(conflux);\n    this.conflux = conflux;\n    super.addMethods(this.methods());\n  }\n\n  methods() {\n    return [\n      /**\n       * Get user next nonce in transaction pool\n       * @instance\n       * @async\n       * @name nextNonce\n       * @param {string} address The address of the account\n       * @return {Promise<number>} The next usable nonce\n       * @example <caption>Example usage of txpool.nextNonce</caption>\n       * await conflux.txpool.nextNonce('cfxtest:aak2rra2njvd77ezwjvx04kkds9fzagfe6d5r8e957');\n       * // returns 100\n       */\n      {\n        method: 'txpool_nextNonce',\n        requestFormatters: [\n          this.conflux._formatAddress.bind(this.conflux),\n        ],\n        responseFormatter: format.bigUInt,\n      },\n    ];\n  }\n}\n\nmodule.exports = TxPool;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3JwYy90eHBvb2wuanMiLCJtYXBwaW5ncyI6IkFBQUEseUJBQXlCLG1CQUFPLENBQUMscUVBQVM7QUFDMUMsZUFBZSxtQkFBTyxDQUFDLDhFQUFnQjs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLDhCQUE4QjtBQUMzQyxjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekIsa0JBQWtCLGlCQUFpQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWthc2h5YWRhdi9EZXZlbG9wZXIvQWxsZ2l0RmlsZXMvQ29uZmx1eC1UeG4tdmlzdWFsaXplci9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3JwYy90eHBvb2wuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUlBDTWV0aG9kRmFjdG9yeSA9IHJlcXVpcmUoJy4vaW5kZXgnKTtcbmNvbnN0IGZvcm1hdCA9IHJlcXVpcmUoJy4uL3V0aWwvZm9ybWF0Jyk7XG5cbi8qKlxuICogQ2xhc3MgY29udGFpbnMgdHhwb29sIFJQQyBtZXRob2RzXG4gKiBAY2xhc3NcbiAqL1xuY2xhc3MgVHhQb29sIGV4dGVuZHMgUlBDTWV0aG9kRmFjdG9yeSB7XG4gIC8qKlxuICAgKiBUeFBvb2wgY29uc3RydWN0b3IuXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuLi9Db25mbHV4JykuQ29uZmx1eH0gY29uZmx1eCBBIENvbmZsdXggaW5zdGFuY2VcbiAgICogQHJldHVybiB7VHhQb29sfSBUaGUgVHhQb29sIGluc3RhbmNlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb25mbHV4KSB7XG4gICAgc3VwZXIoY29uZmx1eCk7XG4gICAgdGhpcy5jb25mbHV4ID0gY29uZmx1eDtcbiAgICBzdXBlci5hZGRNZXRob2RzKHRoaXMubWV0aG9kcygpKTtcbiAgfVxuXG4gIG1ldGhvZHMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIC8qKlxuICAgICAgICogR2V0IHVzZXIgbmV4dCBub25jZSBpbiB0cmFuc2FjdGlvbiBwb29sXG4gICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAqIEBhc3luY1xuICAgICAgICogQG5hbWUgbmV4dE5vbmNlXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYWRkcmVzcyBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudFxuICAgICAgICogQHJldHVybiB7UHJvbWlzZTxudW1iZXI+fSBUaGUgbmV4dCB1c2FibGUgbm9uY2VcbiAgICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPkV4YW1wbGUgdXNhZ2Ugb2YgdHhwb29sLm5leHROb25jZTwvY2FwdGlvbj5cbiAgICAgICAqIGF3YWl0IGNvbmZsdXgudHhwb29sLm5leHROb25jZSgnY2Z4dGVzdDphYWsycnJhMm5qdmQ3N2V6d2p2eDA0a2tkczlmemFnZmU2ZDVyOGU5NTcnKTtcbiAgICAgICAqIC8vIHJldHVybnMgMTAwXG4gICAgICAgKi9cbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAndHhwb29sX25leHROb25jZScsXG4gICAgICAgIHJlcXVlc3RGb3JtYXR0ZXJzOiBbXG4gICAgICAgICAgdGhpcy5jb25mbHV4Ll9mb3JtYXRBZGRyZXNzLmJpbmQodGhpcy5jb25mbHV4KSxcbiAgICAgICAgXSxcbiAgICAgICAgcmVzcG9uc2VGb3JtYXR0ZXI6IGZvcm1hdC5iaWdVSW50LFxuICAgICAgfSxcbiAgICBdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVHhQb29sO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/rpc/txpool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/rpc/types/Account.js":
/*!**************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/rpc/types/Account.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const format = __webpack_require__(/*! ../../util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\nconst CONST = __webpack_require__(/*! ../../CONST */ \"(ssr)/./node_modules/js-conflux-sdk/src/CONST.js\");\n\nconst formatAccount = format({\n  accumulatedInterestReturn: format.bigUInt,\n  balance: format.bigUInt,\n  collateralForStorage: format.bigUInt,\n  nonce: format.bigUInt,\n  stakingBalance: format.bigUInt,\n}, {\n  name: 'format.account',\n});\n\nclass Account {\n  static format(data) {\n    return formatAccount(data);\n  }\n\n  constructor(accountMeta) {\n    const {\n      address,\n      balance,\n      nonce,\n      codeHash,\n      stakingBalance,\n      collateralForStorage,\n      accumulatedInterestReturn,\n      admin,\n    } = Account.format(accountMeta);\n    /** @type {string} */\n    this.address = address;\n    /** @type {BigInt} */\n    this.balance = balance;\n    /** @type {BigInt} */\n    this.nonce = nonce;\n    /** @type {string} */\n    this.codeHash = codeHash;\n    /** @type {BigInt} */\n    this.stakingBalance = stakingBalance;\n    /** @type {BigInt} */\n    this.collateralForStorage = collateralForStorage;\n    /** @type {BigInt} */\n    this.accumulatedInterestReturn = accumulatedInterestReturn;\n    /** @type {string} */\n    this.admin = admin;\n    return this;\n  }\n\n  isExternalAccount() {\n    return this.codeHash === CONST.KECCAK_EMPTY;\n  }\n}\n\nmodule.exports = Account;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3JwYy90eXBlcy9BY2NvdW50LmpzIiwibWFwcGluZ3MiOiJBQUFBLGVBQWUsbUJBQU8sQ0FBQyxpRkFBbUI7QUFDMUMsY0FBYyxtQkFBTyxDQUFDLHFFQUFhOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLGVBQWUsUUFBUTtBQUN2QjtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWthc2h5YWRhdi9EZXZlbG9wZXIvQWxsZ2l0RmlsZXMvQ29uZmx1eC1UeG4tdmlzdWFsaXplci9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3JwYy90eXBlcy9BY2NvdW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZvcm1hdCA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvZm9ybWF0Jyk7XG5jb25zdCBDT05TVCA9IHJlcXVpcmUoJy4uLy4uL0NPTlNUJyk7XG5cbmNvbnN0IGZvcm1hdEFjY291bnQgPSBmb3JtYXQoe1xuICBhY2N1bXVsYXRlZEludGVyZXN0UmV0dXJuOiBmb3JtYXQuYmlnVUludCxcbiAgYmFsYW5jZTogZm9ybWF0LmJpZ1VJbnQsXG4gIGNvbGxhdGVyYWxGb3JTdG9yYWdlOiBmb3JtYXQuYmlnVUludCxcbiAgbm9uY2U6IGZvcm1hdC5iaWdVSW50LFxuICBzdGFraW5nQmFsYW5jZTogZm9ybWF0LmJpZ1VJbnQsXG59LCB7XG4gIG5hbWU6ICdmb3JtYXQuYWNjb3VudCcsXG59KTtcblxuY2xhc3MgQWNjb3VudCB7XG4gIHN0YXRpYyBmb3JtYXQoZGF0YSkge1xuICAgIHJldHVybiBmb3JtYXRBY2NvdW50KGRhdGEpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoYWNjb3VudE1ldGEpIHtcbiAgICBjb25zdCB7XG4gICAgICBhZGRyZXNzLFxuICAgICAgYmFsYW5jZSxcbiAgICAgIG5vbmNlLFxuICAgICAgY29kZUhhc2gsXG4gICAgICBzdGFraW5nQmFsYW5jZSxcbiAgICAgIGNvbGxhdGVyYWxGb3JTdG9yYWdlLFxuICAgICAgYWNjdW11bGF0ZWRJbnRlcmVzdFJldHVybixcbiAgICAgIGFkbWluLFxuICAgIH0gPSBBY2NvdW50LmZvcm1hdChhY2NvdW50TWV0YSk7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgdGhpcy5hZGRyZXNzID0gYWRkcmVzcztcbiAgICAvKiogQHR5cGUge0JpZ0ludH0gKi9cbiAgICB0aGlzLmJhbGFuY2UgPSBiYWxhbmNlO1xuICAgIC8qKiBAdHlwZSB7QmlnSW50fSAqL1xuICAgIHRoaXMubm9uY2UgPSBub25jZTtcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICB0aGlzLmNvZGVIYXNoID0gY29kZUhhc2g7XG4gICAgLyoqIEB0eXBlIHtCaWdJbnR9ICovXG4gICAgdGhpcy5zdGFraW5nQmFsYW5jZSA9IHN0YWtpbmdCYWxhbmNlO1xuICAgIC8qKiBAdHlwZSB7QmlnSW50fSAqL1xuICAgIHRoaXMuY29sbGF0ZXJhbEZvclN0b3JhZ2UgPSBjb2xsYXRlcmFsRm9yU3RvcmFnZTtcbiAgICAvKiogQHR5cGUge0JpZ0ludH0gKi9cbiAgICB0aGlzLmFjY3VtdWxhdGVkSW50ZXJlc3RSZXR1cm4gPSBhY2N1bXVsYXRlZEludGVyZXN0UmV0dXJuO1xuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIHRoaXMuYWRtaW4gPSBhZG1pbjtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGlzRXh0ZXJuYWxBY2NvdW50KCkge1xuICAgIHJldHVybiB0aGlzLmNvZGVIYXNoID09PSBDT05TVC5LRUNDQUtfRU1QVFk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBY2NvdW50O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/rpc/types/Account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/rpc/types/formatter.js":
/*!****************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/rpc/types/formatter.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const format = __webpack_require__(/*! ../../util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\nconst { validAddressPrefix } = __webpack_require__(/*! ../../util */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\nconst parser = __webpack_require__(/*! ../../util/parser */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/parser.js\");\n\nconst cfxFormat = new Proxy(() => undefined, {\n  apply(target, thisArg, argArray) {\n    return parser(...argArray);\n  },\n});\n\n/**\n * @typedef {Object} LogFilter\n * @property {string|number} [fromEpoch] Search will be applied from this epoch number.\n * @property {string|number} [toEpoch] Search will be applied up until (and including) this epoch number.\n * @property {string[]} [blockHashes] Array of up to 128 block hashes that the search will be applied to. This will override from/to epoch fields if it's not null\n * @property {string[]|string} [address] Search contract addresses. If null, match all. If specified, log must be produced by one of these addresses.\n * @property {string[]} [topics] Search topics. Logs can have 4 topics: the function signature and up to 3 indexed event arguments. The elements of topics match the corresponding log topics. Example: [\"0xA\", null, [\"0xB\", \"0xC\"], null] matches logs with \"0xA\" as the 1st topic AND (\"0xB\" OR \"0xC\") as the 3rd topic. If null, match all.\n */\ncfxFormat.getLogs = format({\n  fromEpoch: format.epochNumber,\n  toEpoch: format.epochNumber,\n  blockHashes: format([format.blockHash]).$or(null),\n  address: format.address.$or([format.address]).$or(null),\n  topics: format([format.hex64.$or([format.hex64]).$or(null)]),\n}, {\n  pick: true,\n  name: 'format.getLogs',\n});\n\n// configure getLogs formatter with networkId and toHexAddress\ncfxFormat.getLogsAdvance = function (networkId, toHexAddress = false, useVerboseAddress = false) {\n  const formatAddress = toHexAddress ? format.hexAddress : format.netAddress(networkId, useVerboseAddress);\n  return format({\n    fromEpoch: format.epochNumber,\n    toEpoch: format.epochNumber,\n    blockHashes: format([format.blockHash]).$or(null),\n    address: format([formatAddress]).$or(formatAddress).$or(null),\n    topics: format([format.hex64.$or([format.hex64]).$or(null)]),\n  }, {\n    pick: true,\n    name: 'format.getLogsAdvance',\n  });\n};\n\ncfxFormat.AccessListEntry = format({\n  address: format.address,\n  storageKeys: [format.hex64],\n});\n\ncfxFormat.transactionToAddress = format(format.hexAddress.$or(null).$default(null))\n  .$after(format.hexBuffer)\n  .$validate(hBuf => hBuf.length === 0 || validAddressPrefix(hBuf), 'transactionToAddress');\n\ncfxFormat.signTx = format({\n  nonce: format.bigUInt.$after(format.hexBuffer),\n  gasPrice: format.bigUInt.$after(format.hexBuffer),\n  gas: format.bigUInt.$after(format.hexBuffer),\n  to: cfxFormat.transactionToAddress,\n  value: format.bigUInt.$default(0).$after(format.hexBuffer),\n  storageLimit: format.bigUInt.$after(format.hexBuffer),\n  epochHeight: format.bigUInt.$after(format.hexBuffer),\n  chainId: format.uInt.$default(0).$after(format.hexBuffer),\n  data: format.hex.$default('0x').$after(format.hexBuffer),\n  r: (format.bigUInt.$after(format.hexBuffer)).$or(undefined),\n  s: (format.bigUInt.$after(format.hexBuffer)).$or(undefined),\n  v: (format.uInt.$after(format.hexBuffer)).$or(undefined),\n}, {\n  strict: true,\n  pick: true,\n  name: 'format.signTx',\n});\n\ncfxFormat.sign1559Tx = format({\n  nonce: format.bigUInt.$after(format.hexBuffer),\n  maxPriorityFeePerGas: format.bigUInt.$after(format.hexBuffer),\n  maxFeePerGas: format.bigUInt.$after(format.hexBuffer),\n  gas: format.bigUInt.$after(format.hexBuffer),\n  to: cfxFormat.transactionToAddress,\n  value: format.bigUInt.$default(0).$after(format.hexBuffer),\n  storageLimit: format.bigUInt.$after(format.hexBuffer),\n  epochHeight: format.bigUInt.$after(format.hexBuffer),\n  chainId: format.uInt.$default(0).$after(format.hexBuffer),\n  data: format.hex.$default('0x').$after(format.hexBuffer),\n  // accessList: format.any.$default([]),\n  r: (format.bigUInt.$after(format.hexBuffer)).$or(undefined),\n  s: (format.bigUInt.$after(format.hexBuffer)).$or(undefined),\n  v: (format.uInt.$after(format.hexBuffer)).$or(undefined),\n}, {\n  strict: true,\n  pick: true,\n  name: 'format.sign1559Tx',\n});\n\n/**\n * @typedef {Object} CallRequest\n * @property {string} [from]\n * @property {string} [to]\n * @property {string} [data]\n * @property {number} [value]\n * @property {number} [gas]\n * @property {number} [gasPrice]\n * @property {number} [nonce]\n * @property {number} [storageLimit]\n * @property {number} [epochHeight]\n * @property {number} [chainId]\n */\ncfxFormat.callTx = format({\n  type: format.bigUIntHex.$or(null),\n  from: format.address,\n  nonce: format.bigUIntHex,\n  gasPrice: format.bigUIntHex.$or(null),\n  maxPriorityFeePerGas: format.bigUIntHex.$or(null),\n  maxFeePerGas: format.bigUIntHex.$or(null),\n  gas: format.bigUIntHex,\n  to: format.address.$or(null),\n  value: format.bigUIntHex,\n  storageLimit: format.bigUIntHex,\n  epochHeight: format.bigUIntHex,\n  chainId: format.bigUIntHex,\n  data: format.hex,\n  accessList: format([cfxFormat.AccessListEntry]).$or(null),\n}, {\n  pick: true,\n  name: 'format.callTx',\n});\n\n// configure callTx formatter with networkId and toHexAddress\ncfxFormat.callTxAdvance = function (networkId, toHexAddress = false, useVerboseAddress = false) {\n  const fromatAddress = toHexAddress ? format.hexAddress : format.netAddress(networkId, useVerboseAddress);\n  return format({\n    type: format.bigUIntHex.$or(null),\n    from: fromatAddress,\n    nonce: format.bigUIntHex,\n    gasPrice: format.bigUIntHex.$or(null),\n    maxPriorityFeePerGas: format.bigUIntHex.$or(null),\n    maxFeePerGas: format.bigUIntHex.$or(null),\n    gas: format.bigUIntHex,\n    to: fromatAddress.$or(null),\n    value: format.bigUIntHex,\n    storageLimit: format.bigUIntHex,\n    epochHeight: format.bigUIntHex,\n    chainId: format.bigUIntHex,\n    data: format.hex,\n    accessList: format([cfxFormat.AccessListEntry.$or(null)]).$or(null),\n  }, {\n    pick: true,\n    name: 'format.callTxAdvance',\n  });\n};\n\n// ----------------------------- parse rpc returned ---------------------------\n/**\n * @typedef {Object} ChainStatus\n * @property {string} bestHash\n * @property {number} networkId\n * @property {number} chainId\n * @property {number} epochNumber\n * @property {number} blockNumber\n * @property {number} pendingTxNumber\n * @property {number} latestCheckpoint\n * @property {number} latestConfirmed\n * @property {number} latestFinalized\n * @property {number} latestState\n * @property {number} ethereumSpaceChainId\n */\ncfxFormat.status = format({\n  networkId: format.uInt,\n  chainId: format.uInt,\n  epochNumber: format.uInt,\n  blockNumber: format.uInt,\n  pendingTxNumber: format.uInt,\n  latestCheckpoint: format.uInt.$or(null),\n  latestConfirmed: format.uInt.$or(null),\n  latestFinalized: format.uInt.$or(null),\n  latestState: format.uInt.$or(null),\n  ethereumSpaceChainId: format.uInt.$or(null),\n}, {\n  name: 'format.status',\n});\n\n/**\n * @typedef {Object} EstimateResult\n * @property {number} gasUsed\n * @property {number} gasLimit\n * @property {number} storageCollateralized\n */\ncfxFormat.estimate = format({\n  gasUsed: format.bigUInt,\n  gasLimit: format.bigUInt,\n  storageCollateralized: format.bigUInt,\n}, {\n  name: 'format.estimate',\n});\n\n/**\n * @typedef {Object} Transaction - Transaction\n * @prop {number} type - the type of the transaction. 0 for legacy transaction, 1 for 2930 transaction, 2 for EIP-1559 transaction.\n * @prop {string} [blockHash=null] - hash of the block where this transaction was in and got executed. null when the transaction is pending.\n * @prop {number} chainId - the chain ID specified by the sender.\n * @prop {string} [contractCreated=null] - address of the contract created. null when it is not a contract deployment transaction.\n * @prop {string} data - the data sent along with the transaction.\n * @prop {number} epochHeight - the epoch proposed by the sender. Note that this is NOT the epoch of the block containing this transaction.\n * @prop {string} from - address of the sender.\n * @prop {number} gas - the gas limit specified by the sender.\n * @prop {number} gasPrice - the gas price specified by the sender.\n * @prop {number} maxPriorityFeePerGas - the maxPriorityFeePerGas specified by the sender.\n * @prop {number} maxFeePerGas - the maxFeePerGas specified by the sender.\n * @prop {string} hash - hash of the transaction.\n * @prop {number} nonce - the nonce specified by the sender.\n * @prop {string} [to=null] - address of the receiver. null when it is a contract creation transaction.\n * @prop {number} value - the value sent along with the transaction.\n * @prop {number} storageLimit - the storage limit specified by the sender.\n * @prop {string} r - ECDSA signature r\n * @prop {string} s - ECDSA signature s\n * @prop {number} v - ECDSA recovery v\n * @prop {number} yParity - The parity (0 for even, 1 for odd) of the y-value of a secp256k1 signature.\n * @prop {number} [transactionIndex=null] - the transaction's position in the block. null when the transaction is pending.\n * @prop {number} [status=null] - 0 for success, 1 if an error occurred, 2 for skiped, null when the transaction is skipped or not packed.\n * @prop {array} [accessList]\n */\ncfxFormat.transaction = format({\n  type: format.uInt.$or(null),\n  nonce: format.bigUInt,\n  gasPrice: format.bigUInt.$or(null),\n  maxPriorityFeePerGas: format.bigUInt.$or(null),\n  maxFeePerGas: format.bigUInt.$or(null),\n  gas: format.bigUInt,\n  value: format.bigUInt,\n  storageLimit: format.bigUInt,\n  epochHeight: format.bigUInt,\n  chainId: format.uInt,\n  v: format.uInt,\n  yParity: format.uInt.$or(null),\n  status: format.uInt.$or(null),\n  transactionIndex: format.uInt.$or(null),\n  accessList: format([cfxFormat.AccessListEntry]).$or(null),\n}, {\n  name: 'format.transaction',\n});\n\n/**\n * @typedef {Object} Block - Block\n * @prop {boolean} adaptive - true if the weight of the block is adaptive under the GHAST rule.\n * @prop {number} blame - if 0, then this block does not blame any blocks on its parent path. If it is n > 0, then this block blames its n predecessors on its parent path, e.g. when n = 1, then the block blames its parent but not its parent's parent.\n * @prop {number} baseFeePerGas - the base fee per gas for this block.\n * @prop {string} deferredLogsBloomHash - the hash of the logs bloom after deferred execution at the block's epoch (assuming it is the pivot block).\n * @prop {string} deferredReceiptsRoot - the Merkle root of the receipts after deferred execution at the block's epoch (assuming it is the pivot block).\n * @prop {string} deferredStateRoot - the hash of the state trie root triplet after deferred execution at the block's epoch (assuming it is the pivot block).\n * @prop {number} difficulty - the PoW difficulty of this block.\n * @prop {number} [epochNumber] - the number of the epoch containing this block in the node's view of the ledger. null when the epoch number is not determined (e.g. the block is not in the best block's past set).\n * @prop {number} gasLimit - the maximum gas allowed in this block.\n * @prop {number} [gasUsed=null] - the total gas used in this block. null when the block is pending.\n * @prop {string} hash - hash of the block.\n * @prop {number} height - the height of the block.\n * @prop {string} miner - the address of the beneficiary to whom the mining rewards were given.\n * @prop {number} nonce - the nonce of the block.\n * @prop {string} parentHash - hash of the parent block.\n * @prop {string} [powQuality] - the PoW quality. null when the block is pending.\n * @prop {string[]} refereeHashes - array of referee block hashes.\n * @prop {number} size - the size of this block in bytes, excluding the block header.\n * @prop {number} timestamp - the timestamp of the block.\n * @prop {string|Transaction[]} transactions - array of transaction objects, or 32-byte transaction hashes, depending on the second parameter.\n * @prop {string} transactionsRoot - the Merkle root of the transactions in this block.\n * @prop {string[]} custom - customized information. Note from v2.0 custom's type has changed from array of number array to array of hex string.\n * @prop {number} blockNumber - the number of this block's total order in the tree-graph. null when the order is not determined. Added from Conflux-rust v1.1.5\n * @prop {string} posReference - 32 Bytes - the hash of the PoS newest committed block. Added from Conflux-rust v2.0.0\n */\ncfxFormat.block = format({\n  baseFeePerGas: format.bigUInt.$or(null),\n  epochNumber: format.uInt.$or(null),\n  blockNumber: format.uInt.$or(null),\n  blame: format.uInt,\n  height: format.uInt,\n  size: format.uInt,\n  timestamp: format.uInt,\n  gasLimit: format.bigUInt,\n  gasUsed: format.bigUInt.$or(null).$or(undefined), // XXX: undefined before main net upgrade\n  difficulty: format.bigUInt,\n  transactions: [(cfxFormat.transaction).$or(format.transactionHash)],\n}, {\n  name: 'format.block',\n});\n\n/**\n * @typedef {Object} TransactionReceipt - TransactionReceipt\n * @prop {number} type - the type of the transaction. 0 for legacy transaction, 1 for 2930 transaction, 2 for EIP-1559 transaction.\n * @prop {string} blockHash - hash of the block where this transaction was in and got executed.\n * @prop {string} transactionHash - hash of the transaction.\n * @prop {number} index - transaction index within the block.\n * @prop {number} effectiveGasPrice - the effective gas price of the transaction.\n * @prop {number} burntGasFee - the burnt gas fee of the transaction.\n * @prop {number} epochNumber - the number of the epoch containing this transaction in the node's view of the ledger.\n * @prop {string} from\n * @prop {string} [to=null] - address of the receiver. null when it is a contract deployment transaction.\n * @prop {number} gasUsed - gas used for executing the transaction.\n * @prop {number} gasFee - gas charged to the sender's account. If the provided gas (gas limit) is larger than the gas used, at most 1/4 of it is refunded.\n * @prop {boolean} gasCoveredBySponsor - true if this transaction's gas fee was covered by the sponsor.\n * @prop {number} storageCollateralized - the amount of storage collateral this transaction required.\n * @prop {boolean} storageCoveredBySponsor - true if this transaction's storage collateral was covered by the sponsor.\n * @prop {object[]} storageReleased - array of storage change objects, each specifying an address and the corresponding amount of storage collateral released, e.g., [{ 'address': 'CFX:TYPE.USER:AARC9ABYCUE0HHZGYRR53M6CXEDGCCRMMYYBJGH4XG', 'collaterals': '0x280' }]\n * @prop {string} [contractCreated=null] - address of the contract created. null when it is not a contract deployment transaction.\n * @prop {string} stateRoot - hash of the state root after the execution of the corresponding block. 0 if the state root is not available.\n * @prop {number} outcomeStatus - the outcome status code. 0x0 means success. 0x1 means failed. 0x2 means skipped\n * @prop {string} logsBloom - bloom filter for light clients to quickly retrieve related logs.\n * @prop {Log[]} logs - array of log objects that this transaction generated\n * @prop {string} [txExecErrorMsg] - the error message of transaction execution. null when the transaction is succeeded.\n */\ncfxFormat.receipt = format({\n  type: format.uInt.$or(null),\n  index: format.uInt,\n  epochNumber: format.uInt,\n  outcomeStatus: format.uInt.$or(null),\n  gasUsed: format.bigUInt,\n  effectiveGasPrice: format.bigUInt.$or(null),\n  burntGasFee: format.bigUInt.$or(null),\n  gasFee: format.bigUInt,\n  storageCollateralized: format.bigUInt,\n  storageReleased: [{\n    collaterals: format.bigUInt,\n  }],\n}, {\n  name: 'format.receipt',\n});\n\ncfxFormat.epochReceipts = format([[cfxFormat.receipt]]).$or(null);\n\n/**\n * @typedef {Object} Log - Log\n * @prop {string} address\n * @prop {string[]} topics\n * @prop {string} data\n * @prop {string} blockHash\n * @prop {number} epochNumber\n * @prop {string} transactionHash\n * @prop {number} transactionIndex\n * @prop {number} logIndex\n * @prop {number} transactionLogIndex\n */\ncfxFormat.log = format({\n  epochNumber: format.uInt,\n  logIndex: format.uInt,\n  transactionIndex: format.uInt,\n  transactionLogIndex: format.uInt,\n}, {\n  name: 'format.log',\n});\n\ncfxFormat.logs = format([cfxFormat.log]);\n\n/**\n * @typedef {Object} SupplyInfo\n * @property {BigInt} totalCirculating\n * @property {BigInt} totalIssued\n * @property {BigInt} totalStaking\n * @property {BigInt} totalCollateral\n * @property {BigInt} [totalEspaceTokens]\n */\ncfxFormat.supplyInfo = format({\n  totalCirculating: format.bigUInt,\n  totalIssued: format.bigUInt,\n  totalStaking: format.bigUInt,\n  totalCollateral: format.bigUInt,\n  totalEspaceTokens: format.bigUInt.$or(null),\n}, {\n  name: 'format.supplyInfo',\n});\n\n/**\n * @typedef {Object} SponsorInfo\n * @property {BigInt} sponsorBalanceForCollateral\n * @property {BigInt} sponsorBalanceForGas\n * @property {BigInt} sponsorGasBound\n * @property {BigInt} usedStoragePoints\n * @property {BigInt} availableStoragePoints\n * @property {string} sponsorForCollateral\n * @property {string} sponsorForGas\n */\ncfxFormat.sponsorInfo = format({\n  sponsorBalanceForCollateral: format.bigUInt,\n  sponsorBalanceForGas: format.bigUInt,\n  sponsorGasBound: format.bigUInt,\n  usedStoragePoints: format.bigUInt.$or(null),\n  availableStoragePoints: format.bigUInt.$or(null),\n}, {\n  name: 'format.sponsorInfo',\n});\n\n/**\n * @typedef {Object} RewardInfo\n * @property {BigInt} baseReward\n * @property {BigInt} totalReward\n * @property {BigInt} txFee\n */\ncfxFormat.rewardInfo = format([\n  {\n    baseReward: format.bigUInt,\n    totalReward: format.bigUInt,\n    txFee: format.bigUInt,\n  },\n]);\n\n/**\n * @typedef {Object} Vote\n * @prop {BigInt} amount\n * @prop {BigInt} unlockBlockNumber\n */\ncfxFormat.voteList = format([\n  {\n    amount: format.bigUInt,\n    unlockBlockNumber: format.bigUInt,\n  },\n]);\n\n/**\n * @typedef {Object} Deposit\n * @prop {BigInt} accumulatedInterestRate\n * @prop {BigInt} amount\n * @prop {BigInt} depositTime\n */\ncfxFormat.depositList = format([\n  {\n    amount: format.bigUInt,\n    accumulatedInterestRate: format.bigUInt,\n  },\n]);\n\n// ---------------------------- parse subscribe event -------------------------\n/**\n * @typedef {Object} BlockHead - BlockHead\n * @prop {boolean} adaptive - true if the weight of the block is adaptive under the GHAST rule.\n * @prop {number} blame - if 0, then this block does not blame any blocks on its parent path. If it is n > 0, then this block blames its n predecessors on its parent path, e.g. when n = 1, then the block blames its parent but not its parent's parent.\n * @prop {string} deferredLogsBloomHash - the hash of the logs bloom after deferred execution at the block's epoch (assuming it is the pivot block).\n * @prop {string} deferredReceiptsRoot - the Merkle root of the receipts after deferred execution at the block's epoch (assuming it is the pivot block).\n * @prop {string} deferredStateRoot - the hash of the state trie root triplet after deferred execution at the block's epoch (assuming it is the pivot block).\n * @prop {number} difficulty - the PoW difficulty of this block.\n * @prop {number} [epochNumber] - the number of the epoch containing this block in the node's view of the ledger. null when the epoch number is not determined (e.g. the block is not in the best block's past set).\n * @prop {number} gasLimit - the maximum gas allowed in this block.\n * @prop {string} hash - hash of the block.\n * @prop {number} height - the height of the block.\n * @prop {string} miner - the address of the beneficiary to whom the mining rewards were given.\n * @prop {number} nonce - the nonce of the block.\n * @prop {string} parentHash - hash of the parent block.\n * @prop {string} [powQuality] - the PoW quality. null when the block is pending.\n * @prop {string[]} refereeHashes - array of referee block hashes.\n * @prop {number} timestamp - the timestamp of the block.\n * @prop {string} transactionsRoot - the Merkle root of the transactions in this block.\n * @prop {number} blockNumber - the number of this block's total order in the tree-graph. null when the order is not determined. Added from Conflux-rust v1.1.5\n * @prop {string} posReference - 32 Bytes - the hash of the PoS newest committed block. Added from Conflux-rust v2.0.0\n */\ncfxFormat.head = format({\n  baseFeePerGas: format.bigUInt.$or(null),\n  difficulty: format.bigUInt,\n  epochNumber: format.uInt.$or(null),\n  gasLimit: format.bigUInt,\n  height: format.uInt,\n  timestamp: format.uInt,\n}, {\n  name: 'format.head',\n});\n\n/**\n * @typedef {object} RevertNotification\n * @prop {number} revertTo\n */\ncfxFormat.revert = format({\n  revertTo: format.uInt,\n}, {\n  name: 'format.revert',\n});\n\n/**\n * @typedef {string|number} epochNumber\n */\ncfxFormat.epoch = format({\n  epochNumber: format.uInt,\n}, {\n  name: 'format.epoch',\n});\n\n// --------------------------- accountPendingInfo & transactions --------------\n/**\n * @typedef {Object} AccountPendingInfo\n * @prop {number} localNonce\n * @prop {number} pendingCount\n * @prop {number} pendingNonce\n */\ncfxFormat.accountPendingInfo = format({\n  localNonce: format.uInt,\n  pendingCount: format.uInt,\n  pendingNonce: format.uInt,\n}, {\n  name: 'format.accountPendingInfo',\n});\n\n/**\n * @typedef {Object} AccountPendingTransactions\n * @prop {number} pendingCount\n * @prop {Transaction[]} pendingTransactions\n * @prop {string|object} firstTxstatus\n */\ncfxFormat.accountPendingTransactions = format({\n  pendingCount: format.bigUInt,\n  pendingTransactions: [cfxFormat.transaction],\n}, {\n  name: 'format.accountPendingTransactions',\n});\n\n/**\n * @typedef {Object} PoSEconomics\n * @property {BigInt} distributablePosInterest\n * @property {BigInt} lastDistributeBlock\n * @property {BigInt} totalPosStakingTokens\n */\ncfxFormat.posEconomics = format({\n  distributablePosInterest: format.bigUInt,\n  lastDistributeBlock: format.bigUInt,\n  totalPosStakingTokens: format.bigUInt,\n}, {\n  name: 'format.posEconomics',\n});\n\n/**\n * @typedef {Object} VoteParamsInfo\n * @property {BigInt} powBaseReward PoW block base reward\n * @property {BigInt} interestRate PoS interest rate\n */\ncfxFormat.voteParamsInfo = format({\n  powBaseReward: format.bigUInt,\n  interestRate: format.bigUInt,\n  baseFeeShareProp: format.bigUInt,\n  storagePointProp: format.bigUInt,\n}, {\n  name: 'format.voteParamsInfo',\n});\n\n/**\n * @typedef {Object} CollateralInfo\n * @property {BigInt} convertedStoragePoints Total converted storage points\n * @property {BigInt} totalStorageTokens Total collateral CFX\n * @property {BigInt} usedStoragePoints Current using storage points\n */\ncfxFormat.collateralInfo = format({\n  convertedStoragePoints: format.bigUInt,\n  totalStorageTokens: format.bigUInt,\n  usedStoragePoints: format.bigUInt,\n});\n\ncfxFormat.wrapTransaction = format({\n  nativeTransaction: cfxFormat.transaction,\n  ethTransaction: format.any,\n});\n\n/**\n * @typedef {Object} FeeHistory\n * @property {BigInt} oldestEpoch Lowest epoch number of returned range.\n * @property {number[]} gasUsedRatio An array of block gas used ratios. These are calculated as the ratio of tx gasLimit sum and block gasLimit.\n * @property {BigInt[]} baseFeePerGas An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-1559 blocks.\n * @property {BigInt[][]} reward A two-dimensional array of effective priority fees per gas at the requested block percentiles.\n */\ncfxFormat.feeHistory = format({\n  oldestEpoch: format.bigUInt,\n  baseFeePerGas: [format.bigUInt],\n  reward: [[format.bigUInt]],\n  gasUsedRatio: format.any,\n});\n\nmodule.exports = cfxFormat;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/rpc/types/formatter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/rpc/types/index.js":
/*!************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/rpc/types/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.Account = __webpack_require__(/*! ./Account */ \"(ssr)/./node_modules/js-conflux-sdk/src/rpc/types/Account.js\");\nexports.formatters = __webpack_require__(/*! ./formatter */ \"(ssr)/./node_modules/js-conflux-sdk/src/rpc/types/formatter.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3JwYy90eXBlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxzSEFBc0M7QUFDdEMsNkhBQTJDIiwic291cmNlcyI6WyIvVXNlcnMvdmlrYXNoeWFkYXYvRGV2ZWxvcGVyL0FsbGdpdEZpbGVzL0NvbmZsdXgtVHhuLXZpc3VhbGl6ZXIvbm9kZV9tb2R1bGVzL2pzLWNvbmZsdXgtc2RrL3NyYy9ycGMvdHlwZXMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5BY2NvdW50ID0gcmVxdWlyZSgnLi9BY2NvdW50Jyk7XG5leHBvcnRzLmZvcm1hdHRlcnMgPSByZXF1aXJlKCcuL2Zvcm1hdHRlcicpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/rpc/types/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/subscribe/PendingTransaction.js":
/*!*************************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/subscribe/PendingTransaction.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { sleep } = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\n\nclass PendingTransaction {\n  /**\n   * PendingTransaction constructor.\n   * @param {import('../Conflux').Conflux} conflux\n   * @param {function} func\n   * @param {array} args\n   * @return {PendingTransaction}\n   */\n  constructor(conflux, func, args) {\n    this.conflux = conflux;\n    this.func = func;\n    this.args = args;\n    this.promise = undefined;\n  }\n\n  async then(resolve, reject) {\n    this.promise = this.promise || this.func(...this.args);\n\n    try {\n      return resolve(await this.promise);\n    } catch (e) {\n      return reject(e);\n    }\n  }\n\n  async catch(callback) {\n    return this.then(v => v, callback);\n  }\n\n  async finally(callback) {\n    try {\n      return await this;\n    } finally {\n      await callback();\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  /**\n   * Get transaction by hash.\n   *\n   * @param {object} [options]\n   * @param {number} [options.delay=0] - Defer execute after `delay` ms.\n   * @return {Promise<import('../rpc/types/formatter').Transaction|null>} See [Conflux.getTransactionByHash](#Conflux.js/getTransactionByHash)\n   */\n  async get({ delay = 0 } = {}) {\n    await sleep(delay);\n    const transactionHash = await this;\n    return this.conflux.getTransactionByHash(transactionHash);\n  }\n\n  /**\n   * Async wait till transaction been mined.\n   *\n   * - blockHash !== null\n   *\n   * @param {object} [options]\n   * @param {number} [options.delta=1000] - Loop transaction interval in ms.\n   * @param {number} [options.timeout=60*1000] - Loop timeout in ms.\n   * @return {Promise<import('../rpc/types/formatter').Transaction>} See [Conflux.getTransactionByHash](#Conflux.js/getTransactionByHash)\n   */\n  async mined({ delta = 1000, timeout = 60 * 1000 } = {}) {\n    const startTime = Date.now();\n\n    const transactionHash = await this;\n    for (let lastTime = startTime; lastTime < startTime + timeout; lastTime = Date.now()) {\n      const transaction = await this.get();\n      if (transaction && transaction.blockHash) {\n        return transaction;\n      }\n\n      await sleep(lastTime + delta - Date.now());\n    }\n\n    throw new Error(`wait transaction \"${transactionHash}\" mined timeout after ${Date.now() - startTime} ms`);\n  }\n\n  /**\n   * Async wait till transaction been executed.\n   *\n   * - mined\n   * - receipt !== null\n   * - receipt.outcomeStatus === 0\n   *\n   * @param {object} [options]\n   * @param {number} [options.delta=1000] - Loop transaction interval in ms.\n   * @param {number} [options.timeout=5*60*1000] - Loop timeout in ms.\n   * @return {Promise<import('../rpc/types/formatter').TransactionReceipt>} See [Conflux.getTransactionReceipt](#Conflux.js/getTransactionReceipt)\n   */\n  async executed({ delta = 1000, timeout = 5 * 60 * 1000 } = {}) {\n    const startTime = Date.now();\n\n    const transactionHash = await this;\n    for (let lastTime = startTime; lastTime < startTime + timeout; lastTime = Date.now()) {\n      const receipt = await this.conflux.getTransactionReceipt(transactionHash);\n      if (receipt) {\n        if (receipt.outcomeStatus !== 0) {\n          throw new Error(`transaction \"${transactionHash}\" executed failed, outcomeStatus ${receipt.outcomeStatus}`);\n        }\n        return receipt;\n      }\n\n      await sleep(lastTime + delta - Date.now());\n    }\n\n    throw new Error(`wait transaction \"${transactionHash}\" executed timeout after ${Date.now() - startTime} ms`);\n  }\n\n  /**\n   * Async wait till transaction been confirmed.\n   *\n   * - executed\n   * - transaction block risk coefficient < threshold\n   *\n   * @param {object} [options]\n   * @param {number} [options.delta=1000] - Loop transaction interval in ms.\n   * @param {number} [options.timeout=30*60*1000] - Loop timeout in ms.\n   * @param {number} [options.threshold=1e-8] - Number in range (0,1)\n   * @return {Promise<import('../rpc/types/formatter').TransactionReceipt>} See [Conflux.getTransactionReceipt](#Conflux.js/getTransactionReceipt)\n   */\n  async confirmed({ delta = 1000, timeout = 30 * 60 * 1000, threshold = 1e-8 } = {}) {\n    const startTime = Date.now();\n\n    const transactionHash = await this;\n    for (let lastTime = startTime; lastTime < startTime + timeout; lastTime = Date.now()) {\n      const receipt = await this.executed({ delta, timeout }); // must get receipt every time, cause blockHash might change\n      const risk = await this.conflux.getConfirmationRiskByHash(receipt.blockHash);\n      if (risk <= threshold) {\n        return receipt;\n      }\n\n      await sleep(lastTime + delta - Date.now());\n    }\n\n    throw new Error(`wait transaction \"${transactionHash}\" confirmed timeout after ${Date.now() - startTime} ms`);\n  }\n}\n\nmodule.exports = PendingTransaction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/subscribe/PendingTransaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/subscribe/Subscription.js":
/*!*******************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/subscribe/Subscription.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const EventEmitter = __webpack_require__(/*! events */ \"events\");\n\n/**\n * Subscription event emitter\n */\nclass Subscription extends EventEmitter {\n  constructor(id) {\n    super();\n    this.id = id;\n  }\n\n  toString() {\n    return this.id;\n  }\n}\n\nmodule.exports = Subscription;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3N1YnNjcmliZS9TdWJzY3JpcHRpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEscUJBQXFCLG1CQUFPLENBQUMsc0JBQVE7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWthc2h5YWRhdi9EZXZlbG9wZXIvQWxsZ2l0RmlsZXMvQ29uZmx1eC1UeG4tdmlzdWFsaXplci9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3N1YnNjcmliZS9TdWJzY3JpcHRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5cbi8qKlxuICogU3Vic2NyaXB0aW9uIGV2ZW50IGVtaXR0ZXJcbiAqL1xuY2xhc3MgU3Vic2NyaXB0aW9uIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3IoaWQpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmlkO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3Vic2NyaXB0aW9uO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/subscribe/Subscription.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/util/HexStream.js":
/*!***********************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/util/HexStream.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { assert } = __webpack_require__(/*! ./index */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\nconst { WORD_CHARS } = __webpack_require__(/*! ../CONST */ \"(ssr)/./node_modules/js-conflux-sdk/src/CONST.js\");\n\nclass HexStream {\n  constructor(hex) {\n    this.string = hex;\n    this.index = hex.startsWith('0x') ? 2 : 0;\n  }\n\n  eof() {\n    return this.index >= this.string.length;\n  }\n\n  read(length, alignLeft = false) {\n    assert(Number.isInteger(length) && 0 <= length, {\n      message: 'invalid length',\n      expect: 'integer && >= 0',\n      got: length,\n      stream: this,\n    });\n\n    const size = Math.ceil(length / WORD_CHARS) * WORD_CHARS;\n    const string = alignLeft\n      ? this.string.substr(this.index, length)\n      : this.string.substr(this.index + (size - length), length);\n\n    assert(string.length === length, {\n      message: 'length not match',\n      expect: length,\n      got: string.length,\n      stream: this,\n    });\n\n    this.index += size;\n    return string;\n  }\n}\n\nmodule.exports = HexStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3V0aWwvSGV4U3RyZWFtLmpzIiwibWFwcGluZ3MiOiJBQUFBLFFBQVEsU0FBUyxFQUFFLG1CQUFPLENBQUMsc0VBQVM7QUFDcEMsUUFBUSxhQUFhLEVBQUUsbUJBQU8sQ0FBQyxrRUFBVTs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL3Zpa2FzaHlhZGF2L0RldmVsb3Blci9BbGxnaXRGaWxlcy9Db25mbHV4LVR4bi12aXN1YWxpemVyL25vZGVfbW9kdWxlcy9qcy1jb25mbHV4LXNkay9zcmMvdXRpbC9IZXhTdHJlYW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBhc3NlcnQgfSA9IHJlcXVpcmUoJy4vaW5kZXgnKTtcbmNvbnN0IHsgV09SRF9DSEFSUyB9ID0gcmVxdWlyZSgnLi4vQ09OU1QnKTtcblxuY2xhc3MgSGV4U3RyZWFtIHtcbiAgY29uc3RydWN0b3IoaGV4KSB7XG4gICAgdGhpcy5zdHJpbmcgPSBoZXg7XG4gICAgdGhpcy5pbmRleCA9IGhleC5zdGFydHNXaXRoKCcweCcpID8gMiA6IDA7XG4gIH1cblxuICBlb2YoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5kZXggPj0gdGhpcy5zdHJpbmcubGVuZ3RoO1xuICB9XG5cbiAgcmVhZChsZW5ndGgsIGFsaWduTGVmdCA9IGZhbHNlKSB7XG4gICAgYXNzZXJ0KE51bWJlci5pc0ludGVnZXIobGVuZ3RoKSAmJiAwIDw9IGxlbmd0aCwge1xuICAgICAgbWVzc2FnZTogJ2ludmFsaWQgbGVuZ3RoJyxcbiAgICAgIGV4cGVjdDogJ2ludGVnZXIgJiYgPj0gMCcsXG4gICAgICBnb3Q6IGxlbmd0aCxcbiAgICAgIHN0cmVhbTogdGhpcyxcbiAgICB9KTtcblxuICAgIGNvbnN0IHNpemUgPSBNYXRoLmNlaWwobGVuZ3RoIC8gV09SRF9DSEFSUykgKiBXT1JEX0NIQVJTO1xuICAgIGNvbnN0IHN0cmluZyA9IGFsaWduTGVmdFxuICAgICAgPyB0aGlzLnN0cmluZy5zdWJzdHIodGhpcy5pbmRleCwgbGVuZ3RoKVxuICAgICAgOiB0aGlzLnN0cmluZy5zdWJzdHIodGhpcy5pbmRleCArIChzaXplIC0gbGVuZ3RoKSwgbGVuZ3RoKTtcblxuICAgIGFzc2VydChzdHJpbmcubGVuZ3RoID09PSBsZW5ndGgsIHtcbiAgICAgIG1lc3NhZ2U6ICdsZW5ndGggbm90IG1hdGNoJyxcbiAgICAgIGV4cGVjdDogbGVuZ3RoLFxuICAgICAgZ290OiBzdHJpbmcubGVuZ3RoLFxuICAgICAgc3RyZWFtOiB0aGlzLFxuICAgIH0pO1xuXG4gICAgdGhpcy5pbmRleCArPSBzaXplO1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIZXhTdHJlYW07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/util/HexStream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/util/address.js":
/*!*********************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/util/address.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {\n  encode,\n  decode,\n  isValidCfxAddress,\n  verifyCfxAddress,\n  hasNetworkPrefix,\n  simplifyCfxAddress,\n  shortenCfxAddress,\n  isZeroAddress,\n  isInternalContractAddress,\n  isValidHexAddress,\n  isValidCfxHexAddress,\n} = __webpack_require__(/*! @conflux-dev/conflux-address-js */ \"(ssr)/./node_modules/@conflux-dev/conflux-address-js/lib/index.js\");\nconst { checksumAddress, keccak256 } = __webpack_require__(/*! ./sign */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/sign.js\");\nconst { ADDRESS_TYPES } = __webpack_require__(/*! ../CONST */ \"(ssr)/./node_modules/js-conflux-sdk/src/CONST.js\");\n\n/**\n * encode hex40 address to base32 address\n * @function encodeCfxAddress\n * @param {string|Buffer} address - hex40 address\n * @param {number} numberId - networkId\n * @param {boolean} [verbose] - if true, return verbose address\n * @return {string} base32 string address\n */\n\n/**\n * decode base32 address to hex40 address\n * @function decodeCfxAddress\n * @param {string} address - base32 string\n * @return {object}\n */\n\n/**\n * check if the address is valid\n * @function isValidCfxAddress\n * @param {string} address - base32 string\n * @return {boolean}\n */\n\n/**\n * verify base32 address if pass return true if not throw error\n * @function verifyCfxAddress\n * @param {string} address - base32 string\n * @return {boolean}\n */\n\n/**\n * check if the address has network prefix\n * @function hasNetworkPrefix\n * @param {string} address - base32 string\n * @return {boolean}\n */\n\n/**\n * simplify base32 address to non verbose address\n * @function simplifyCfxAddress\n * @param {string} address - base32 string\n * @return {string} return a non verbose address\n */\n\n/**\n * @function shortenCfxAddress\n * @param {string} address - base32 string\n * @return {string} Return a short address\n */\n\n/**\n * @function isZeroAddress\n * @param {string} address - base32 string\n * @return {boolean}\n */\n\n/**\n * @function isInternalContractAddress\n * @param {string} address - base32 string\n * @return {boolean}\n */\n\n/**\n * @function isValidHexAddress\n * @param {string} address - hex string\n * @return {boolean}\n */\n\n/**\n * check if the address is valid conflux hex address\n * @function isValidCfxHexAddress\n * @param {string} address - hex string\n * @return {boolean}\n */\n\n/**\n * Makes a ethereum checksum address\n *\n * > Note: support [EIP-55](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md)\n * > Note: not support [RSKIP60](https://github.com/rsksmart/RSKIPs/blob/master/IPs/RSKIP60.md) yet\n *\n * @param {string} address - Hex string\n * @return {string}\n *\n * @example\n * > ethChecksumAddress('0x1b716c51381e76900ebaa7999a488511a4e1fd0a')\n \"0x1B716c51381e76900EBAA7999A488511A4E1fD0a\"\n */\nfunction ethChecksumAddress(address) {\n  return checksumAddress(address);\n}\n\n/**\n * Convert an ethereum address to conflux hex address by replace it's first letter to 1\n * @param {string} address\n * @return {string}\n */\nfunction ethAddressToCfxAddress(address) {\n  return `0x1${address.toLowerCase().slice(3)}`;\n}\n\n/**\n * Calculate CFX space address's mapped EVM address\n * @param {string} address - base32 string\n * @returns {string}\n *\n * @example\n * > cfxMappedEVMSpaceAddress(cfx:aak2rra2njvd77ezwjvx04kkds9fzagfe6ku8scz91)\n * \"0x12Bf6283CcF8Ad6ffA63f7Da63EDc217228d839A\"\n */\nfunction cfxMappedEVMSpaceAddress(address) {\n  const { hexAddress } = decode(address);\n  const mappedBuf = keccak256(hexAddress).slice(-20);\n  return checksumAddress(`0x${mappedBuf.toString('hex')}`);\n}\n\nmodule.exports = {\n  encodeCfxAddress: encode,\n  decodeCfxAddress: decode,\n  ethChecksumAddress,\n  ethAddressToCfxAddress,\n  cfxMappedEVMSpaceAddress,\n  ADDRESS_TYPES,\n  isValidCfxAddress,\n  verifyCfxAddress,\n  hasNetworkPrefix,\n  simplifyCfxAddress,\n  shortenCfxAddress,\n  isZeroAddress,\n  isInternalContractAddress,\n  isValidHexAddress,\n  isValidCfxHexAddress,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3V0aWwvYWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQywwR0FBaUM7QUFDN0MsUUFBUSw2QkFBNkIsRUFBRSxtQkFBTyxDQUFDLG9FQUFRO0FBQ3ZELFFBQVEsZ0JBQWdCLEVBQUUsbUJBQU8sQ0FBQyxrRUFBVTs7QUFFNUM7QUFDQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsWUFBWSxRQUFRO0FBQ3BCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksUUFBUTtBQUNwQjs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksUUFBUTtBQUNwQjs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNBO0FBQ0EsZUFBZSwrQkFBK0I7QUFDOUM7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxhQUFhO0FBQ3ZCO0FBQ0EsOEJBQThCLDBCQUEwQjtBQUN4RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmlrYXNoeWFkYXYvRGV2ZWxvcGVyL0FsbGdpdEZpbGVzL0NvbmZsdXgtVHhuLXZpc3VhbGl6ZXIvbm9kZV9tb2R1bGVzL2pzLWNvbmZsdXgtc2RrL3NyYy91dGlsL2FkZHJlc3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge1xuICBlbmNvZGUsXG4gIGRlY29kZSxcbiAgaXNWYWxpZENmeEFkZHJlc3MsXG4gIHZlcmlmeUNmeEFkZHJlc3MsXG4gIGhhc05ldHdvcmtQcmVmaXgsXG4gIHNpbXBsaWZ5Q2Z4QWRkcmVzcyxcbiAgc2hvcnRlbkNmeEFkZHJlc3MsXG4gIGlzWmVyb0FkZHJlc3MsXG4gIGlzSW50ZXJuYWxDb250cmFjdEFkZHJlc3MsXG4gIGlzVmFsaWRIZXhBZGRyZXNzLFxuICBpc1ZhbGlkQ2Z4SGV4QWRkcmVzcyxcbn0gPSByZXF1aXJlKCdAY29uZmx1eC1kZXYvY29uZmx1eC1hZGRyZXNzLWpzJyk7XG5jb25zdCB7IGNoZWNrc3VtQWRkcmVzcywga2VjY2FrMjU2IH0gPSByZXF1aXJlKCcuL3NpZ24nKTtcbmNvbnN0IHsgQUREUkVTU19UWVBFUyB9ID0gcmVxdWlyZSgnLi4vQ09OU1QnKTtcblxuLyoqXG4gKiBlbmNvZGUgaGV4NDAgYWRkcmVzcyB0byBiYXNlMzIgYWRkcmVzc1xuICogQGZ1bmN0aW9uIGVuY29kZUNmeEFkZHJlc3NcbiAqIEBwYXJhbSB7c3RyaW5nfEJ1ZmZlcn0gYWRkcmVzcyAtIGhleDQwIGFkZHJlc3NcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXJJZCAtIG5ldHdvcmtJZFxuICogQHBhcmFtIHtib29sZWFufSBbdmVyYm9zZV0gLSBpZiB0cnVlLCByZXR1cm4gdmVyYm9zZSBhZGRyZXNzXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGJhc2UzMiBzdHJpbmcgYWRkcmVzc1xuICovXG5cbi8qKlxuICogZGVjb2RlIGJhc2UzMiBhZGRyZXNzIHRvIGhleDQwIGFkZHJlc3NcbiAqIEBmdW5jdGlvbiBkZWNvZGVDZnhBZGRyZXNzXG4gKiBAcGFyYW0ge3N0cmluZ30gYWRkcmVzcyAtIGJhc2UzMiBzdHJpbmdcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuXG4vKipcbiAqIGNoZWNrIGlmIHRoZSBhZGRyZXNzIGlzIHZhbGlkXG4gKiBAZnVuY3Rpb24gaXNWYWxpZENmeEFkZHJlc3NcbiAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyZXNzIC0gYmFzZTMyIHN0cmluZ1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG4vKipcbiAqIHZlcmlmeSBiYXNlMzIgYWRkcmVzcyBpZiBwYXNzIHJldHVybiB0cnVlIGlmIG5vdCB0aHJvdyBlcnJvclxuICogQGZ1bmN0aW9uIHZlcmlmeUNmeEFkZHJlc3NcbiAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyZXNzIC0gYmFzZTMyIHN0cmluZ1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG4vKipcbiAqIGNoZWNrIGlmIHRoZSBhZGRyZXNzIGhhcyBuZXR3b3JrIHByZWZpeFxuICogQGZ1bmN0aW9uIGhhc05ldHdvcmtQcmVmaXhcbiAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyZXNzIC0gYmFzZTMyIHN0cmluZ1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG4vKipcbiAqIHNpbXBsaWZ5IGJhc2UzMiBhZGRyZXNzIHRvIG5vbiB2ZXJib3NlIGFkZHJlc3NcbiAqIEBmdW5jdGlvbiBzaW1wbGlmeUNmeEFkZHJlc3NcbiAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyZXNzIC0gYmFzZTMyIHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfSByZXR1cm4gYSBub24gdmVyYm9zZSBhZGRyZXNzXG4gKi9cblxuLyoqXG4gKiBAZnVuY3Rpb24gc2hvcnRlbkNmeEFkZHJlc3NcbiAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyZXNzIC0gYmFzZTMyIHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfSBSZXR1cm4gYSBzaG9ydCBhZGRyZXNzXG4gKi9cblxuLyoqXG4gKiBAZnVuY3Rpb24gaXNaZXJvQWRkcmVzc1xuICogQHBhcmFtIHtzdHJpbmd9IGFkZHJlc3MgLSBiYXNlMzIgc3RyaW5nXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5cbi8qKlxuICogQGZ1bmN0aW9uIGlzSW50ZXJuYWxDb250cmFjdEFkZHJlc3NcbiAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyZXNzIC0gYmFzZTMyIHN0cmluZ1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG4vKipcbiAqIEBmdW5jdGlvbiBpc1ZhbGlkSGV4QWRkcmVzc1xuICogQHBhcmFtIHtzdHJpbmd9IGFkZHJlc3MgLSBoZXggc3RyaW5nXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5cbi8qKlxuICogY2hlY2sgaWYgdGhlIGFkZHJlc3MgaXMgdmFsaWQgY29uZmx1eCBoZXggYWRkcmVzc1xuICogQGZ1bmN0aW9uIGlzVmFsaWRDZnhIZXhBZGRyZXNzXG4gKiBAcGFyYW0ge3N0cmluZ30gYWRkcmVzcyAtIGhleCBzdHJpbmdcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cblxuLyoqXG4gKiBNYWtlcyBhIGV0aGVyZXVtIGNoZWNrc3VtIGFkZHJlc3NcbiAqXG4gKiA+IE5vdGU6IHN1cHBvcnQgW0VJUC01NV0oaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvYmxvYi9tYXN0ZXIvRUlQUy9laXAtNTUubWQpXG4gKiA+IE5vdGU6IG5vdCBzdXBwb3J0IFtSU0tJUDYwXShodHRwczovL2dpdGh1Yi5jb20vcnNrc21hcnQvUlNLSVBzL2Jsb2IvbWFzdGVyL0lQcy9SU0tJUDYwLm1kKSB5ZXRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYWRkcmVzcyAtIEhleCBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqXG4gKiBAZXhhbXBsZVxuICogPiBldGhDaGVja3N1bUFkZHJlc3MoJzB4MWI3MTZjNTEzODFlNzY5MDBlYmFhNzk5OWE0ODg1MTFhNGUxZmQwYScpXG4gXCIweDFCNzE2YzUxMzgxZTc2OTAwRUJBQTc5OTlBNDg4NTExQTRFMWZEMGFcIlxuICovXG5mdW5jdGlvbiBldGhDaGVja3N1bUFkZHJlc3MoYWRkcmVzcykge1xuICByZXR1cm4gY2hlY2tzdW1BZGRyZXNzKGFkZHJlc3MpO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gZXRoZXJldW0gYWRkcmVzcyB0byBjb25mbHV4IGhleCBhZGRyZXNzIGJ5IHJlcGxhY2UgaXQncyBmaXJzdCBsZXR0ZXIgdG8gMVxuICogQHBhcmFtIHtzdHJpbmd9IGFkZHJlc3NcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXRoQWRkcmVzc1RvQ2Z4QWRkcmVzcyhhZGRyZXNzKSB7XG4gIHJldHVybiBgMHgxJHthZGRyZXNzLnRvTG93ZXJDYXNlKCkuc2xpY2UoMyl9YDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUgQ0ZYIHNwYWNlIGFkZHJlc3MncyBtYXBwZWQgRVZNIGFkZHJlc3NcbiAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyZXNzIC0gYmFzZTMyIHN0cmluZ1xuICogQHJldHVybnMge3N0cmluZ31cbiAqXG4gKiBAZXhhbXBsZVxuICogPiBjZnhNYXBwZWRFVk1TcGFjZUFkZHJlc3MoY2Z4OmFhazJycmEybmp2ZDc3ZXp3anZ4MDRra2RzOWZ6YWdmZTZrdThzY3o5MSlcbiAqIFwiMHgxMkJmNjI4M0NjRjhBZDZmZkE2M2Y3RGE2M0VEYzIxNzIyOGQ4MzlBXCJcbiAqL1xuZnVuY3Rpb24gY2Z4TWFwcGVkRVZNU3BhY2VBZGRyZXNzKGFkZHJlc3MpIHtcbiAgY29uc3QgeyBoZXhBZGRyZXNzIH0gPSBkZWNvZGUoYWRkcmVzcyk7XG4gIGNvbnN0IG1hcHBlZEJ1ZiA9IGtlY2NhazI1NihoZXhBZGRyZXNzKS5zbGljZSgtMjApO1xuICByZXR1cm4gY2hlY2tzdW1BZGRyZXNzKGAweCR7bWFwcGVkQnVmLnRvU3RyaW5nKCdoZXgnKX1gKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGVuY29kZUNmeEFkZHJlc3M6IGVuY29kZSxcbiAgZGVjb2RlQ2Z4QWRkcmVzczogZGVjb2RlLFxuICBldGhDaGVja3N1bUFkZHJlc3MsXG4gIGV0aEFkZHJlc3NUb0NmeEFkZHJlc3MsXG4gIGNmeE1hcHBlZEVWTVNwYWNlQWRkcmVzcyxcbiAgQUREUkVTU19UWVBFUyxcbiAgaXNWYWxpZENmeEFkZHJlc3MsXG4gIHZlcmlmeUNmeEFkZHJlc3MsXG4gIGhhc05ldHdvcmtQcmVmaXgsXG4gIHNpbXBsaWZ5Q2Z4QWRkcmVzcyxcbiAgc2hvcnRlbkNmeEFkZHJlc3MsXG4gIGlzWmVyb0FkZHJlc3MsXG4gIGlzSW50ZXJuYWxDb250cmFjdEFkZHJlc3MsXG4gIGlzVmFsaWRIZXhBZGRyZXNzLFxuICBpc1ZhbGlkQ2Z4SGV4QWRkcmVzcyxcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/util/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/util/callable.js":
/*!**********************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/util/callable.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const lodash = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\n\nfunction callable(object, func) {\n  if (!lodash.isFunction(func)) {\n    throw new Error('except to be function');\n  }\n\n  return new Proxy(func, {\n    getPrototypeOf: () => Object.getPrototypeOf(object),\n    // setPrototypeOf\n    // isExtensible\n    // preventExtensions\n    getOwnPropertyDescriptor: (_, key) => Object.getOwnPropertyDescriptor(object, key),\n    has: (_, key) => (Reflect.has(object, key) || Reflect.has(func, key)),\n    get: (_, key) => (Reflect.has(object, key) ? Reflect.get(object, key) : Reflect.get(func, key)),\n    set: (_, key, value) => Reflect.set(object, key, value),\n    deleteProperty: (_, key) => Reflect.deleteProperty(object, key),\n    defineProperty: (_, key, attributes) => Reflect.defineProperty(object, key, attributes),\n    ownKeys: () => Reflect.ownKeys(object),\n    // apply\n    // construct\n  });\n}\n\nmodule.exports = callable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3V0aWwvY2FsbGFibGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLHFEQUFROztBQUUvQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvdmlrYXNoeWFkYXYvRGV2ZWxvcGVyL0FsbGdpdEZpbGVzL0NvbmZsdXgtVHhuLXZpc3VhbGl6ZXIvbm9kZV9tb2R1bGVzL2pzLWNvbmZsdXgtc2RrL3NyYy91dGlsL2NhbGxhYmxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGxvZGFzaCA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuXG5mdW5jdGlvbiBjYWxsYWJsZShvYmplY3QsIGZ1bmMpIHtcbiAgaWYgKCFsb2Rhc2guaXNGdW5jdGlvbihmdW5jKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZXhjZXB0IHRvIGJlIGZ1bmN0aW9uJyk7XG4gIH1cblxuICByZXR1cm4gbmV3IFByb3h5KGZ1bmMsIHtcbiAgICBnZXRQcm90b3R5cGVPZjogKCkgPT4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCksXG4gICAgLy8gc2V0UHJvdG90eXBlT2ZcbiAgICAvLyBpc0V4dGVuc2libGVcbiAgICAvLyBwcmV2ZW50RXh0ZW5zaW9uc1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogKF8sIGtleSkgPT4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIGtleSksXG4gICAgaGFzOiAoXywga2V5KSA9PiAoUmVmbGVjdC5oYXMob2JqZWN0LCBrZXkpIHx8IFJlZmxlY3QuaGFzKGZ1bmMsIGtleSkpLFxuICAgIGdldDogKF8sIGtleSkgPT4gKFJlZmxlY3QuaGFzKG9iamVjdCwga2V5KSA/IFJlZmxlY3QuZ2V0KG9iamVjdCwga2V5KSA6IFJlZmxlY3QuZ2V0KGZ1bmMsIGtleSkpLFxuICAgIHNldDogKF8sIGtleSwgdmFsdWUpID0+IFJlZmxlY3Quc2V0KG9iamVjdCwga2V5LCB2YWx1ZSksXG4gICAgZGVsZXRlUHJvcGVydHk6IChfLCBrZXkpID0+IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkob2JqZWN0LCBrZXkpLFxuICAgIGRlZmluZVByb3BlcnR5OiAoXywga2V5LCBhdHRyaWJ1dGVzKSA9PiBSZWZsZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCBhdHRyaWJ1dGVzKSxcbiAgICBvd25LZXlzOiAoKSA9PiBSZWZsZWN0Lm93bktleXMob2JqZWN0KSxcbiAgICAvLyBhcHBseVxuICAgIC8vIGNvbnN0cnVjdFxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYWxsYWJsZTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/util/callable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/util/format.js":
/*!********************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/util/format.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Big = __webpack_require__(/*! big.js */ \"(ssr)/./node_modules/big.js/big.mjs\");\nconst lodash = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nconst CONST = __webpack_require__(/*! ../CONST */ \"(ssr)/./node_modules/js-conflux-sdk/src/CONST.js\");\nconst JSBI = __webpack_require__(/*! ./jsbi */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/jsbi.js\");\nconst parser = __webpack_require__(/*! ./parser */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/parser.js\");\nconst sign = __webpack_require__(/*! ./sign */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/sign.js\");\nconst addressUtil = __webpack_require__(/*! ./address */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/address.js\");\nconst { isHexString, isBytes } = __webpack_require__(/*! ./index */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\n\n// ----------------------------------------------------------------------------\nfunction toHex(value) {\n  let hex;\n\n  if (lodash.isString(value)) {\n    hex = value.toLowerCase(); // XXX: lower case for support checksum address\n  } else if (Number.isInteger(value) || (typeof value === 'bigint') || (value instanceof JSBI)) {\n    hex = `0x${value.toString(16)}`;\n  } else if (Buffer.isBuffer(value)) {\n    hex = `0x${value.toString('hex')}`;\n  } else if (lodash.isBoolean(value)) {\n    hex = value ? '0x01' : '0x00';\n  } else if (value === null) {\n    hex = '0x';\n  } else {\n    hex = `${value}`;\n  }\n\n  if (!/^0x[0-9a-f]*$/.test(hex)) {\n    throw new Error(`${value} not match \"hex\"`);\n  }\n  return hex.length % 2 ? `0x0${hex.slice(2)}` : hex;\n}\n\nfunction toNumber(value) {\n  if (value === null) {\n    throw new Error(`${value} not match \"number\"`);\n  } else if (Buffer.isBuffer(value)) {\n    value = `0x${value.toString('hex')}`;\n  }\n  return Number(value);\n}\n\nfunction toBigInt(value) {\n  if (Number.isInteger(value) || (typeof value === 'bigint') || (value instanceof JSBI)) {\n    return JSBI.BigInt(value);\n  }\n  if (lodash.isBoolean(value)) {\n    throw new Error(`${value} not match \"BigInt\"`);\n  }\n  if (Buffer.isBuffer(value)) {\n    throw new Error(`${value} not match \"BigInt\"`);\n  }\n\n  value = `${value}`.replace(/^(-?\\d+)(.0+)?$/, '$1'); // replace \"number.000\" to \"number\"\n  return JSBI.BigInt(value);\n}\n\nfunction toBig(value) {\n  if (/^0[xob]/i.test(value)) {\n    value = JSBI.BigInt(value);\n  }\n  return new Big(value);\n}\n\n// ----------------------------------------------------------------------------\nconst format = new Proxy(() => undefined, {\n  apply(target, thisArg, argArray) {\n    return parser(...argArray);\n  },\n});\n\n/**\n * Do nothing for the given value.\n * @function any\n * @param {any} arg\n * @return {any} arg\n *\n * @example\n * > format.any(1)\n 1\n */\nformat.any = format(v => v, { name: 'format.any' });\n\n/**\n * format input to number\n * @function uInt\n * @param {number|BigInt|string|boolean} arg\n * @return {number}\n *\n * @example\n * > format.uInt(-3.14)\n Error(\"not match uint\")\n * > format.uInt(null)\n Error(\"not match number\")\n * > format.uInt('0')\n 0\n * > format.uInt(1)\n 1\n * > format.uInt(BigInt(100))\n 100\n * > format.uInt('0x10')\n 16\n * > format.uInt('')\n 0\n * > format.uInt(true)\n 1\n * > format.uInt(false)\n 0\n * > format.uInt(Number.MAX_SAFE_INTEGER + 1) // unsafe integer\n Error(\"not match uint\")\n */\nformat.uInt = format(toNumber, { name: 'format.uInt' }).$validate(v => Number.isSafeInteger(v) && v >= 0, 'uint');\n\n/**\n * @function bigInt\n * @param {number|string|BigInt} arg\n * @return {BigInt}\n *\n * @example\n * > format.bigInt(-3.14)\n Error(\"Cannot convert -3.14 to a BigInt\")\n * > format.bigInt('0.0')\n 0n\n * > format.bigInt('-1')\n -1n\n * > format.bigInt(1)\n 1n\n * > format.bigInt(BigInt(100))\n 100n\n * > format.bigInt('0x10')\n 16n\n * > format.bigInt(Number.MAX_SAFE_INTEGER + 1) // unsafe integer\n 9007199254740992n\n */\nformat.bigInt = format(toBigInt, { name: 'format.bigInt' });\n\n/**\n * @function bigIntFromBuffer\n * @param {Buffer} arg\n * @return {BigInt}\n */\nformat.bigIntFromBuffer = format.bigInt.$before(v => (v.length === 0 ? '0x0' : format.hex(v)));\n\n/**\n * @function bigUInt\n * @param {number|string|BigInt} arg\n * @return {BigInt}\n *\n * @example\n * > format.bigUInt('0.0')\n 0n\n * > format.bigUInt('-1')\n Error(\"not match bigUInt\")\n */\nformat.bigUInt = format.bigInt.$validate(v => v >= 0, 'bigUInt');\n\n/**\n * When encoding QUANTITIES (integers, numbers): encode as hex, prefix with \"0x\", the most compact representation (slight exception: zero should be represented as \"0x0\")\n *\n * @function bigUIntHex\n * @param {number|string|BigInt} arg\n * @return {string} Hex string\n *\n * @example\n * > format.bigUIntHex(100)\n \"0x64\"\n * > format.bigUIntHex('0x0a')\n \"0xa\"\n * > format.bigUIntHex(-1))\n Error(\"not match uintHex\")\n */\nformat.bigUIntHex = format.bigUInt.$after(v => `0x${v.toString(16)}`);\n\n/**\n * @function big\n * @param {number|string|BigInt} arg\n * @return {Big} Big instance\n *\n * @example\n * > format.big('0b10').toString()\n '2'\n * > format.big('0O10').toString()\n '8'\n * > format.big('010').toString()\n '10'\n * > format.big('0x10').toString()\n '16'\n * > format.big(3.14).toString()\n '3.14'\n * > format.big('-03.140').toString()\n '-3.14'\n * > format.big(null)\n Error('Invalid number')\n */\nformat.big = format(toBig, { name: 'format.big' });\n\n/**\n * @function fixed64\n * @param {string|number|BigInt|Big} arg\n * @return {Number}\n *\n * @example\n * > format.fixed64('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n 1\n * > format.fixed64('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n 0.5\n */\nformat.fixed64 = format.big.$after(v => Number(v.div(CONST.MAX_UINT)));\n\n/**\n * @function epochNumber\n * @param {number|string} arg - number or label, See [EPOCH_NUMBER](Misc.md#CONST.js/EPOCH_NUMBER)\n * @return {string}\n *\n * @example\n * > format.epochNumber(10)\n \"0xa\"\n * > format.epochNumber(EPOCH_NUMBER.LATEST_STATE)\n \"latest_state\"\n * > format.epochNumber('latest_mined')\n \"latest_mined\"\n */\nformat.epochNumber = format.bigUIntHex\n  .$or(CONST.EPOCH_NUMBER.LATEST_MINED)\n  .$or(CONST.EPOCH_NUMBER.LATEST_STATE)\n  .$or(CONST.EPOCH_NUMBER.LATEST_CONFIRMED)\n  .$or(CONST.EPOCH_NUMBER.LATEST_FINALIZED)\n  .$or(CONST.EPOCH_NUMBER.LATEST_CHECKPOINT)\n  .$or(CONST.EPOCH_NUMBER.EARLIEST);\n\nformat.epochNumberOrUndefined = format.epochNumber.$or(undefined);\n\n/**\n * When encoding UNFORMATTED DATA (byte arrays, account addresses, hashes, bytecode arrays): encode as hex, prefix with \"0x\", two hex digits per byte.\n *\n * @function hex\n * @param {number|BigInt|string|Buffer|boolean|null} arg\n * @return {string} Hex string\n *\n * @example\n * > format.hex(null)\n '0x'\n * > format.hex(1)\n \"0x01\"\n * > format.hex(256)\n \"0x0100\"\n * > format.hex(true)\n \"0x01\"\n * > format.hex(Buffer.from([1,10,255]))\n \"0x010aff\"\n * > format.hex(\"0x0a\")\n \"0x0a\"\n */\nformat.hex = format(toHex, { name: 'format.hex' });\n\n/**\n * @function hex40\n * @param {string|Buffer} arg\n * @return {string} hex40 address\n */\nformat.hex40 = format.hex.$validate(v => v.length === 2 + 40, 'hex40');\n\nfunction toAddress(address, networkId, verbose = false) {\n  // if is an (Account) object, convert it to string (address)\n  if (lodash.isObject(address) && addressUtil.hasNetworkPrefix(address.toString())) {\n    address = address.toString();\n  }\n  if (lodash.isString(address) && addressUtil.hasNetworkPrefix(address)) {\n    const _decodedAddress = addressUtil.decodeCfxAddress(address);\n    address = _decodedAddress.hexAddress;\n    networkId = networkId || _decodedAddress.netId;\n  }\n  address = format.hexBuffer(address);\n  if (address.length !== 20) {\n    throw new Error('not match \"hex40\"');\n  }\n  if (typeof networkId === 'undefined') {\n    throw new Error('expected parameter: networkId');\n  }\n  return addressUtil.encodeCfxAddress(address, networkId, verbose);\n}\n\n/**\n * Checks if a given string is a valid address.\n * @function address\n * @param {string|Buffer} address\n * @param {number} networkId\n * @param {boolean} [verbose=false] - if you want a address with type info, pass true\n * @return {string} Hex string\n *\n * @example\n * > format.address('0x0123456789012345678901234567890123456789', 1)\n \"cfxtest:aaawgvnhveawgvnhveawgvnhveawgvnhvey1umfzwp\"\n * > format.address('0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef')\n Error(\"not match address\")\n */\nformat.address = format(toAddress, { name: 'format.address' });\n\n/**\n * create a address formatter with networkId info\n */\nformat.netAddress = (networkId, verbose = false) => format(address => toAddress(address, networkId, verbose));\n\n/**\n * Checks if a given string is a valid hex address.\n * It will also check the checksum, if the address has upper and lowercase letters.\n *\n * @function hexAddress\n * @param {string|Buffer} address\n * @return {string} Hex string\n *\n * @example\n * > format.hexAddress('0x0123456789012345678901234567890123456789')\n \"0x0123456789012345678901234567890123456789\"\n * > format.hexAddress('0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef')\n Error(\"not match address\")\n * > format.hexAddress('cfxtest:aaawgvnhveawgvnhveawgvnhveawgvnhvey1umfzwp')\n 0x0123456789012345678901234567890123456789\n */\nformat.hexAddress = format.hex40.$before(address => {\n  if (lodash.isString(address) && addressUtil.hasNetworkPrefix(address)) {\n    address = addressUtil.decodeCfxAddress(address).hexAddress;\n  }\n\n  if (isHexString(address) && address.length !== 2 + 40) {\n    throw new Error('not match \"hex40\"');\n  }\n\n  if (isHexString(address)\n    && address !== address.toLowerCase()\n    && address !== address.toUpperCase()\n    && address !== sign.checksumAddress(address)\n  ) {\n    throw new Error(`address \"${address}\" checksum error`);\n  }\n\n  return address;\n});\n\n/**\n * Will convert an upper or lowercase address to a checksum address.\n *\n * @function checksumAddress\n * @deprecated Please use address.ethChecksumAddress\n * @param {string|Buffer} arg\n * @return {string} Checksum address hex string\n *\n * @example\n * > format.checksumAddress('0x1b716c51381e76900ebaa7999a488511a4e1fd0a')\n \"0x1B716c51381e76900EBAA7999A488511A4E1fD0a\"\n * > format.checksumAddress('0X1B716C51381E76900EBAA7999A488511A4E1FD0A')\n \"0x1B716c51381e76900EBAA7999A488511A4E1fD0a\"\n * > format.checksumAddress('0x1B716c51381e76900EBAA7999A488511A4E1fD0A')\n \"0x1B716c51381e76900EBAA7999A488511A4E1fD0a\"\n */\nformat.checksumAddress = format.hex40.$after(sign.checksumAddress);\n\n/** @type {function(string): string} */\nformat.hex64 = format.hex.$validate(v => v.length === 2 + 64, 'hex64');\n\nformat.hex32 = format.hex.$validate(v => v.length === 2 + 32, 'hex32');\n\n/**\n * @function blockHash\n * @param {string|Buffer} arg\n * @return {string} Hex string\n *\n * @example\n * > format.privateKey('0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef')\n \"0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\"\n * > format.privateKey('0x0123456789012345678901234567890123456789')\n Error(\"not match hex64\")\n */\nformat.blockHash = v => format.hex64(v); // alias\n\n/**\n * @function transactionHash\n * @param {string|Buffer} arg\n * @return {string} Hex string\n *\n * @example\n * > format.privateKey('0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef')\n \"0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\"\n * > format.privateKey('0x0123456789012345678901234567890123456789')\n Error(\"not match hex64\")\n */\nformat.transactionHash = v => format.hex64(v); // alias\n\n/**\n * @function privateKey\n * @param {string|Buffer} arg\n * @return {string} Hex string\n *\n * @example\n * > format.privateKey('0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef')\n \"0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\"\n * > format.privateKey('0x0123456789012345678901234567890123456789')\n Error(\"not match hex64\")\n */\nformat.privateKey = v => format.hex64(v); // alias\n\n/**\n * @function publicKey\n * @param {string|Buffer} arg\n * @return {string} Hex string\n *\n * @example\n * > format.publicKey('0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef')\n \"0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\"\n * > format.publicKey('0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef')\n Error(\"not match publicKey\")\n */\nformat.publicKey = format.hex.$validate(v => v.length === 2 + 128, 'publicKey');\n\n/**\n * @function hexBuffer\n * @param {number|string|BigInt|Buffer|boolean|null} arg\n * @return {Buffer}\n *\n * @example\n * > format.hexBuffer(Buffer.from([0, 1]))\n <Buffer 00 01>\n * > format.hexBuffer(null)\n <Buffer >\n * > format.hexBuffer(1024)\n <Buffer 04 00>\n * > format.hexBuffer('0x0a')\n <Buffer 0a>\n * > format.hexBuffer(true)\n <Buffer 01>\n * > format.hexBuffer(3.14)\n Error(\"not match hex\")\n */\nformat.hexBuffer = format.hex.$after(v => Buffer.from(v.substr(2), 'hex'));\n\n/**\n * It can only be in hex format If want to pass a string\n * @function bytes\n * @param {string|Buffer|array} arg\n * @return {Buffer}\n *\n * @example\n * > format.bytes('0xabcd')\n <Buffer ab cd>\n * > format.bytes([0, 1])\n <Buffer 00 01>\n * > format.bytes(Buffer.from([0, 1]))\n <Buffer 00 01>\n */\nformat.bytes = format(v => {\n  if (isHexString(v)) return format.hexBuffer(v);\n  if (Buffer.isBuffer(v) || isBytes(v)) return Buffer.from(v);\n  throw new Error('invalid arrayify value');\n}, { name: 'format.bytes' });\n\n/**\n * @function boolean\n * @param {boolean} arg\n * @return {boolean}\n *\n * @example\n * > format.boolean(true)\n true\n * > format.boolean(false)\n false\n */\nformat.boolean = format.any.$validate(lodash.isBoolean, 'boolean');\n\n/**\n * Compute the keccak256 cryptographic hash of a value, returned as a hex string.\n *\n * @function keccak256\n * @param {string|Buffer} arg\n * @return {string}\n *\n * @example\n * > format.keccak256('Transfer(address,address,uint256)')\n \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\"\n\n * > format.keccak256(Buffer.from([0x42]))\n \"0x1f675bff07515f5df96737194ea945c36c41e7b4fcef307b7cd4d0e602a69111\"\n * > format.keccak256(format.hexBuffer('0x42'))\n \"0x1f675bff07515f5df96737194ea945c36c41e7b4fcef307b7cd4d0e602a69111\"\n * > format.keccak256('0x42') // \"0x42\" as string and transfer to <Buffer 30 78 34 32> by ascii\n \"0x3c1b2d38851281e9a7b59d10973b0c87c340ff1e76bde7d06bf6b9f28df2b8c0\"\n */\nformat.keccak256 = format.bytes.$before(v => (lodash.isString(v) && !isHexString(v) ? Buffer.from(v) : v)).$after(sign.keccak256).$after(format.hex);\n\nformat.epochNumber1898 = format({\n  epochNumber: format.bigUIntHex.$or(null),\n  blockHash: format.hex64.$or(null),\n  requirePivot: format.boolean.$or(null),\n});\n\nformat.epochNumberOrBlockHash = format.epochNumberOrUndefined.$or(format.epochNumber1898);\n\nmodule.exports = format;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/util/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/util/index.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const lodash = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nconst { WORD_BYTES } = __webpack_require__(/*! ../CONST */ \"(ssr)/./node_modules/js-conflux-sdk/src/CONST.js\");\n\nfunction assert(bool, value) {\n  if (!bool) {\n    if (lodash.isPlainObject(value)) {\n      value = JSON.stringify(value);\n    }\n    throw new Error(value);\n  }\n}\n\n/**\n * @param {Buffer} buffer\n * @param {boolean} alignLeft\n * @return {Buffer}\n */\nfunction alignBuffer(buffer, alignLeft = false) {\n  const count = WORD_BYTES - (buffer.length % WORD_BYTES);\n  if (0 < count && count < WORD_BYTES) {\n    buffer = alignLeft\n      ? Buffer.concat([buffer, Buffer.alloc(count)])\n      : Buffer.concat([Buffer.alloc(count), buffer]);\n  }\n\n  return buffer;\n}\n\nfunction awaitTimeout(promise, timeout) {\n  return new Promise((resolve, reject) => {\n    const error = new Error(`Timeout after ${timeout} ms`);\n    const timer = setTimeout(() => reject(error), timeout);\n    promise.then(resolve).catch(reject).finally(() => clearTimeout(timer));\n  });\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction decodeHexEncodedStr(hexEncodedStr) {\n  return Buffer.from(hexEncodedStr.slice(2), 'hex').toString();\n}\n\nfunction isHexString(v) {\n  return lodash.isString(v) && v.match(/^0x[0-9A-Fa-f]*$/);\n}\n\nfunction isBytes(value) {\n  if (value == null) { return false; }\n  if (value.constructor === Uint8Array) { return true; }\n  if (typeof value === 'string') { return false; }\n  if (value.length == null) { return false; }\n\n  // eslint-disable-next-line no-plusplus\n  for (let i = 0; i < value.length; i++) {\n    const v = value[i];\n    if (typeof v !== 'number' || v < 0 || v >= 256 || (v % 1)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction validAddressPrefix(addressBuf) {\n  // eslint-disable-next-line no-bitwise\n  const prefix = addressBuf[0] & 0xf0;\n  return prefix === 0x10 || prefix === 0x80 || prefix === 0x00;\n}\n\nmodule.exports = {\n  assert,\n  alignBuffer,\n  awaitTimeout,\n  decodeHexEncodedStr,\n  isHexString,\n  isBytes,\n  validAddressPrefix,\n  sleep,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3V0aWwvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLHFEQUFRO0FBQy9CLFFBQVEsYUFBYSxFQUFFLG1CQUFPLENBQUMsa0VBQVU7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDZDQUE2QyxTQUFTO0FBQ3REO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx1QkFBdUI7QUFDdkIsMENBQTBDO0FBQzFDLG1DQUFtQztBQUNuQyw4QkFBOEI7O0FBRTlCO0FBQ0Esa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmlrYXNoeWFkYXYvRGV2ZWxvcGVyL0FsbGdpdEZpbGVzL0NvbmZsdXgtVHhuLXZpc3VhbGl6ZXIvbm9kZV9tb2R1bGVzL2pzLWNvbmZsdXgtc2RrL3NyYy91dGlsL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGxvZGFzaCA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuY29uc3QgeyBXT1JEX0JZVEVTIH0gPSByZXF1aXJlKCcuLi9DT05TVCcpO1xuXG5mdW5jdGlvbiBhc3NlcnQoYm9vbCwgdmFsdWUpIHtcbiAgaWYgKCFib29sKSB7XG4gICAgaWYgKGxvZGFzaC5pc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcih2YWx1ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGFsaWduTGVmdFxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5mdW5jdGlvbiBhbGlnbkJ1ZmZlcihidWZmZXIsIGFsaWduTGVmdCA9IGZhbHNlKSB7XG4gIGNvbnN0IGNvdW50ID0gV09SRF9CWVRFUyAtIChidWZmZXIubGVuZ3RoICUgV09SRF9CWVRFUyk7XG4gIGlmICgwIDwgY291bnQgJiYgY291bnQgPCBXT1JEX0JZVEVTKSB7XG4gICAgYnVmZmVyID0gYWxpZ25MZWZ0XG4gICAgICA/IEJ1ZmZlci5jb25jYXQoW2J1ZmZlciwgQnVmZmVyLmFsbG9jKGNvdW50KV0pXG4gICAgICA6IEJ1ZmZlci5jb25jYXQoW0J1ZmZlci5hbGxvYyhjb3VudCksIGJ1ZmZlcl0pO1xuICB9XG5cbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cblxuZnVuY3Rpb24gYXdhaXRUaW1lb3V0KHByb21pc2UsIHRpbWVvdXQpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgVGltZW91dCBhZnRlciAke3RpbWVvdXR9IG1zYCk7XG4gICAgY29uc3QgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHJlamVjdChlcnJvciksIHRpbWVvdXQpO1xuICAgIHByb21pc2UudGhlbihyZXNvbHZlKS5jYXRjaChyZWplY3QpLmZpbmFsbHkoKCkgPT4gY2xlYXJUaW1lb3V0KHRpbWVyKSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzbGVlcChtcykge1xuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XG59XG5cbmZ1bmN0aW9uIGRlY29kZUhleEVuY29kZWRTdHIoaGV4RW5jb2RlZFN0cikge1xuICByZXR1cm4gQnVmZmVyLmZyb20oaGV4RW5jb2RlZFN0ci5zbGljZSgyKSwgJ2hleCcpLnRvU3RyaW5nKCk7XG59XG5cbmZ1bmN0aW9uIGlzSGV4U3RyaW5nKHYpIHtcbiAgcmV0dXJuIGxvZGFzaC5pc1N0cmluZyh2KSAmJiB2Lm1hdGNoKC9eMHhbMC05QS1GYS1mXSokLyk7XG59XG5cbmZ1bmN0aW9uIGlzQnl0ZXModmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIGlmICh2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gVWludDhBcnJheSkgeyByZXR1cm4gdHJ1ZTsgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgeyByZXR1cm4gZmFsc2U7IH1cbiAgaWYgKHZhbHVlLmxlbmd0aCA9PSBudWxsKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wbHVzcGx1c1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdiA9IHZhbHVlW2ldO1xuICAgIGlmICh0eXBlb2YgdiAhPT0gJ251bWJlcicgfHwgdiA8IDAgfHwgdiA+PSAyNTYgfHwgKHYgJSAxKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gdmFsaWRBZGRyZXNzUHJlZml4KGFkZHJlc3NCdWYpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgY29uc3QgcHJlZml4ID0gYWRkcmVzc0J1ZlswXSAmIDB4ZjA7XG4gIHJldHVybiBwcmVmaXggPT09IDB4MTAgfHwgcHJlZml4ID09PSAweDgwIHx8IHByZWZpeCA9PT0gMHgwMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFzc2VydCxcbiAgYWxpZ25CdWZmZXIsXG4gIGF3YWl0VGltZW91dCxcbiAgZGVjb2RlSGV4RW5jb2RlZFN0cixcbiAgaXNIZXhTdHJpbmcsXG4gIGlzQnl0ZXMsXG4gIHZhbGlkQWRkcmVzc1ByZWZpeCxcbiAgc2xlZXAsXG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/util/jsbi.js":
/*!******************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/util/jsbi.js ***!
  \******************************************************/
/***/ ((module) => {

eval("/**\n * support interface of [jsbi](https://github.com/GoogleChromeLabs/jsbi#readme)\n * - for node.js using native BigInt as JSBI.BigInt\n * - for browser using browserify to replace with jsbi\n */\n\n/* eslint-disable no-bitwise */\nmodule.exports = BigInt;\nmodule.exports.BigInt = BigInt;\n\nmodule.exports.toNumber = x => Number(x);\n\nmodule.exports.unaryMinus = x => -x;\nmodule.exports.bitwiseNot = x => ~x;\n\nmodule.exports.exponentiate = (x, y) => x ** y;\nmodule.exports.multiply = (x, y) => x * y;\nmodule.exports.divide = (x, y) => x / y;\nmodule.exports.remainder = (x, y) => x % y;\nmodule.exports.add = (x, y) => x + y;\nmodule.exports.subtract = (x, y) => x - y;\nmodule.exports.leftShift = (x, y) => x << y;\nmodule.exports.signedRightShift = (x, y) => x >> y;\n\nmodule.exports.lessThan = (x, y) => x < y;\nmodule.exports.lessThanOrEqual = (x, y) => x <= y;\nmodule.exports.greaterThan = (x, y) => x > y;\nmodule.exports.greaterThanOrEqual = (x, y) => x >= y;\nmodule.exports.equal = (x, y) => x === y;\nmodule.exports.notEqual = (x, y) => x !== y;\n\nmodule.exports.bitwiseAnd = (x, y) => x & y;\nmodule.exports.bitwiseXor = (x, y) => x ^ y;\nmodule.exports.bitwiseOr = (x, y) => x | y;\n\nmodule.exports.ADD = (x, y) => x + y;\nmodule.exports.LT = (x, y) => x < y;\nmodule.exports.LE = (x, y) => x <= y;\nmodule.exports.GT = (x, y) => x > y;\nmodule.exports.GE = (x, y) => x >= y;\nmodule.exports.EQ = (x, y) => x === y;\nmodule.exports.NE = (x, y) => x !== y;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3V0aWwvanNiaS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxQkFBcUI7O0FBRXJCLHVCQUF1Qjs7QUFFdkIseUJBQXlCO0FBQ3pCLHlCQUF5Qjs7QUFFekIsMkJBQTJCO0FBQzNCLHVCQUF1QjtBQUN2QixxQkFBcUI7QUFDckIsd0JBQXdCO0FBQ3hCLGtCQUFrQjtBQUNsQix1QkFBdUI7QUFDdkIsd0JBQXdCO0FBQ3hCLCtCQUErQjs7QUFFL0IsdUJBQXVCO0FBQ3ZCLDhCQUE4QjtBQUM5QiwwQkFBMEI7QUFDMUIsaUNBQWlDO0FBQ2pDLG9CQUFvQjtBQUNwQix1QkFBdUI7O0FBRXZCLHlCQUF5QjtBQUN6Qix5QkFBeUI7QUFDekIsd0JBQXdCOztBQUV4QixrQkFBa0I7QUFDbEIsaUJBQWlCO0FBQ2pCLGlCQUFpQjtBQUNqQixpQkFBaUI7QUFDakIsaUJBQWlCO0FBQ2pCLGlCQUFpQjtBQUNqQixpQkFBaUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWthc2h5YWRhdi9EZXZlbG9wZXIvQWxsZ2l0RmlsZXMvQ29uZmx1eC1UeG4tdmlzdWFsaXplci9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3V0aWwvanNiaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIHN1cHBvcnQgaW50ZXJmYWNlIG9mIFtqc2JpXShodHRwczovL2dpdGh1Yi5jb20vR29vZ2xlQ2hyb21lTGFicy9qc2JpI3JlYWRtZSlcbiAqIC0gZm9yIG5vZGUuanMgdXNpbmcgbmF0aXZlIEJpZ0ludCBhcyBKU0JJLkJpZ0ludFxuICogLSBmb3IgYnJvd3NlciB1c2luZyBicm93c2VyaWZ5IHRvIHJlcGxhY2Ugd2l0aCBqc2JpXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xubW9kdWxlLmV4cG9ydHMgPSBCaWdJbnQ7XG5tb2R1bGUuZXhwb3J0cy5CaWdJbnQgPSBCaWdJbnQ7XG5cbm1vZHVsZS5leHBvcnRzLnRvTnVtYmVyID0geCA9PiBOdW1iZXIoeCk7XG5cbm1vZHVsZS5leHBvcnRzLnVuYXJ5TWludXMgPSB4ID0+IC14O1xubW9kdWxlLmV4cG9ydHMuYml0d2lzZU5vdCA9IHggPT4gfng7XG5cbm1vZHVsZS5leHBvcnRzLmV4cG9uZW50aWF0ZSA9ICh4LCB5KSA9PiB4ICoqIHk7XG5tb2R1bGUuZXhwb3J0cy5tdWx0aXBseSA9ICh4LCB5KSA9PiB4ICogeTtcbm1vZHVsZS5leHBvcnRzLmRpdmlkZSA9ICh4LCB5KSA9PiB4IC8geTtcbm1vZHVsZS5leHBvcnRzLnJlbWFpbmRlciA9ICh4LCB5KSA9PiB4ICUgeTtcbm1vZHVsZS5leHBvcnRzLmFkZCA9ICh4LCB5KSA9PiB4ICsgeTtcbm1vZHVsZS5leHBvcnRzLnN1YnRyYWN0ID0gKHgsIHkpID0+IHggLSB5O1xubW9kdWxlLmV4cG9ydHMubGVmdFNoaWZ0ID0gKHgsIHkpID0+IHggPDwgeTtcbm1vZHVsZS5leHBvcnRzLnNpZ25lZFJpZ2h0U2hpZnQgPSAoeCwgeSkgPT4geCA+PiB5O1xuXG5tb2R1bGUuZXhwb3J0cy5sZXNzVGhhbiA9ICh4LCB5KSA9PiB4IDwgeTtcbm1vZHVsZS5leHBvcnRzLmxlc3NUaGFuT3JFcXVhbCA9ICh4LCB5KSA9PiB4IDw9IHk7XG5tb2R1bGUuZXhwb3J0cy5ncmVhdGVyVGhhbiA9ICh4LCB5KSA9PiB4ID4geTtcbm1vZHVsZS5leHBvcnRzLmdyZWF0ZXJUaGFuT3JFcXVhbCA9ICh4LCB5KSA9PiB4ID49IHk7XG5tb2R1bGUuZXhwb3J0cy5lcXVhbCA9ICh4LCB5KSA9PiB4ID09PSB5O1xubW9kdWxlLmV4cG9ydHMubm90RXF1YWwgPSAoeCwgeSkgPT4geCAhPT0geTtcblxubW9kdWxlLmV4cG9ydHMuYml0d2lzZUFuZCA9ICh4LCB5KSA9PiB4ICYgeTtcbm1vZHVsZS5leHBvcnRzLmJpdHdpc2VYb3IgPSAoeCwgeSkgPT4geCBeIHk7XG5tb2R1bGUuZXhwb3J0cy5iaXR3aXNlT3IgPSAoeCwgeSkgPT4geCB8IHk7XG5cbm1vZHVsZS5leHBvcnRzLkFERCA9ICh4LCB5KSA9PiB4ICsgeTtcbm1vZHVsZS5leHBvcnRzLkxUID0gKHgsIHkpID0+IHggPCB5O1xubW9kdWxlLmV4cG9ydHMuTEUgPSAoeCwgeSkgPT4geCA8PSB5O1xubW9kdWxlLmV4cG9ydHMuR1QgPSAoeCwgeSkgPT4geCA+IHk7XG5tb2R1bGUuZXhwb3J0cy5HRSA9ICh4LCB5KSA9PiB4ID49IHk7XG5tb2R1bGUuZXhwb3J0cy5FUSA9ICh4LCB5KSA9PiB4ID09PSB5O1xubW9kdWxlLmV4cG9ydHMuTkUgPSAoeCwgeSkgPT4geCAhPT0geTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/util/jsbi.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/util/namedTuple.js":
/*!************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/util/namedTuple.js ***!
  \************************************************************/
/***/ ((module) => {

eval("/**\n * Make a NamedTuple Class\n * @typedef {Object} NamedTuple\n * @template NamedTuple\n * @param {string[]} names\n * @returns {NamedTuple}\n *\n * @example\n * > Student = namedTuple('name', 'age')\n * > student = new Student('Tom', 18)\n * > Array.isArray(student)\n true\n * > student\n NamedTuple(name,age) [ 'Tom', 18 ]\n * > student.toObject()\n { name: 'Tom', age: 18 }\n * > student.name\n \"Tom\"\n * > student.age\n 18\n * > student.age = 19\n Error: can not change element to a NamedTuple\n */\nfunction namedTuple(...names) {\n  const _nameToIndex = {};\n  names.forEach((name, index) => {\n    _nameToIndex[name] = index;\n  });\n\n  class NamedTuple extends Array {\n    constructor(...args) {\n      super(args.length);\n      args.forEach((v, i) => Reflect.set(this, i, v)); // XXX: new Array(0) === []\n\n      return new Proxy(this, {\n        has: (_, key) => {\n          const index = _nameToIndex[key];\n          return index !== undefined ? true : (key in this);\n        },\n        get: (_, key) => {\n          const index = _nameToIndex[key];\n          return index === undefined ? this[key] : this[index];\n        },\n        set: () => {\n          throw new Error('can not change element to a NamedTuple');\n        },\n        deleteProperty: () => {\n          throw new Error('can not delete element to a NamedTuple');\n        },\n      });\n    }\n\n    static get name() {\n      return `NamedTuple(${names.join(',')})`;\n    }\n\n    static fromObject(object) {\n      return new this(...names.map(name => object[name]));\n    }\n\n    toObject() {\n      const obj = {};\n      names.forEach(name => {\n        obj[name] = this[name];\n      });\n      return obj;\n    }\n  }\n\n  return NamedTuple;\n}\n\nmodule.exports = namedTuple;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3V0aWwvbmFtZWRUdXBsZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsdURBQXVEOztBQUV2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDs7QUFFQTtBQUNBLDJCQUEyQixnQkFBZ0I7QUFDM0M7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvdmlrYXNoeWFkYXYvRGV2ZWxvcGVyL0FsbGdpdEZpbGVzL0NvbmZsdXgtVHhuLXZpc3VhbGl6ZXIvbm9kZV9tb2R1bGVzL2pzLWNvbmZsdXgtc2RrL3NyYy91dGlsL25hbWVkVHVwbGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNYWtlIGEgTmFtZWRUdXBsZSBDbGFzc1xuICogQHR5cGVkZWYge09iamVjdH0gTmFtZWRUdXBsZVxuICogQHRlbXBsYXRlIE5hbWVkVHVwbGVcbiAqIEBwYXJhbSB7c3RyaW5nW119IG5hbWVzXG4gKiBAcmV0dXJucyB7TmFtZWRUdXBsZX1cbiAqXG4gKiBAZXhhbXBsZVxuICogPiBTdHVkZW50ID0gbmFtZWRUdXBsZSgnbmFtZScsICdhZ2UnKVxuICogPiBzdHVkZW50ID0gbmV3IFN0dWRlbnQoJ1RvbScsIDE4KVxuICogPiBBcnJheS5pc0FycmF5KHN0dWRlbnQpXG4gdHJ1ZVxuICogPiBzdHVkZW50XG4gTmFtZWRUdXBsZShuYW1lLGFnZSkgWyAnVG9tJywgMTggXVxuICogPiBzdHVkZW50LnRvT2JqZWN0KClcbiB7IG5hbWU6ICdUb20nLCBhZ2U6IDE4IH1cbiAqID4gc3R1ZGVudC5uYW1lXG4gXCJUb21cIlxuICogPiBzdHVkZW50LmFnZVxuIDE4XG4gKiA+IHN0dWRlbnQuYWdlID0gMTlcbiBFcnJvcjogY2FuIG5vdCBjaGFuZ2UgZWxlbWVudCB0byBhIE5hbWVkVHVwbGVcbiAqL1xuZnVuY3Rpb24gbmFtZWRUdXBsZSguLi5uYW1lcykge1xuICBjb25zdCBfbmFtZVRvSW5kZXggPSB7fTtcbiAgbmFtZXMuZm9yRWFjaCgobmFtZSwgaW5kZXgpID0+IHtcbiAgICBfbmFtZVRvSW5kZXhbbmFtZV0gPSBpbmRleDtcbiAgfSk7XG5cbiAgY2xhc3MgTmFtZWRUdXBsZSBleHRlbmRzIEFycmF5IHtcbiAgICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgICBzdXBlcihhcmdzLmxlbmd0aCk7XG4gICAgICBhcmdzLmZvckVhY2goKHYsIGkpID0+IFJlZmxlY3Quc2V0KHRoaXMsIGksIHYpKTsgLy8gWFhYOiBuZXcgQXJyYXkoMCkgPT09IFtdXG5cbiAgICAgIHJldHVybiBuZXcgUHJveHkodGhpcywge1xuICAgICAgICBoYXM6IChfLCBrZXkpID0+IHtcbiAgICAgICAgICBjb25zdCBpbmRleCA9IF9uYW1lVG9JbmRleFtrZXldO1xuICAgICAgICAgIHJldHVybiBpbmRleCAhPT0gdW5kZWZpbmVkID8gdHJ1ZSA6IChrZXkgaW4gdGhpcyk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldDogKF8sIGtleSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gX25hbWVUb0luZGV4W2tleV07XG4gICAgICAgICAgcmV0dXJuIGluZGV4ID09PSB1bmRlZmluZWQgPyB0aGlzW2tleV0gOiB0aGlzW2luZGV4XTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiAoKSA9PiB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjYW4gbm90IGNoYW5nZSBlbGVtZW50IHRvIGEgTmFtZWRUdXBsZScpO1xuICAgICAgICB9LFxuICAgICAgICBkZWxldGVQcm9wZXJ0eTogKCkgPT4ge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY2FuIG5vdCBkZWxldGUgZWxlbWVudCB0byBhIE5hbWVkVHVwbGUnKTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgbmFtZSgpIHtcbiAgICAgIHJldHVybiBgTmFtZWRUdXBsZSgke25hbWVzLmpvaW4oJywnKX0pYDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbU9iamVjdChvYmplY3QpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcyguLi5uYW1lcy5tYXAobmFtZSA9PiBvYmplY3RbbmFtZV0pKTtcbiAgICB9XG5cbiAgICB0b09iamVjdCgpIHtcbiAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgbmFtZXMuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgICAgb2JqW25hbWVdID0gdGhpc1tuYW1lXTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gTmFtZWRUdXBsZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuYW1lZFR1cGxlO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/util/namedTuple.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/util/parser.js":
/*!********************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/util/parser.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* copy from koaflow@0.6.2/lib/parser */\nconst lodash = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nconst { PARSER_ERROR } = __webpack_require__(/*! ../ERROR_CODES */ \"(ssr)/./node_modules/js-conflux-sdk/src/ERROR_CODES.js\");\n\nclass ParserError extends Error {\n  constructor(message, options = {}) {\n    super();\n    this.message = message;\n    this.code = PARSER_ERROR;\n    Object.assign(this, options);\n  }\n}\n\nclass ParserContext {\n  constructor(origin) {\n    this.arguments = origin;\n    this.path = [];\n  }\n\n  child(key) {\n    const context = new ParserContext(this.arguments);\n    context.path = [...this.path, key];\n    return context;\n  }\n\n  error(message, options = {}) {\n    message = `(Invalid input|args) ${message}`;\n    if (this.path.length > 0) {\n      message = `${message}; path=\"${this.path.join('.')}\"`;\n    }\n    return new ParserError(message, { ...this, ...options });\n  }\n}\n\n// ----------------------------------------------------------------------------\nfunction Parser(func) {\n  function parser(...args) {\n    // eslint-disable-next-line prefer-rest-params\n    const context = (this instanceof ParserContext) ? this : new ParserContext(arguments);\n    return func.call(context, ...args);\n    /* try {\n      return func.call(context, ...args);\n    } catch (e) {\n      throw new ParserError(e.message, e); // create Error here for shallow stack\n    } */\n  }\n\n  parser.constructor = Parser;\n  parser.$before = $before;\n  parser.$parse = $parse;\n  parser.$default = $default;\n  parser.$after = $after;\n  parser.$validate = $validate;\n  parser.$or = $or;\n  return parser;\n}\n\nfunction $before(func) {\n  const parser = this;\n  return Parser(function (...args) {\n    let value;\n    try {\n      value = func(...args);\n    } catch (e) {\n      throw this.error(e.message);\n    }\n    return parser.call(this, value);\n  });\n}\n\nfunction $default(data) {\n  return $before.call(this, value => (value === undefined ? data : value));\n}\n\nfunction $parse(func, condition = lodash.isString) {\n  return $before.call(this, value => (condition(value) ? func(value) : value));\n}\n\nfunction $after(func) {\n  const parser = this;\n  return Parser(function (...args) {\n    const value = parser.call(this, ...args);\n    try {\n      return func(value);\n    } catch (e) {\n      throw this.error(e.message);\n    }\n  });\n}\n\nfunction $validate(func, name) {\n  return $after.call(this, value => {\n    if (!func(value)) {\n      throw new Error(`${value} do not match \"${name || func.name || '$validate'}\"`);\n    }\n    return value;\n  });\n}\n\nfunction $or(schema) {\n  const parserArray = [this, Parser.from(schema)];\n\n  return Parser(function (value) {\n    const errorArray = [];\n    for (const parser of parserArray) {\n      try {\n        return parser.call(this, value);\n      } catch (e) {\n        errorArray.push(e);\n      }\n    }\n\n    const or = errorArray.map(e => (e.or ? e.or : e));\n    const message = lodash.flattenDeep(or).map(e => `(${e.message})`).join(' or ');\n    throw new ParserError(`not match any ${message}`, { or });\n  });\n}\n\n// ----------------------------------------------------------------------------\nParser.fromArray = function (schema, options) {\n  const parser = Parser.from(schema.length ? schema[0] : v => v, options);\n\n  return Parser(function (array) {\n    if (!Array.isArray(array)) {\n      throw this.error(`expected array, got ${typeof array}`);\n    }\n\n    return array.map((v, i) => parser.call(this.child(i), v));\n  });\n};\n\nParser.fromObject = function (schema, options) {\n  const { strict, pick } = options;\n\n  const keyToParser = lodash.mapValues(schema, s => Parser.from(s, options));\n\n  return Parser(function (object) {\n    if (!lodash.isObject(object)) {\n      const errMsg = `\"${options.name ? options.name : ''}\" expected plain object, got \"${typeof object}\"`;\n      throw this.error(errMsg);\n    }\n\n    const result = lodash.mapValues(keyToParser, (parser, k) => {\n      const v = lodash.get(object, k);\n      if (v === undefined && !strict) {\n        return undefined;\n      }\n      return parser.call(this.child(k), v);\n    });\n\n    return pick ? lodash.pickBy(result, v => v !== undefined) : { ...object, ...result };\n  });\n};\n\nParser.fromFunction = function (func, options) {\n  if (func.constructor === Parser) {\n    return func;\n  }\n  return Parser(function (...args) {\n    try {\n      return func(...args);\n    } catch (e) {\n      const errMsg = `formatter: \"${options.name || func.name}\"; args: (${stringifyArgs(args)}) ; errorMessage: ${e.message}`;\n      throw this.error(errMsg, { stack: e.stack });\n    }\n  });\n};\n\nParser.fromValue = function (schema) {\n  return Parser(function (value) {\n    if (value !== schema) {\n      throw this.error(`expected to be ${schema}, got ${value}`);\n    }\n    return value;\n  });\n};\n\nParser.from = function (schema, options = {}) {\n  if (Array.isArray(schema)) {\n    return Parser.fromArray(schema, options);\n  }\n  if (lodash.isPlainObject(schema)) {\n    return Parser.fromObject(schema, options);\n  }\n  if (lodash.isFunction(schema)) {\n    return Parser.fromFunction(schema, options);\n  }\n  return Parser.fromValue(schema);\n};\n\nfunction stringifyArgs(args) {\n  function stringifyNullOrUndefined(v) {\n    // eslint-disable-next-line no-nested-ternary\n    return v === null ? 'null' : v === undefined ? 'undefined' : v;\n  }\n  return args.map(stringifyNullOrUndefined).join(',');\n}\n\nmodule.exports = Parser.from;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/util/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/util/rlp.js":
/*!*****************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/util/rlp.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { decode } = __webpack_require__(/*! rlp */ \"(ssr)/./node_modules/rlp/dist/index.js\");\n/*\n  prefix    | delta | note          | code\n  ----------|-------|---------------|--------------------------------------------------------------\n  0x00~0x7f |   127 | single buffer | <buffer[0]>\n  0x80~0xb7 |    55 | short buffer  | <0x80+length(buffer)>, ...<buffer>\n  0xb8~0xbf |     7 | long buffer   | <0xb8+length(length(buffer))>, ...<length(buffer)>, ...<buffer>\n  0xc0~0xf7 |    55 | short array   | <0xc0+length(array.bytes)>, ...<array.bytes>\n  0xf8~0xff |     7 | long array    | <0xf8+length(length(array.bytes))>, ...<length(array.bytes)>, ...<array.bytes>\n */\n\nconst SHORT_RANGE = 55;\nconst BUFFER_OFFSET = 0x80;\nconst ARRAY_OFFSET = 0xc0;\n\nfunction concat(...args) {\n  return Buffer.concat(args.map(value => {\n    if (Buffer.isBuffer(value)) {\n      return value;\n    }\n\n    if (Number.isSafeInteger(value) && value >= 0) {\n      const hex = value.toString(16);\n      return Buffer.from(hex.length % 2 ? `0${hex}` : hex, 'hex');\n    }\n\n    throw new Error(`invalid value, expect unsigned integer or buffer, got ${value}`);\n  }));\n}\n\n// ----------------------------------------------------------------------------\n/**\n * @param {Array|Buffer} value\n * @return {Buffer}\n */\nfunction encode(value) {\n  if (Buffer.isBuffer(value)) {\n    return encodeBuffer(value);\n  }\n\n  if (Array.isArray(value)) {\n    return encodeArray(value);\n  }\n\n  throw new Error(`invalid value, expect buffer or array, got ${value}`);\n}\n\n/**\n * @param {number} length\n * @param {number} offset - Enum of [BUFFER_OFFSET=0x80, ARRAY_OFFSET=0xc0]\n * @return {Buffer}\n */\nfunction encodeLength(length, offset) {\n  if (length <= SHORT_RANGE) {\n    return concat(length + offset);\n  } else {\n    const lengthBuffer = concat(length);\n    return concat(offset + SHORT_RANGE + lengthBuffer.length, lengthBuffer);\n  }\n}\n\n/**\n * @param {Buffer} buffer\n * @return {Buffer}\n */\nfunction encodeBuffer(buffer) {\n  if (buffer.length === 1 && buffer[0] === 0) {\n    buffer = Buffer.from('');\n  }\n\n  return buffer.length === 1 && buffer[0] < BUFFER_OFFSET\n    ? buffer\n    : concat(encodeLength(buffer.length, BUFFER_OFFSET), buffer);\n}\n\n/**\n * @param {Array} array\n * @return {Buffer}\n */\nfunction encodeArray(array) {\n  const buffer = concat(...array.map(encode));\n  return concat(encodeLength(buffer.length, ARRAY_OFFSET), buffer);\n}\n\n// TODO decode\n\nmodule.exports = { encode, decode };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3V0aWwvcmxwLmpzIiwibWFwcGluZ3MiOiJBQUFBLFFBQVEsU0FBUyxFQUFFLG1CQUFPLENBQUMsbURBQUs7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw4Q0FBOEMsSUFBSTtBQUNsRDs7QUFFQSw2RUFBNkUsTUFBTTtBQUNuRixHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBLFdBQVcsY0FBYztBQUN6QixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsZ0VBQWdFLE1BQU07QUFDdEU7O0FBRUE7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxtQkFBbUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWthc2h5YWRhdi9EZXZlbG9wZXIvQWxsZ2l0RmlsZXMvQ29uZmx1eC1UeG4tdmlzdWFsaXplci9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3V0aWwvcmxwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgZGVjb2RlIH0gPSByZXF1aXJlKCdybHAnKTtcbi8qXG4gIHByZWZpeCAgICB8IGRlbHRhIHwgbm90ZSAgICAgICAgICB8IGNvZGVcbiAgLS0tLS0tLS0tLXwtLS0tLS0tfC0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAweDAwfjB4N2YgfCAgIDEyNyB8IHNpbmdsZSBidWZmZXIgfCA8YnVmZmVyWzBdPlxuICAweDgwfjB4YjcgfCAgICA1NSB8IHNob3J0IGJ1ZmZlciAgfCA8MHg4MCtsZW5ndGgoYnVmZmVyKT4sIC4uLjxidWZmZXI+XG4gIDB4Yjh+MHhiZiB8ICAgICA3IHwgbG9uZyBidWZmZXIgICB8IDwweGI4K2xlbmd0aChsZW5ndGgoYnVmZmVyKSk+LCAuLi48bGVuZ3RoKGJ1ZmZlcik+LCAuLi48YnVmZmVyPlxuICAweGMwfjB4ZjcgfCAgICA1NSB8IHNob3J0IGFycmF5ICAgfCA8MHhjMCtsZW5ndGgoYXJyYXkuYnl0ZXMpPiwgLi4uPGFycmF5LmJ5dGVzPlxuICAweGY4fjB4ZmYgfCAgICAgNyB8IGxvbmcgYXJyYXkgICAgfCA8MHhmOCtsZW5ndGgobGVuZ3RoKGFycmF5LmJ5dGVzKSk+LCAuLi48bGVuZ3RoKGFycmF5LmJ5dGVzKT4sIC4uLjxhcnJheS5ieXRlcz5cbiAqL1xuXG5jb25zdCBTSE9SVF9SQU5HRSA9IDU1O1xuY29uc3QgQlVGRkVSX09GRlNFVCA9IDB4ODA7XG5jb25zdCBBUlJBWV9PRkZTRVQgPSAweGMwO1xuXG5mdW5jdGlvbiBjb25jYXQoLi4uYXJncykge1xuICByZXR1cm4gQnVmZmVyLmNvbmNhdChhcmdzLm1hcCh2YWx1ZSA9PiB7XG4gICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAoTnVtYmVyLmlzU2FmZUludGVnZXIodmFsdWUpICYmIHZhbHVlID49IDApIHtcbiAgICAgIGNvbnN0IGhleCA9IHZhbHVlLnRvU3RyaW5nKDE2KTtcbiAgICAgIHJldHVybiBCdWZmZXIuZnJvbShoZXgubGVuZ3RoICUgMiA/IGAwJHtoZXh9YCA6IGhleCwgJ2hleCcpO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCB2YWx1ZSwgZXhwZWN0IHVuc2lnbmVkIGludGVnZXIgb3IgYnVmZmVyLCBnb3QgJHt2YWx1ZX1gKTtcbiAgfSkpO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vKipcbiAqIEBwYXJhbSB7QXJyYXl8QnVmZmVyfSB2YWx1ZVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5mdW5jdGlvbiBlbmNvZGUodmFsdWUpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICByZXR1cm4gZW5jb2RlQnVmZmVyKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBlbmNvZGVBcnJheSh2YWx1ZSk7XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgdmFsdWUsIGV4cGVjdCBidWZmZXIgb3IgYXJyYXksIGdvdCAke3ZhbHVlfWApO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSBFbnVtIG9mIFtCVUZGRVJfT0ZGU0VUPTB4ODAsIEFSUkFZX09GRlNFVD0weGMwXVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5mdW5jdGlvbiBlbmNvZGVMZW5ndGgobGVuZ3RoLCBvZmZzZXQpIHtcbiAgaWYgKGxlbmd0aCA8PSBTSE9SVF9SQU5HRSkge1xuICAgIHJldHVybiBjb25jYXQobGVuZ3RoICsgb2Zmc2V0KTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBsZW5ndGhCdWZmZXIgPSBjb25jYXQobGVuZ3RoKTtcbiAgICByZXR1cm4gY29uY2F0KG9mZnNldCArIFNIT1JUX1JBTkdFICsgbGVuZ3RoQnVmZmVyLmxlbmd0aCwgbGVuZ3RoQnVmZmVyKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXJcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQnVmZmVyKGJ1ZmZlcikge1xuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMSAmJiBidWZmZXJbMF0gPT09IDApIHtcbiAgICBidWZmZXIgPSBCdWZmZXIuZnJvbSgnJyk7XG4gIH1cblxuICByZXR1cm4gYnVmZmVyLmxlbmd0aCA9PT0gMSAmJiBidWZmZXJbMF0gPCBCVUZGRVJfT0ZGU0VUXG4gICAgPyBidWZmZXJcbiAgICA6IGNvbmNhdChlbmNvZGVMZW5ndGgoYnVmZmVyLmxlbmd0aCwgQlVGRkVSX09GRlNFVCksIGJ1ZmZlcik7XG59XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXlcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXJyYXkoYXJyYXkpIHtcbiAgY29uc3QgYnVmZmVyID0gY29uY2F0KC4uLmFycmF5Lm1hcChlbmNvZGUpKTtcbiAgcmV0dXJuIGNvbmNhdChlbmNvZGVMZW5ndGgoYnVmZmVyLmxlbmd0aCwgQVJSQVlfT0ZGU0VUKSwgYnVmZmVyKTtcbn1cblxuLy8gVE9ETyBkZWNvZGVcblxubW9kdWxlLmV4cG9ydHMgPSB7IGVuY29kZSwgZGVjb2RlIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/util/rlp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/util/sign.js":
/*!******************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/util/sign.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst keccak = __webpack_require__(/*! keccak */ \"(ssr)/./node_modules/keccak/index.js\");\nconst secp256k1 = __webpack_require__(/*! secp256k1 */ \"(ssr)/./node_modules/secp256k1/index.js\");\nconst { syncScrypt: scrypt } = __webpack_require__(/*! scrypt-js */ \"(ssr)/./node_modules/scrypt-js/scrypt.js\");\nconst { isHexString } = __webpack_require__(/*! ./index */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\n\n// ----------------------------------------------------------------------------\n/**\n * keccak 256\n *\n * @param {Buffer} buffer\n * @return {Buffer}\n *\n * @example\n * > keccak256(Buffer.from(''))\n <Buffer c5 d2 46 01 86 f7 23 3c 92 7e 7d b2 dc c7 03 c0 e5 00 b6 53 ca 82 27 3b 7b fa d8 04 5d 85 a4 70>\n */\nfunction keccak256(buffer) {\n  return keccak('keccak256').update(buffer).digest();\n}\n\n/**\n * Makes a checksum address\n *\n * > Note: support [EIP-55](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md)\n * > Note: not support [RSKIP60](https://github.com/rsksmart/RSKIPs/blob/master/IPs/RSKIP60.md) yet\n *\n * @deprecated Please use address.ethChecksumAddress\n * @param {string} address - Hex string\n * @return {string}\n *\n * @example\n * > checksumAddress('0x1b716c51381e76900ebaa7999a488511a4e1fd0a')\n \"0x1B716c51381e76900EBAA7999A488511A4E1fD0a\"\n */\nfunction checksumAddress(address) {\n  const string = address.toLowerCase().replace('0x', '');\n\n  const hash = keccak256(Buffer.from(string)).toString('hex');\n  const sequence = Object.entries(string).map(([index, char]) => {\n    return parseInt(hash[index], 16) >= 8 ? char.toUpperCase() : char;\n  });\n  return `0x${sequence.join('')}`;\n}\n\n// ----------------------------------------------------------------------------\n/**\n * gen a random buffer with `size` bytes.\n *\n * > Note: call `crypto.randomBytes`\n *\n * @param {number} size\n * @return {Buffer}\n *\n * @example\n * > randomBuffer(0)\n <Buffer >\n * > randomBuffer(1)\n <Buffer 33>\n * > randomBuffer(1)\n <Buffer 5a>\n */\nfunction randomBuffer(size) {\n  return crypto.randomBytes(size);\n}\n\n/**\n * Gen a random PrivateKey buffer.\n *\n * @param {Buffer} entropy\n * @return {Buffer}\n *\n * @example\n * > randomPrivateKey()\n <Buffer 23 fb 3b 2b 1f c9 36 8c a4 8e 5b dc c7 a9 e2 bd 67 81 43 3b f2 3a cc da da ff a9 dd dd b6 08 d4>\n * > randomPrivateKey()\n <Buffer e7 5b 68 fb f9 50 19 94 07 80 d5 13 2e 40 a7 f9 a1 b0 5d 72 c8 86 ca d1 c6 59 cd a6 bf 37 cb 73>\n\n * @example\n * > entropy = randomBuffer(32)\n * > randomPrivateKey(entropy)\n <Buffer 57 90 e8 3d 16 10 02 b9 a4 33 87 e1 6b cd 40 7e f7 22 b1 d8 94 ae 98 bf 76 a4 56 fb b6 0c 4b 4a>\n * > randomPrivateKey(entropy) // same `entropy`\n <Buffer 89 44 ef 31 d4 9c d0 25 9f b0 de 61 99 12 4a 21 57 43 d4 4b af ae ef ae e1 3a ba 05 c3 e6 ad 21>\n */\nfunction randomPrivateKey(entropy = randomBuffer(32)) {\n  if (!(Buffer.isBuffer(entropy) && entropy.length === 32)) {\n    throw new Error(`entropy must be 32 length Buffer, got \"${typeof entropy}\"`);\n  }\n\n  const inner = keccak256(Buffer.concat([randomBuffer(32), entropy]));\n  const middle = Buffer.concat([randomBuffer(32), inner, randomBuffer(32)]);\n  return keccak256(middle);\n}\n\n/**\n * @param {Buffer} privateKey\n * @return {Buffer}\n */\nfunction privateKeyToPublicKey(privateKey) {\n  return secp256k1.publicKeyCreate(privateKey, false).slice(1);\n}\n\n/**\n * Get account address by public key.\n *\n * > Account address hex starts with '0x1'\n *\n * @param {Buffer|string} publicKey\n * @return {Buffer}\n *\n * @example\n * > publicKeyToAddress(Buffer.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]))\n <Buffer 4c 6f a3 22 12 5f a3 1a 42 cb dd a8 73 0d 4c f0 20 0d 72 db>\n */\nfunction publicKeyToAddress(publicKey) {\n  if (isHexString(publicKey)) publicKey = Buffer.from(publicKey.slice(2), 'hex');\n  if (!Buffer.isBuffer(publicKey)) throw new Error('publicKey should be a buffer');\n  if (publicKey.length === 65) publicKey = publicKey.slice(1);\n  if (publicKey.length !== 64) throw new Error('publicKey length should be 64 or 65');\n  const buffer = keccak256(publicKey).slice(-20);\n  buffer[0] = (buffer[0] & 0x0f) | 0x10; // eslint-disable-line no-bitwise\n  return buffer;\n}\n\n/**\n * Get address by private key.\n *\n * @param {Buffer} privateKey\n * @return {Buffer}\n *\n * @example\n * > privateKeyToAddress(Buffer.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]))\n <Buffer 0d b9 e0 02 85 67 52 28 8b ef 47 60 fa 67 94 ec 83 a8 53 b9>\n */\nfunction privateKeyToAddress(privateKey) {\n  return publicKeyToAddress(privateKeyToPublicKey(privateKey));\n}\n\n/**\n * Sign ecdsa\n *\n * @param {Buffer} hash\n * @param {Buffer} privateKey\n * @return {object} ECDSA signature object.\n * - r {Buffer}\n * - s {Buffer}\n * - v {number}\n *\n * @example\n * > privateKey = Buffer.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]);\n * > buffer32 = Buffer.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n * > ecdsaSign(buffer32, privateKey)\n {\n  r: <Buffer 21 ab b4 c3 fd 51 75 81 e6 c7 e7 e0 7f 40 4f a2 2c ba 8d 8f 71 27 0b 29 58 42 b8 3c 44 b5 a4 c6>,\n  s: <Buffer 08 59 7b 69 8f 8f 3c c2 ba 0b 45 ee a7 7f 55 29 ad f9 5c a5 51 41 e7 9b 56 53 77 3d 00 5d 18 58>,\n  v: 0\n }\n */\nfunction ecdsaSign(hash, privateKey) {\n  const sig = secp256k1.sign(hash, privateKey);\n  return {\n    r: sig.signature.slice(0, 32),\n    s: sig.signature.slice(32, 64),\n    v: sig.recovery,\n  };\n}\n\n/**\n * Recover ecdsa\n *\n * @param {Buffer} hash\n * @param {object} options\n * @param {Buffer} options.r\n * @param {Buffer} options.s\n * @param {number} options.v\n * @return {Buffer} publicKey\n *\n * @example\n * > privateKey = Buffer.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1])\n * > buffer32 = Buffer.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n * > privateKeyToAddress(privateKey)\n <Buffer 0d b9 e0 02 85 67 52 28 8b ef 47 60 fa 67 94 ec 83 a8 53 b9>\n * > publicKeyToAddress(ecdsaRecover(buffer32, ecdsaSign(buffer32, privateKey)))\n <Buffer 0d b9 e0 02 85 67 52 28 8b ef 47 60 fa 67 94 ec 83 a8 53 b9>\n */\nfunction ecdsaRecover(hash, { r, s, v }) {\n  const senderPublic = secp256k1.recover(hash, Buffer.concat([r, s]), v);\n  return secp256k1.publicKeyConvert(senderPublic, false).slice(1);\n}\n\n// ----------------------------------------------------------------------------\nfunction uuidV4() {\n  return [4, 2, 2, 2, 6].map(randomBuffer).map(v => v.toString('hex')).join('-');\n}\n\n/**\n *\n * @param {Buffer} privateKey\n * @param {string|Buffer} password\n * @return {object} - keystoreV3 object\n *\n * @example\n * > encrypt(Buffer.from('0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef', 'hex'), 'password')\n {\n    version: 3,\n    id: '0bb47ee0-aac3-a006-2717-03877afa15f0',\n    address: '1cad0b19bb29d4674531d6f115237e16afce377c',\n    crypto: {\n      ciphertext: 'a8ec41d2440311ce897bacb6f7942f3235113fa17c4ae6732e032336038a8f73',\n      cipherparams: { iv: '85b5e092c1c32129e3d27df8c581514d' },\n      cipher: 'aes-128-ctr',\n      kdf: 'scrypt',\n      kdfparams: {\n        dklen: 32,\n        salt: 'b662f09bdf6751ac599219732609dceac430bc0629a7906eaa1451555f051ebc',\n        n: 8192,\n        r: 8,\n        p: 1\n      },\n      mac: 'cc89df7ef6c27d284526a65cabf8e5042cdf1ec1aa4ee36dcf65b965fa34843d'\n    }\n  }\n */\nfunction encrypt(privateKey, password) {\n  const cipher = 'aes-128-ctr';\n  const n = 8192;\n  const r = 8;\n  const p = 1;\n  const dklen = 32;\n  const salt = randomBuffer(32);\n  const iv = randomBuffer(16);\n\n  password = Buffer.from(password);\n  const derived = scrypt(password, salt, n, r, p, dklen);\n  const ciphertext = crypto.createCipheriv(cipher, derived.slice(0, 16), iv).update(privateKey);\n  const mac = keccak256(Buffer.concat([derived.slice(16, 32), ciphertext]));\n  const publicKey = privateKeyToPublicKey(privateKey);\n  const address = keccak256(publicKey).slice(-20);\n\n  return {\n    version: 3,\n    id: uuidV4(),\n    address: address.toString('hex'),\n    crypto: {\n      ciphertext: ciphertext.toString('hex'),\n      cipherparams: { iv: iv.toString('hex') },\n      cipher,\n      kdf: 'scrypt',\n      kdfparams: { dklen, salt: salt.toString('hex'), n, r, p },\n      mac: mac.toString('hex'),\n    },\n  };\n}\n\n/**\n * Decrypt account encrypt info.\n *\n * @param {object} keystoreV3\n * @param {number} keystoreV3.version\n * @param {object} keystoreV3.crypto\n * @param {string} keystoreV3.crypto.ciphertext\n * @param {object} keystoreV3.crypto.cipherparams\n * @param {string} keystoreV3.crypto.cipherparams.iv\n * @param {string} keystoreV3.crypto.cipher\n * @param {string} keystoreV3.crypto.kdf\n * @param {object} keystoreV3.crypto.kdfparams\n * @param {number} keystoreV3.crypto.kdfparams.dklen\n * @param {string} keystoreV3.crypto.kdfparams.salt\n * @param {number} keystoreV3.crypto.kdfparams.n\n * @param {number} keystoreV3.crypto.kdfparams.r\n * @param {number} keystoreV3.crypto.kdfparams.p\n * @param {string} keystoreV3.crypto.mac\n * @param {string|Buffer} password\n * @return {Buffer} Buffer of private key\n *\n * @example\n * > decrypt({\n    version: 3,\n    id: '0bb47ee0-aac3-a006-2717-03877afa15f0',\n    address: '1cad0b19bb29d4674531d6f115237e16afce377c',\n    crypto: {\n      ciphertext: 'a8ec41d2440311ce897bacb6f7942f3235113fa17c4ae6732e032336038a8f73',\n      cipherparams: { iv: '85b5e092c1c32129e3d27df8c581514d' },\n      cipher: 'aes-128-ctr',\n      kdf: 'scrypt',\n      kdfparams: {\n        dklen: 32,\n        salt: 'b662f09bdf6751ac599219732609dceac430bc0629a7906eaa1451555f051ebc',\n        n: 8192,\n        r: 8,\n        p: 1\n      },\n      mac: 'cc89df7ef6c27d284526a65cabf8e5042cdf1ec1aa4ee36dcf65b965fa34843d'\n    }\n  }, 'password')\n <Buffer 01 23 45 67 89 ab cd ef 01 23 45 67 89 ab cd ef 01 23 45 67 89 ab cd ef 01 23 45 67 89 ab cd ef>\n */\nfunction decrypt({\n  version,\n  crypto: {\n    ciphertext,\n    cipherparams: { iv },\n    cipher,\n    kdf,\n    kdfparams: { dklen, salt, n, r, p },\n    mac,\n  },\n}, password) {\n  if (version !== 3) {\n    throw new Error('Not a valid V3 wallet');\n  }\n  if (kdf !== 'scrypt') {\n    throw new Error(`Unsupported kdf \"${kdf}\", only support \"scrypt\"`);\n  }\n\n  password = Buffer.from(password);\n  ciphertext = Buffer.from(ciphertext, 'hex');\n  iv = Buffer.from(iv, 'hex');\n  salt = Buffer.from(salt, 'hex');\n  mac = Buffer.from(mac, 'hex');\n\n  const derived = scrypt(password, salt, n, r, p, dklen);\n  if (!keccak256(Buffer.concat([derived.slice(16, 32), ciphertext])).equals(mac)) {\n    throw new Error('Key derivation failed, possibly wrong password!');\n  }\n  return crypto.createDecipheriv(cipher, derived.slice(0, 16), iv).update(ciphertext);\n}\n\nmodule.exports = {\n  keccak256,\n  checksumAddress,\n\n  randomBuffer,\n  randomPrivateKey,\n  privateKeyToPublicKey,\n  publicKeyToAddress,\n  privateKeyToAddress,\n  ecdsaSign,\n  ecdsaRecover,\n\n  encrypt,\n  decrypt,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/util/sign.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/wallet/Account.js":
/*!***********************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/wallet/Account.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Transaction = __webpack_require__(/*! ../Transaction */ \"(ssr)/./node_modules/js-conflux-sdk/src/Transaction.js\");\nconst Message = __webpack_require__(/*! ../Message */ \"(ssr)/./node_modules/js-conflux-sdk/src/Message.js\");\n\n/**\n * Account abstract class\n */\nclass Account {\n  /**\n   * @param {string} address\n   */\n  constructor(address) {\n    this.address = address;\n  }\n\n  /**\n   * @param {object} options\n   * @return {Promise<import('../Transaction').Transaction>}\n   */\n  async signTransaction(options) {\n    return new Transaction(options);\n  }\n\n  /**\n   * @param {string} message\n   * @return {Promise<import('../Message').Message>}\n   */\n  async signMessage(message) {\n    return new Message(message);\n  }\n\n  /**\n   * @return {string} Address as string.\n   */\n  toString() {\n    return this.address;\n  }\n\n  /**\n   * @return {string} Address as JSON string.\n   */\n  toJSON() {\n    return this.address;\n  }\n}\n\nmodule.exports = Account;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3dhbGxldC9BY2NvdW50LmpzIiwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQixtQkFBTyxDQUFDLDhFQUFnQjtBQUM1QyxnQkFBZ0IsbUJBQU8sQ0FBQyxzRUFBWTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWthc2h5YWRhdi9EZXZlbG9wZXIvQWxsZ2l0RmlsZXMvQ29uZmx1eC1UeG4tdmlzdWFsaXplci9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3dhbGxldC9BY2NvdW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFRyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi4vVHJhbnNhY3Rpb24nKTtcbmNvbnN0IE1lc3NhZ2UgPSByZXF1aXJlKCcuLi9NZXNzYWdlJyk7XG5cbi8qKlxuICogQWNjb3VudCBhYnN0cmFjdCBjbGFzc1xuICovXG5jbGFzcyBBY2NvdW50IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyZXNzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihhZGRyZXNzKSB7XG4gICAgdGhpcy5hZGRyZXNzID0gYWRkcmVzcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPGltcG9ydCgnLi4vVHJhbnNhY3Rpb24nKS5UcmFuc2FjdGlvbj59XG4gICAqL1xuICBhc3luYyBzaWduVHJhbnNhY3Rpb24ob3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgVHJhbnNhY3Rpb24ob3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAgICogQHJldHVybiB7UHJvbWlzZTxpbXBvcnQoJy4uL01lc3NhZ2UnKS5NZXNzYWdlPn1cbiAgICovXG4gIGFzeW5jIHNpZ25NZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gbmV3IE1lc3NhZ2UobWVzc2FnZSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfSBBZGRyZXNzIGFzIHN0cmluZy5cbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmFkZHJlc3M7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfSBBZGRyZXNzIGFzIEpTT04gc3RyaW5nLlxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLmFkZHJlc3M7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBY2NvdW50O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/wallet/Account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/wallet/PrivateKeyAccount.js":
/*!*********************************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/wallet/PrivateKeyAccount.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { assert } = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\nconst format = __webpack_require__(/*! ../util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\nconst sign = __webpack_require__(/*! ../util/sign */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/sign.js\");\nconst Account = __webpack_require__(/*! ./Account */ \"(ssr)/./node_modules/js-conflux-sdk/src/wallet/Account.js\");\n\nclass PrivateKeyAccount extends Account {\n  /**\n   * Create a new PrivateKeyAccount with random privateKey.\n   *\n   * @param {string|Buffer} entropy - Entropy of random account, if pass undefined will random generate a buffer\n   * @param {number} networkId - network id of account\n   * @return {PrivateKeyAccount}\n   *\n   * @example\n   * > PrivateKeyAccount.random(undefined, 1)\n   PrivateKeyAccount {\n      privateKey: '0xd28edbdb7bbe75787b84c5f525f47666a3274bb06561581f00839645f3c26f66',\n      publicKey: '0xc42b53ae2ef95fee489948d33df391c4a9da31b7a3e29cf772c24eb42f74e94ab3bfe00bf29a239c17786a5b921853b7c5344d36694db43aa849e401f91566a5',\n      address: 'cfxtest:aass3rfcwjz1ab9cg5rtbv61531fmwnsuuy8c26f20'\n    }\n   * > PrivateKeyAccount.random(undefined, 1) // gen a different account from above\n   PrivateKeyAccount {\n      privateKey: '0x1b67150f56f49556ef7e3899024d83c125d84990d311ec08fa98aa1433bc0f53',\n      publicKey: '0xd442207828ffd4dad918fea0d75d42dbea1fe5e3789c00a82e18ce8229714eae3f70b12f2f1abd795ad3e5c52a5a597289eb5096548438c233431f498b47b9a6',\n      address: 'cfxtest:aanpezyvznsdg29zu20wpudwnbhx7t4gcpzcnkzjd2'\n    }\n   * > PrivateKeyAccount.random('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 1);\n   PrivateKeyAccount {\n      privateKey: '0x1d41e006afd28ea339922d8ab4be93154a14d4f1b6d0ad4e7aabf807e7536a5f',\n      publicKey: '0x4c07c75d3fdc5b1d6afef6ec374b0eaac86bcaa771a1d536bc4ce6f111b1c60e414b370e4cf31bf7770ae6818a3518c485398a43857d9053153f6eb4f5644a90',\n      address: 'cfxtest:aajx4wn2kwarr8h71uf880w40dp6x91feac1n6ur3s'\n    }\n   * > PrivateKeyAccount.random('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 1);\n   * // gen a different account from above, even use same entropy\n   PrivateKeyAccount {\n      privateKey: '0x5a34ff3318674c33209ce856218890e9a6ee3811e8a51e3094ed1e6a94bf58ef',\n      publicKey: '0xe530d77c3ed6115cb46ba79821085bf67d2a7a8c808c1d52dec03fd7a82e569c2136dba84b21d40f46d90484722b21a9d5a8038495adf93f2eed564ababa2422',\n      address: 'cfxtest:aat0h9htkmzjvub61rsk9p4n64s863suza6zu7d2rr'\n    }\n   */\n  static random(entropy, networkId) {\n    const privateKeyBuffer = sign.randomPrivateKey(entropy === undefined ? undefined : format.hexBuffer(entropy));\n    return new this(privateKeyBuffer, networkId);\n  }\n\n  /**\n   * Decrypt account encrypt info.\n   *\n   * @param {object} keystore - Keystore version 3 object.\n   * @param {string|Buffer} password - Password for keystore to decrypt with.\n   * @param {number} networkId - Network id of account\n   * @return {PrivateKeyAccount}\n   *\n   * @example\n   * > PrivateKeyAccount.decrypt({\n    version: 3,\n    id: '0bb47ee0-aac3-a006-2717-03877afa15f0',\n    address: '1cad0b19bb29d4674531d6f115237e16afce377c',\n    crypto: {\n      ciphertext: 'a8ec41d2440311ce897bacb6f7942f3235113fa17c4ae6732e032336038a8f73',\n      cipherparams: { iv: '85b5e092c1c32129e3d27df8c581514d' },\n      cipher: 'aes-128-ctr',\n      kdf: 'scrypt',\n      kdfparams: {\n        dklen: 32,\n        salt: 'b662f09bdf6751ac599219732609dceac430bc0629a7906eaa1451555f051ebc',\n        n: 8192,\n        r: 8,\n        p: 1\n      },\n      mac: 'cc89df7ef6c27d284526a65cabf8e5042cdf1ec1aa4ee36dcf65b965fa34843d'\n    }\n  }, 'password');\n   PrivateKeyAccount {\n    address: '0x1cad0b19bb29d4674531d6f115237e16afce377c',\n    publicKey: '0x4646ae5047316b4230d0086c8acec687f00b1cd9d1dc634f6cb358ac0a9a8ffffe77b4dd0a4bfb95851f3b7355c781dd60f8418fc8a65d14907aff47c903a559',\n    privateKey: '0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef'\n  }\n   */\n  static decrypt(keystore, password, networkId) {\n    const privateKeyBuffer = sign.decrypt(keystore, password);\n    return new this(privateKeyBuffer, networkId);\n  }\n\n  /**\n   * Create a account by privateKey.\n   *\n   * @param {string|Buffer} privateKey - Private key of account\n   * @param {number} networkId - Network id of account\n   * @return {PrivateKeyAccount}\n   *\n   * @example\n   * > new PrivateKeyAccount('0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef')\n   PrivateKeyAccount {\n    address: 'cfxtest:aasm4c231py7j34fghntcfkdt2nm9xv1tu6jd3r1s7',\n    publicKey: '0x4646ae5047316b4230d0086c8acec687f00b1cd9d1dc634f6cb358ac0a9a8ffffe77b4dd0a4bfb95851f3b7355c781dd60f8418fc8a65d14907aff47c903a559',\n    privateKey: '0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef'\n  }\n   */\n  constructor(privateKey, networkId) {\n    const privateKeyBuffer = format.hexBuffer(privateKey);\n    const publicKeyBuffer = sign.privateKeyToPublicKey(privateKeyBuffer);\n    const addressBuffer = sign.publicKeyToAddress(publicKeyBuffer);\n\n    super(format.address(addressBuffer, networkId));\n    this.publicKey = format.publicKey(publicKeyBuffer);\n    this.privateKey = format.privateKey(privateKeyBuffer);\n    this.networkId = networkId;\n  }\n\n  /**\n   * Encrypt account privateKey to object.\n   *\n   * @param {string} password\n   * @return {object} - keystoreV3 object\n   *\n   * @example\n   * > account = new PrivateKeyAccount('0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef')\n   * > account.encrypt('password')\n   {version:3, id:..., address:..., crypto:...}\n   */\n  encrypt(password) {\n    return sign.encrypt(format.hexBuffer(this.privateKey), password);\n  }\n\n  /**\n   * Sign a transaction.\n   *\n   * @param {object} options - See [Transaction](Transaction.md#Transaction.js/Transaction/**constructor**)\n   * @return {Promise<import('../Transaction').Transaction>}\n   *\n   * @example\n   * > account = new PrivateKeyAccount('0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef')\n   * > transaction = account.signTransaction({\n      nonce: 0,\n      gasPrice: 100,\n      gas: 10000,\n      storageLimit: 10000,\n      epochHeight: 100,\n      chainId: 0,\n    })\n\n   Transaction {\n      from: 'cfxtest:aasm4c231py7j34fghntcfkdt2nm9xv1tu6jd3r1s7',\n      nonce: 0,\n      gasPrice: 100,\n      gas: 10000,\n      to: undefined,\n      value: undefined,\n      storageLimit: 10000,\n      epochHeight: 100,\n      chainId: 0,\n      data: undefined,\n      v: 0,\n      r: '0x096f4e00ac15f6bd6e09937e99f0e54aaa2dd0f4c6bd8421e1e81b0e8bd30723',\n      s: '0x41e63a41ede0cbb8ccfaa827423c654dcdc09fb1aa1c3a7233566544aff4cd9a'\n    }\n   */\n  async signTransaction(options) {\n    const transaction = await super.signTransaction(options);\n    transaction.sign(this.privateKey, this.networkId); // sign will cover r,s,v fields\n\n    assert(transaction.from === this.address, {\n      message: 'Invalid sign transaction.from',\n      expected: this.address,\n      got: transaction.from,\n    });\n\n    return transaction;\n  }\n\n  /**\n   * Sign a string.\n   *\n   * @param {string} options\n   * @return {Promise<import('../Message').Message>}\n   *\n   * @example\n   * > account = new PrivateKeyAccount('0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef')\n   * > message = account.signMessage('Hello World')\n   Message {\n      message: 'Hello World',\n      signature: '0x6e913e2b76459f19ebd269b82b51a70e912e909b2f5c002312efc27bcc280f3c29134d382aad0dbd3f0ccc9f0eb8f1dbe3f90141d81574ebb6504156b0d7b95f01'\n    }\n   */\n  async signMessage(options) {\n    const message = await super.signMessage(options);\n    message.sign(this.privateKey, this.networkId); // sign will cover r,s,v fields\n\n    assert(message.from === this.address, {\n      message: 'Invalid sign message.from',\n      expected: this.address,\n      got: message.from,\n    });\n\n    return message;\n  }\n}\n\nmodule.exports = PrivateKeyAccount;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3dhbGxldC9Qcml2YXRlS2V5QWNjb3VudC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxRQUFRLFNBQVMsRUFBRSxtQkFBTyxDQUFDLHNFQUFTO0FBQ3BDLGVBQWUsbUJBQU8sQ0FBQyw4RUFBZ0I7QUFDdkMsYUFBYSxtQkFBTyxDQUFDLDBFQUFjO0FBQ25DLGdCQUFnQixtQkFBTyxDQUFDLDRFQUFXOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZUFBZTtBQUM1QixhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsZUFBZTtBQUM1QixhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isd0NBQXdDO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGVBQWU7QUFDNUIsYUFBYSxRQUFRO0FBQ3JCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVEOztBQUV2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7O0FBRW5EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWthc2h5YWRhdi9EZXZlbG9wZXIvQWxsZ2l0RmlsZXMvQ29uZmx1eC1UeG4tdmlzdWFsaXplci9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3dhbGxldC9Qcml2YXRlS2V5QWNjb3VudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGFzc2VydCB9ID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuY29uc3QgZm9ybWF0ID0gcmVxdWlyZSgnLi4vdXRpbC9mb3JtYXQnKTtcbmNvbnN0IHNpZ24gPSByZXF1aXJlKCcuLi91dGlsL3NpZ24nKTtcbmNvbnN0IEFjY291bnQgPSByZXF1aXJlKCcuL0FjY291bnQnKTtcblxuY2xhc3MgUHJpdmF0ZUtleUFjY291bnQgZXh0ZW5kcyBBY2NvdW50IHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBQcml2YXRlS2V5QWNjb3VudCB3aXRoIHJhbmRvbSBwcml2YXRlS2V5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xCdWZmZXJ9IGVudHJvcHkgLSBFbnRyb3B5IG9mIHJhbmRvbSBhY2NvdW50LCBpZiBwYXNzIHVuZGVmaW5lZCB3aWxsIHJhbmRvbSBnZW5lcmF0ZSBhIGJ1ZmZlclxuICAgKiBAcGFyYW0ge251bWJlcn0gbmV0d29ya0lkIC0gbmV0d29yayBpZCBvZiBhY2NvdW50XG4gICAqIEByZXR1cm4ge1ByaXZhdGVLZXlBY2NvdW50fVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA+IFByaXZhdGVLZXlBY2NvdW50LnJhbmRvbSh1bmRlZmluZWQsIDEpXG4gICBQcml2YXRlS2V5QWNjb3VudCB7XG4gICAgICBwcml2YXRlS2V5OiAnMHhkMjhlZGJkYjdiYmU3NTc4N2I4NGM1ZjUyNWY0NzY2NmEzMjc0YmIwNjU2MTU4MWYwMDgzOTY0NWYzYzI2ZjY2JyxcbiAgICAgIHB1YmxpY0tleTogJzB4YzQyYjUzYWUyZWY5NWZlZTQ4OTk0OGQzM2RmMzkxYzRhOWRhMzFiN2EzZTI5Y2Y3NzJjMjRlYjQyZjc0ZTk0YWIzYmZlMDBiZjI5YTIzOWMxNzc4NmE1YjkyMTg1M2I3YzUzNDRkMzY2OTRkYjQzYWE4NDllNDAxZjkxNTY2YTUnLFxuICAgICAgYWRkcmVzczogJ2NmeHRlc3Q6YWFzczNyZmN3anoxYWI5Y2c1cnRidjYxNTMxZm13bnN1dXk4YzI2ZjIwJ1xuICAgIH1cbiAgICogPiBQcml2YXRlS2V5QWNjb3VudC5yYW5kb20odW5kZWZpbmVkLCAxKSAvLyBnZW4gYSBkaWZmZXJlbnQgYWNjb3VudCBmcm9tIGFib3ZlXG4gICBQcml2YXRlS2V5QWNjb3VudCB7XG4gICAgICBwcml2YXRlS2V5OiAnMHgxYjY3MTUwZjU2ZjQ5NTU2ZWY3ZTM4OTkwMjRkODNjMTI1ZDg0OTkwZDMxMWVjMDhmYTk4YWExNDMzYmMwZjUzJyxcbiAgICAgIHB1YmxpY0tleTogJzB4ZDQ0MjIwNzgyOGZmZDRkYWQ5MThmZWEwZDc1ZDQyZGJlYTFmZTVlMzc4OWMwMGE4MmUxOGNlODIyOTcxNGVhZTNmNzBiMTJmMmYxYWJkNzk1YWQzZTVjNTJhNWE1OTcyODllYjUwOTY1NDg0MzhjMjMzNDMxZjQ5OGI0N2I5YTYnLFxuICAgICAgYWRkcmVzczogJ2NmeHRlc3Q6YWFucGV6eXZ6bnNkZzI5enUyMHdwdWR3bmJoeDd0NGdjcHpjbmt6amQyJ1xuICAgIH1cbiAgICogPiBQcml2YXRlS2V5QWNjb3VudC5yYW5kb20oJzB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZicsIDEpO1xuICAgUHJpdmF0ZUtleUFjY291bnQge1xuICAgICAgcHJpdmF0ZUtleTogJzB4MWQ0MWUwMDZhZmQyOGVhMzM5OTIyZDhhYjRiZTkzMTU0YTE0ZDRmMWI2ZDBhZDRlN2FhYmY4MDdlNzUzNmE1ZicsXG4gICAgICBwdWJsaWNLZXk6ICcweDRjMDdjNzVkM2ZkYzViMWQ2YWZlZjZlYzM3NGIwZWFhYzg2YmNhYTc3MWExZDUzNmJjNGNlNmYxMTFiMWM2MGU0MTRiMzcwZTRjZjMxYmY3NzcwYWU2ODE4YTM1MThjNDg1Mzk4YTQzODU3ZDkwNTMxNTNmNmViNGY1NjQ0YTkwJyxcbiAgICAgIGFkZHJlc3M6ICdjZnh0ZXN0OmFhang0d24ya3dhcnI4aDcxdWY4ODB3NDBkcDZ4OTFmZWFjMW42dXIzcydcbiAgICB9XG4gICAqID4gUHJpdmF0ZUtleUFjY291bnQucmFuZG9tKCcweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYnLCAxKTtcbiAgICogLy8gZ2VuIGEgZGlmZmVyZW50IGFjY291bnQgZnJvbSBhYm92ZSwgZXZlbiB1c2Ugc2FtZSBlbnRyb3B5XG4gICBQcml2YXRlS2V5QWNjb3VudCB7XG4gICAgICBwcml2YXRlS2V5OiAnMHg1YTM0ZmYzMzE4Njc0YzMzMjA5Y2U4NTYyMTg4OTBlOWE2ZWUzODExZThhNTFlMzA5NGVkMWU2YTk0YmY1OGVmJyxcbiAgICAgIHB1YmxpY0tleTogJzB4ZTUzMGQ3N2MzZWQ2MTE1Y2I0NmJhNzk4MjEwODViZjY3ZDJhN2E4YzgwOGMxZDUyZGVjMDNmZDdhODJlNTY5YzIxMzZkYmE4NGIyMWQ0MGY0NmQ5MDQ4NDcyMmIyMWE5ZDVhODAzODQ5NWFkZjkzZjJlZWQ1NjRhYmFiYTI0MjInLFxuICAgICAgYWRkcmVzczogJ2NmeHRlc3Q6YWF0MGg5aHRrbXpqdnViNjFyc2s5cDRuNjRzODYzc3V6YTZ6dTdkMnJyJ1xuICAgIH1cbiAgICovXG4gIHN0YXRpYyByYW5kb20oZW50cm9weSwgbmV0d29ya0lkKSB7XG4gICAgY29uc3QgcHJpdmF0ZUtleUJ1ZmZlciA9IHNpZ24ucmFuZG9tUHJpdmF0ZUtleShlbnRyb3B5ID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBmb3JtYXQuaGV4QnVmZmVyKGVudHJvcHkpKTtcbiAgICByZXR1cm4gbmV3IHRoaXMocHJpdmF0ZUtleUJ1ZmZlciwgbmV0d29ya0lkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNyeXB0IGFjY291bnQgZW5jcnlwdCBpbmZvLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0ga2V5c3RvcmUgLSBLZXlzdG9yZSB2ZXJzaW9uIDMgb2JqZWN0LlxuICAgKiBAcGFyYW0ge3N0cmluZ3xCdWZmZXJ9IHBhc3N3b3JkIC0gUGFzc3dvcmQgZm9yIGtleXN0b3JlIHRvIGRlY3J5cHQgd2l0aC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG5ldHdvcmtJZCAtIE5ldHdvcmsgaWQgb2YgYWNjb3VudFxuICAgKiBAcmV0dXJuIHtQcml2YXRlS2V5QWNjb3VudH1cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogPiBQcml2YXRlS2V5QWNjb3VudC5kZWNyeXB0KHtcbiAgICB2ZXJzaW9uOiAzLFxuICAgIGlkOiAnMGJiNDdlZTAtYWFjMy1hMDA2LTI3MTctMDM4NzdhZmExNWYwJyxcbiAgICBhZGRyZXNzOiAnMWNhZDBiMTliYjI5ZDQ2NzQ1MzFkNmYxMTUyMzdlMTZhZmNlMzc3YycsXG4gICAgY3J5cHRvOiB7XG4gICAgICBjaXBoZXJ0ZXh0OiAnYThlYzQxZDI0NDAzMTFjZTg5N2JhY2I2Zjc5NDJmMzIzNTExM2ZhMTdjNGFlNjczMmUwMzIzMzYwMzhhOGY3MycsXG4gICAgICBjaXBoZXJwYXJhbXM6IHsgaXY6ICc4NWI1ZTA5MmMxYzMyMTI5ZTNkMjdkZjhjNTgxNTE0ZCcgfSxcbiAgICAgIGNpcGhlcjogJ2Flcy0xMjgtY3RyJyxcbiAgICAgIGtkZjogJ3NjcnlwdCcsXG4gICAgICBrZGZwYXJhbXM6IHtcbiAgICAgICAgZGtsZW46IDMyLFxuICAgICAgICBzYWx0OiAnYjY2MmYwOWJkZjY3NTFhYzU5OTIxOTczMjYwOWRjZWFjNDMwYmMwNjI5YTc5MDZlYWExNDUxNTU1ZjA1MWViYycsXG4gICAgICAgIG46IDgxOTIsXG4gICAgICAgIHI6IDgsXG4gICAgICAgIHA6IDFcbiAgICAgIH0sXG4gICAgICBtYWM6ICdjYzg5ZGY3ZWY2YzI3ZDI4NDUyNmE2NWNhYmY4ZTUwNDJjZGYxZWMxYWE0ZWUzNmRjZjY1Yjk2NWZhMzQ4NDNkJ1xuICAgIH1cbiAgfSwgJ3Bhc3N3b3JkJyk7XG4gICBQcml2YXRlS2V5QWNjb3VudCB7XG4gICAgYWRkcmVzczogJzB4MWNhZDBiMTliYjI5ZDQ2NzQ1MzFkNmYxMTUyMzdlMTZhZmNlMzc3YycsXG4gICAgcHVibGljS2V5OiAnMHg0NjQ2YWU1MDQ3MzE2YjQyMzBkMDA4NmM4YWNlYzY4N2YwMGIxY2Q5ZDFkYzYzNGY2Y2IzNThhYzBhOWE4ZmZmZmU3N2I0ZGQwYTRiZmI5NTg1MWYzYjczNTVjNzgxZGQ2MGY4NDE4ZmM4YTY1ZDE0OTA3YWZmNDdjOTAzYTU1OScsXG4gICAgcHJpdmF0ZUtleTogJzB4MDEyMzQ1Njc4OWFiY2RlZjAxMjM0NTY3ODlhYmNkZWYwMTIzNDU2Nzg5YWJjZGVmMDEyMzQ1Njc4OWFiY2RlZidcbiAgfVxuICAgKi9cbiAgc3RhdGljIGRlY3J5cHQoa2V5c3RvcmUsIHBhc3N3b3JkLCBuZXR3b3JrSWQpIHtcbiAgICBjb25zdCBwcml2YXRlS2V5QnVmZmVyID0gc2lnbi5kZWNyeXB0KGtleXN0b3JlLCBwYXNzd29yZCk7XG4gICAgcmV0dXJuIG5ldyB0aGlzKHByaXZhdGVLZXlCdWZmZXIsIG5ldHdvcmtJZCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgYWNjb3VudCBieSBwcml2YXRlS2V5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xCdWZmZXJ9IHByaXZhdGVLZXkgLSBQcml2YXRlIGtleSBvZiBhY2NvdW50XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuZXR3b3JrSWQgLSBOZXR3b3JrIGlkIG9mIGFjY291bnRcbiAgICogQHJldHVybiB7UHJpdmF0ZUtleUFjY291bnR9XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqID4gbmV3IFByaXZhdGVLZXlBY2NvdW50KCcweDAxMjM0NTY3ODlhYmNkZWYwMTIzNDU2Nzg5YWJjZGVmMDEyMzQ1Njc4OWFiY2RlZjAxMjM0NTY3ODlhYmNkZWYnKVxuICAgUHJpdmF0ZUtleUFjY291bnQge1xuICAgIGFkZHJlc3M6ICdjZnh0ZXN0OmFhc200YzIzMXB5N2ozNGZnaG50Y2ZrZHQybm05eHYxdHU2amQzcjFzNycsXG4gICAgcHVibGljS2V5OiAnMHg0NjQ2YWU1MDQ3MzE2YjQyMzBkMDA4NmM4YWNlYzY4N2YwMGIxY2Q5ZDFkYzYzNGY2Y2IzNThhYzBhOWE4ZmZmZmU3N2I0ZGQwYTRiZmI5NTg1MWYzYjczNTVjNzgxZGQ2MGY4NDE4ZmM4YTY1ZDE0OTA3YWZmNDdjOTAzYTU1OScsXG4gICAgcHJpdmF0ZUtleTogJzB4MDEyMzQ1Njc4OWFiY2RlZjAxMjM0NTY3ODlhYmNkZWYwMTIzNDU2Nzg5YWJjZGVmMDEyMzQ1Njc4OWFiY2RlZidcbiAgfVxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZUtleSwgbmV0d29ya0lkKSB7XG4gICAgY29uc3QgcHJpdmF0ZUtleUJ1ZmZlciA9IGZvcm1hdC5oZXhCdWZmZXIocHJpdmF0ZUtleSk7XG4gICAgY29uc3QgcHVibGljS2V5QnVmZmVyID0gc2lnbi5wcml2YXRlS2V5VG9QdWJsaWNLZXkocHJpdmF0ZUtleUJ1ZmZlcik7XG4gICAgY29uc3QgYWRkcmVzc0J1ZmZlciA9IHNpZ24ucHVibGljS2V5VG9BZGRyZXNzKHB1YmxpY0tleUJ1ZmZlcik7XG5cbiAgICBzdXBlcihmb3JtYXQuYWRkcmVzcyhhZGRyZXNzQnVmZmVyLCBuZXR3b3JrSWQpKTtcbiAgICB0aGlzLnB1YmxpY0tleSA9IGZvcm1hdC5wdWJsaWNLZXkocHVibGljS2V5QnVmZmVyKTtcbiAgICB0aGlzLnByaXZhdGVLZXkgPSBmb3JtYXQucHJpdmF0ZUtleShwcml2YXRlS2V5QnVmZmVyKTtcbiAgICB0aGlzLm5ldHdvcmtJZCA9IG5ldHdvcmtJZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmNyeXB0IGFjY291bnQgcHJpdmF0ZUtleSB0byBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZFxuICAgKiBAcmV0dXJuIHtvYmplY3R9IC0ga2V5c3RvcmVWMyBvYmplY3RcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogPiBhY2NvdW50ID0gbmV3IFByaXZhdGVLZXlBY2NvdW50KCcweDAxMjM0NTY3ODlhYmNkZWYwMTIzNDU2Nzg5YWJjZGVmMDEyMzQ1Njc4OWFiY2RlZjAxMjM0NTY3ODlhYmNkZWYnKVxuICAgKiA+IGFjY291bnQuZW5jcnlwdCgncGFzc3dvcmQnKVxuICAge3ZlcnNpb246MywgaWQ6Li4uLCBhZGRyZXNzOi4uLiwgY3J5cHRvOi4uLn1cbiAgICovXG4gIGVuY3J5cHQocGFzc3dvcmQpIHtcbiAgICByZXR1cm4gc2lnbi5lbmNyeXB0KGZvcm1hdC5oZXhCdWZmZXIodGhpcy5wcml2YXRlS2V5KSwgcGFzc3dvcmQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNpZ24gYSB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBTZWUgW1RyYW5zYWN0aW9uXShUcmFuc2FjdGlvbi5tZCNUcmFuc2FjdGlvbi5qcy9UcmFuc2FjdGlvbi8qKmNvbnN0cnVjdG9yKiopXG4gICAqIEByZXR1cm4ge1Byb21pc2U8aW1wb3J0KCcuLi9UcmFuc2FjdGlvbicpLlRyYW5zYWN0aW9uPn1cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogPiBhY2NvdW50ID0gbmV3IFByaXZhdGVLZXlBY2NvdW50KCcweDAxMjM0NTY3ODlhYmNkZWYwMTIzNDU2Nzg5YWJjZGVmMDEyMzQ1Njc4OWFiY2RlZjAxMjM0NTY3ODlhYmNkZWYnKVxuICAgKiA+IHRyYW5zYWN0aW9uID0gYWNjb3VudC5zaWduVHJhbnNhY3Rpb24oe1xuICAgICAgbm9uY2U6IDAsXG4gICAgICBnYXNQcmljZTogMTAwLFxuICAgICAgZ2FzOiAxMDAwMCxcbiAgICAgIHN0b3JhZ2VMaW1pdDogMTAwMDAsXG4gICAgICBlcG9jaEhlaWdodDogMTAwLFxuICAgICAgY2hhaW5JZDogMCxcbiAgICB9KVxuXG4gICBUcmFuc2FjdGlvbiB7XG4gICAgICBmcm9tOiAnY2Z4dGVzdDphYXNtNGMyMzFweTdqMzRmZ2hudGNma2R0Mm5tOXh2MXR1NmpkM3IxczcnLFxuICAgICAgbm9uY2U6IDAsXG4gICAgICBnYXNQcmljZTogMTAwLFxuICAgICAgZ2FzOiAxMDAwMCxcbiAgICAgIHRvOiB1bmRlZmluZWQsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgc3RvcmFnZUxpbWl0OiAxMDAwMCxcbiAgICAgIGVwb2NoSGVpZ2h0OiAxMDAsXG4gICAgICBjaGFpbklkOiAwLFxuICAgICAgZGF0YTogdW5kZWZpbmVkLFxuICAgICAgdjogMCxcbiAgICAgIHI6ICcweDA5NmY0ZTAwYWMxNWY2YmQ2ZTA5OTM3ZTk5ZjBlNTRhYWEyZGQwZjRjNmJkODQyMWUxZTgxYjBlOGJkMzA3MjMnLFxuICAgICAgczogJzB4NDFlNjNhNDFlZGUwY2JiOGNjZmFhODI3NDIzYzY1NGRjZGMwOWZiMWFhMWMzYTcyMzM1NjY1NDRhZmY0Y2Q5YSdcbiAgICB9XG4gICAqL1xuICBhc3luYyBzaWduVHJhbnNhY3Rpb24ob3B0aW9ucykge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gYXdhaXQgc3VwZXIuc2lnblRyYW5zYWN0aW9uKG9wdGlvbnMpO1xuICAgIHRyYW5zYWN0aW9uLnNpZ24odGhpcy5wcml2YXRlS2V5LCB0aGlzLm5ldHdvcmtJZCk7IC8vIHNpZ24gd2lsbCBjb3ZlciByLHMsdiBmaWVsZHNcblxuICAgIGFzc2VydCh0cmFuc2FjdGlvbi5mcm9tID09PSB0aGlzLmFkZHJlc3MsIHtcbiAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIHNpZ24gdHJhbnNhY3Rpb24uZnJvbScsXG4gICAgICBleHBlY3RlZDogdGhpcy5hZGRyZXNzLFxuICAgICAgZ290OiB0cmFuc2FjdGlvbi5mcm9tLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIFNpZ24gYSBzdHJpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zXG4gICAqIEByZXR1cm4ge1Byb21pc2U8aW1wb3J0KCcuLi9NZXNzYWdlJykuTWVzc2FnZT59XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqID4gYWNjb3VudCA9IG5ldyBQcml2YXRlS2V5QWNjb3VudCgnMHgwMTIzNDU2Nzg5YWJjZGVmMDEyMzQ1Njc4OWFiY2RlZjAxMjM0NTY3ODlhYmNkZWYwMTIzNDU2Nzg5YWJjZGVmJylcbiAgICogPiBtZXNzYWdlID0gYWNjb3VudC5zaWduTWVzc2FnZSgnSGVsbG8gV29ybGQnKVxuICAgTWVzc2FnZSB7XG4gICAgICBtZXNzYWdlOiAnSGVsbG8gV29ybGQnLFxuICAgICAgc2lnbmF0dXJlOiAnMHg2ZTkxM2UyYjc2NDU5ZjE5ZWJkMjY5YjgyYjUxYTcwZTkxMmU5MDliMmY1YzAwMjMxMmVmYzI3YmNjMjgwZjNjMjkxMzRkMzgyYWFkMGRiZDNmMGNjYzlmMGViOGYxZGJlM2Y5MDE0MWQ4MTU3NGViYjY1MDQxNTZiMGQ3Yjk1ZjAxJ1xuICAgIH1cbiAgICovXG4gIGFzeW5jIHNpZ25NZXNzYWdlKG9wdGlvbnMpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gYXdhaXQgc3VwZXIuc2lnbk1lc3NhZ2Uob3B0aW9ucyk7XG4gICAgbWVzc2FnZS5zaWduKHRoaXMucHJpdmF0ZUtleSwgdGhpcy5uZXR3b3JrSWQpOyAvLyBzaWduIHdpbGwgY292ZXIgcixzLHYgZmllbGRzXG5cbiAgICBhc3NlcnQobWVzc2FnZS5mcm9tID09PSB0aGlzLmFkZHJlc3MsIHtcbiAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIHNpZ24gbWVzc2FnZS5mcm9tJyxcbiAgICAgIGV4cGVjdGVkOiB0aGlzLmFkZHJlc3MsXG4gICAgICBnb3Q6IG1lc3NhZ2UuZnJvbSxcbiAgICB9KTtcblxuICAgIHJldHVybiBtZXNzYWdlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUHJpdmF0ZUtleUFjY291bnQ7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/wallet/PrivateKeyAccount.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/wallet/Wallet.js":
/*!**********************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/wallet/Wallet.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { assert } = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/index.js\");\nconst format = __webpack_require__(/*! ../util/format */ \"(ssr)/./node_modules/js-conflux-sdk/src/util/format.js\");\nconst Account = __webpack_require__(/*! ./Account */ \"(ssr)/./node_modules/js-conflux-sdk/src/wallet/Account.js\");\nconst PrivateKeyAccount = __webpack_require__(/*! ./PrivateKeyAccount */ \"(ssr)/./node_modules/js-conflux-sdk/src/wallet/PrivateKeyAccount.js\");\n\n/**\n * Wallet to manager accounts.\n */\nclass Wallet extends Map {\n  /**\n   * @param {number} networkId\n   * @return {Wallet}\n   */\n  constructor(networkId) {\n    super();\n    this.networkId = networkId;\n  }\n\n  /**\n   * Set network id\n   * @param {number} networkId\n   */\n  setNetworkId(networkId) {\n    this.networkId = networkId;\n  }\n\n  /**\n   * Check if address exist\n   *\n   * @param {string} address\n   * @return {boolean}\n   */\n  has(address) {\n    try {\n      address = format.address(address, this.networkId);\n      return super.has(address);\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Drop one account by address\n   *\n   * @param {string} address\n   * @return {boolean}\n   */\n  delete(address) {\n    try {\n      address = format.address(address, this.networkId);\n      return super.delete(address);\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Drop all account in wallet\n   */\n  clear() {\n    return super.clear();\n  }\n\n  /**\n   * @param {any} address - Key of account, usually is `address`\n   * @param {any} account - Account instance\n   * @return {any}\n   */\n  set(address, account) {\n    address = format.address(address, this.networkId);\n\n    assert(!this.has(address), `Wallet already has account \"${address}\"`);\n    assert(account instanceof Account, `value not instance of Account, got ${account}`);\n    return super.set(address, account);\n  }\n\n  /**\n   * @param {string} address\n   * @return {Account}\n   */\n  get(address) {\n    address = format.address(address, this.networkId);\n\n    const account = super.get(address);\n    assert(account instanceof Account, `can not found Account by \"${address}\"`);\n    return account;\n  }\n\n  /**\n   * @param {string|Buffer} privateKey - Private key of account\n   * @return {PrivateKeyAccount}\n   */\n  addPrivateKey(privateKey) {\n    if (!this.networkId) {\n      console.warn('wallet.addPrivateKey: networkId is not set properly, please set it');\n    }\n    const account = new PrivateKeyAccount(privateKey, this.networkId);\n    this.set(account.address, account);\n    return account;\n  }\n\n  /**\n   * @param {string|Buffer} [entropy] - Entropy of random account\n   * @return {PrivateKeyAccount}\n   */\n  addRandom(entropy) {\n    const account = PrivateKeyAccount.random(entropy, this.networkId);\n    this.set(account.address, account);\n    return account;\n  }\n\n  /**\n   * @param {object} keystore - Keystore version 3 object.\n   * @param {string|Buffer} password - Password for keystore to decrypt with.\n   * @return {PrivateKeyAccount}\n   */\n  addKeystore(keystore, password) {\n    const account = PrivateKeyAccount.decrypt(keystore, password, this.networkId);\n    this.set(account.address, account);\n    return account;\n  }\n}\n\nmodule.exports = Wallet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3dhbGxldC9XYWxsZXQuanMiLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxTQUFTLEVBQUUsbUJBQU8sQ0FBQyxzRUFBUztBQUNwQyxlQUFlLG1CQUFPLENBQUMsOEVBQWdCO0FBQ3ZDLGdCQUFnQixtQkFBTyxDQUFDLDRFQUFXO0FBQ25DLDBCQUEwQixtQkFBTyxDQUFDLGdHQUFxQjs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLEtBQUs7QUFDbEIsYUFBYSxLQUFLO0FBQ2xCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUEsOERBQThELFFBQVE7QUFDdEUsNkVBQTZFLFFBQVE7QUFDckY7QUFDQTs7QUFFQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0VBQW9FLFFBQVE7QUFDNUU7QUFDQTs7QUFFQTtBQUNBLGFBQWEsZUFBZTtBQUM1QixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxlQUFlO0FBQzVCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxlQUFlO0FBQzVCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL3Zpa2FzaHlhZGF2L0RldmVsb3Blci9BbGxnaXRGaWxlcy9Db25mbHV4LVR4bi12aXN1YWxpemVyL25vZGVfbW9kdWxlcy9qcy1jb25mbHV4LXNkay9zcmMvd2FsbGV0L1dhbGxldC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGFzc2VydCB9ID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuY29uc3QgZm9ybWF0ID0gcmVxdWlyZSgnLi4vdXRpbC9mb3JtYXQnKTtcbmNvbnN0IEFjY291bnQgPSByZXF1aXJlKCcuL0FjY291bnQnKTtcbmNvbnN0IFByaXZhdGVLZXlBY2NvdW50ID0gcmVxdWlyZSgnLi9Qcml2YXRlS2V5QWNjb3VudCcpO1xuXG4vKipcbiAqIFdhbGxldCB0byBtYW5hZ2VyIGFjY291bnRzLlxuICovXG5jbGFzcyBXYWxsZXQgZXh0ZW5kcyBNYXAge1xuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IG5ldHdvcmtJZFxuICAgKiBAcmV0dXJuIHtXYWxsZXR9XG4gICAqL1xuICBjb25zdHJ1Y3RvcihuZXR3b3JrSWQpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMubmV0d29ya0lkID0gbmV0d29ya0lkO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBuZXR3b3JrIGlkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuZXR3b3JrSWRcbiAgICovXG4gIHNldE5ldHdvcmtJZChuZXR3b3JrSWQpIHtcbiAgICB0aGlzLm5ldHdvcmtJZCA9IG5ldHdvcmtJZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhZGRyZXNzIGV4aXN0XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyZXNzXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBoYXMoYWRkcmVzcykge1xuICAgIHRyeSB7XG4gICAgICBhZGRyZXNzID0gZm9ybWF0LmFkZHJlc3MoYWRkcmVzcywgdGhpcy5uZXR3b3JrSWQpO1xuICAgICAgcmV0dXJuIHN1cGVyLmhhcyhhZGRyZXNzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERyb3Agb25lIGFjY291bnQgYnkgYWRkcmVzc1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYWRkcmVzc1xuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgZGVsZXRlKGFkZHJlc3MpIHtcbiAgICB0cnkge1xuICAgICAgYWRkcmVzcyA9IGZvcm1hdC5hZGRyZXNzKGFkZHJlc3MsIHRoaXMubmV0d29ya0lkKTtcbiAgICAgIHJldHVybiBzdXBlci5kZWxldGUoYWRkcmVzcyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEcm9wIGFsbCBhY2NvdW50IGluIHdhbGxldFxuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNsZWFyKCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHthbnl9IGFkZHJlc3MgLSBLZXkgb2YgYWNjb3VudCwgdXN1YWxseSBpcyBgYWRkcmVzc2BcbiAgICogQHBhcmFtIHthbnl9IGFjY291bnQgLSBBY2NvdW50IGluc3RhbmNlXG4gICAqIEByZXR1cm4ge2FueX1cbiAgICovXG4gIHNldChhZGRyZXNzLCBhY2NvdW50KSB7XG4gICAgYWRkcmVzcyA9IGZvcm1hdC5hZGRyZXNzKGFkZHJlc3MsIHRoaXMubmV0d29ya0lkKTtcblxuICAgIGFzc2VydCghdGhpcy5oYXMoYWRkcmVzcyksIGBXYWxsZXQgYWxyZWFkeSBoYXMgYWNjb3VudCBcIiR7YWRkcmVzc31cImApO1xuICAgIGFzc2VydChhY2NvdW50IGluc3RhbmNlb2YgQWNjb3VudCwgYHZhbHVlIG5vdCBpbnN0YW5jZSBvZiBBY2NvdW50LCBnb3QgJHthY2NvdW50fWApO1xuICAgIHJldHVybiBzdXBlci5zZXQoYWRkcmVzcywgYWNjb3VudCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGFkZHJlc3NcbiAgICogQHJldHVybiB7QWNjb3VudH1cbiAgICovXG4gIGdldChhZGRyZXNzKSB7XG4gICAgYWRkcmVzcyA9IGZvcm1hdC5hZGRyZXNzKGFkZHJlc3MsIHRoaXMubmV0d29ya0lkKTtcblxuICAgIGNvbnN0IGFjY291bnQgPSBzdXBlci5nZXQoYWRkcmVzcyk7XG4gICAgYXNzZXJ0KGFjY291bnQgaW5zdGFuY2VvZiBBY2NvdW50LCBgY2FuIG5vdCBmb3VuZCBBY2NvdW50IGJ5IFwiJHthZGRyZXNzfVwiYCk7XG4gICAgcmV0dXJuIGFjY291bnQ7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd8QnVmZmVyfSBwcml2YXRlS2V5IC0gUHJpdmF0ZSBrZXkgb2YgYWNjb3VudFxuICAgKiBAcmV0dXJuIHtQcml2YXRlS2V5QWNjb3VudH1cbiAgICovXG4gIGFkZFByaXZhdGVLZXkocHJpdmF0ZUtleSkge1xuICAgIGlmICghdGhpcy5uZXR3b3JrSWQpIHtcbiAgICAgIGNvbnNvbGUud2Fybignd2FsbGV0LmFkZFByaXZhdGVLZXk6IG5ldHdvcmtJZCBpcyBub3Qgc2V0IHByb3Blcmx5LCBwbGVhc2Ugc2V0IGl0Jyk7XG4gICAgfVxuICAgIGNvbnN0IGFjY291bnQgPSBuZXcgUHJpdmF0ZUtleUFjY291bnQocHJpdmF0ZUtleSwgdGhpcy5uZXR3b3JrSWQpO1xuICAgIHRoaXMuc2V0KGFjY291bnQuYWRkcmVzcywgYWNjb3VudCk7XG4gICAgcmV0dXJuIGFjY291bnQ7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd8QnVmZmVyfSBbZW50cm9weV0gLSBFbnRyb3B5IG9mIHJhbmRvbSBhY2NvdW50XG4gICAqIEByZXR1cm4ge1ByaXZhdGVLZXlBY2NvdW50fVxuICAgKi9cbiAgYWRkUmFuZG9tKGVudHJvcHkpIHtcbiAgICBjb25zdCBhY2NvdW50ID0gUHJpdmF0ZUtleUFjY291bnQucmFuZG9tKGVudHJvcHksIHRoaXMubmV0d29ya0lkKTtcbiAgICB0aGlzLnNldChhY2NvdW50LmFkZHJlc3MsIGFjY291bnQpO1xuICAgIHJldHVybiBhY2NvdW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBrZXlzdG9yZSAtIEtleXN0b3JlIHZlcnNpb24gMyBvYmplY3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfEJ1ZmZlcn0gcGFzc3dvcmQgLSBQYXNzd29yZCBmb3Iga2V5c3RvcmUgdG8gZGVjcnlwdCB3aXRoLlxuICAgKiBAcmV0dXJuIHtQcml2YXRlS2V5QWNjb3VudH1cbiAgICovXG4gIGFkZEtleXN0b3JlKGtleXN0b3JlLCBwYXNzd29yZCkge1xuICAgIGNvbnN0IGFjY291bnQgPSBQcml2YXRlS2V5QWNjb3VudC5kZWNyeXB0KGtleXN0b3JlLCBwYXNzd29yZCwgdGhpcy5uZXR3b3JrSWQpO1xuICAgIHRoaXMuc2V0KGFjY291bnQuYWRkcmVzcywgYWNjb3VudCk7XG4gICAgcmV0dXJuIGFjY291bnQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBXYWxsZXQ7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/wallet/Wallet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/js-conflux-sdk/src/wallet/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/js-conflux-sdk/src/wallet/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./Wallet */ \"(ssr)/./node_modules/js-conflux-sdk/src/wallet/Wallet.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3dhbGxldC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxnSEFBb0MiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWthc2h5YWRhdi9EZXZlbG9wZXIvQWxsZ2l0RmlsZXMvQ29uZmx1eC1UeG4tdmlzdWFsaXplci9ub2RlX21vZHVsZXMvanMtY29uZmx1eC1zZGsvc3JjL3dhbGxldC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vV2FsbGV0Jyk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-conflux-sdk/src/wallet/index.js\n");

/***/ })

};
;